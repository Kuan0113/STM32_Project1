
Lab3_sensor_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004a88  08004a88  00005a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b1c  08004b1c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b24  08004b24  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b28  08004b28  00005b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b2c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004b88  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004b88  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d666  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdc  00000000  00000000  000136f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  000153d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093f  00000000  00000000  00015fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026376  00000000  00000000  000168f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbea  00000000  00000000  0003cc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eacdc  00000000  00000000  0004c857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137533  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003640  00000000  00000000  00137578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0013abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a70 	.word	0x08004a70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004a70 	.word	0x08004a70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fbb5 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f839 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8f9 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f8c7 	bl	8000740 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b2:	f000 f885 	bl	80006c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ISL29125_Init();
 80005b6:	f000 f99d 	bl	80008f4 <ISL29125_Init>
//	  if (ISL29125_ReadRGB(&r, &g, &b) == HAL_OK) {
//	      int len = snprintf(msg, sizeof(msg), "R=%u G=%u B=%u\r\n", r, g, b);
//	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
//	  }
//	  HAL_Delay(500);
	  if (ISL29125_ReadRGBPercent(&r_pct, &g_pct, &b_pct) == HAL_OK) {
 80005ba:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <main+0x68>)
 80005bc:	4912      	ldr	r1, [pc, #72]	@ (8000608 <main+0x6c>)
 80005be:	4813      	ldr	r0, [pc, #76]	@ (800060c <main+0x70>)
 80005c0:	f000 f9ac 	bl	800091c <ISL29125_ReadRGBPercent>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d116      	bne.n	80005f8 <main+0x5c>
	      int len = snprintf(msg, sizeof(msg),"R=%d%% G=%d%% B=%d%%\r\n",r_pct, g_pct, b_pct);
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <main+0x70>)
 80005cc:	6819      	ldr	r1, [r3, #0]
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <main+0x6c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <main+0x68>)
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	9201      	str	r2, [sp, #4]
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	460b      	mov	r3, r1
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <main+0x74>)
 80005de:	2140      	movs	r1, #64	@ 0x40
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <main+0x78>)
 80005e2:	f003 fd91 	bl	8004108 <sniprintf>
 80005e6:	6078      	str	r0, [r7, #4]
	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	4908      	ldr	r1, [pc, #32]	@ (8000614 <main+0x78>)
 80005f2:	4809      	ldr	r0, [pc, #36]	@ (8000618 <main+0x7c>)
 80005f4:	f003 f82a 	bl	800364c <HAL_UART_Transmit>

	  }
	  HAL_Delay(500);
 80005f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fc:	f000 fc04 	bl	8000e08 <HAL_Delay>
	  if (ISL29125_ReadRGBPercent(&r_pct, &g_pct, &b_pct) == HAL_OK) {
 8000600:	e7db      	b.n	80005ba <main+0x1e>
 8000602:	bf00      	nop
 8000604:	2000019c 	.word	0x2000019c
 8000608:	20000198 	.word	0x20000198
 800060c:	20000194 	.word	0x20000194
 8000610:	08004a88 	.word	0x08004a88
 8000614:	20000154 	.word	0x20000154
 8000618:	200000cc 	.word	0x200000cc

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	@ 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	@ 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fda2 	bl	8004174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000642:	f001 fca3 	bl	8001f8c <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 f9da 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2310      	movs	r3, #16
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066a:	230a      	movs	r3, #10
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fcda 	bl	8002038 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800068a:	f000 f9bb 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f8a2 	bl	80027f0 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b2:	f000 f9a7 	bl	8000a04 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3758      	adds	r7, #88	@ 0x58
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000738 <MX_I2C1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <MX_I2C1_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006fc:	f000 fe50 	bl	80013a0 <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 f97d 	bl	8000a04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	@ (8000734 <MX_I2C1_Init+0x74>)
 800070e:	f001 fb97 	bl	8001e40 <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 f974 	bl	8000a04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_I2C1_Init+0x74>)
 8000720:	f001 fbd9 	bl	8001ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f96b 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000078 	.word	0x20000078
 8000738:	40005400 	.word	0x40005400
 800073c:	10d19ce4 	.word	0x10d19ce4

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <MX_USART2_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000784:	f002 ff14 	bl	80035b0 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f939 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000cc 	.word	0x200000cc
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a24      	ldr	r2, [pc, #144]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <MX_GPIO_Init+0xc4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f000 fda7 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000828:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	@ (8000868 <MX_GPIO_Init+0xc8>)
 800083a:	f000 fbef 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083e:	2320      	movs	r3, #32
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f000 fbe0 	bl	800101c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	48000800 	.word	0x48000800

0800086c <ISL29125_WriteRegister>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef ISL29125_WriteRegister(uint8_t reg, uint8_t value) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg, value};
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	733b      	strb	r3, [r7, #12]
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, buf, 2, HAL_MAX_DELAY);
 8000884:	f107 020c 	add.w	r2, r7, #12
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2302      	movs	r3, #2
 8000890:	2188      	movs	r1, #136	@ 0x88
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <ISL29125_WriteRegister+0x38>)
 8000894:	f000 fe20 	bl	80014d8 <HAL_I2C_Master_Transmit>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000078 	.word	0x20000078

080008a8 <ISL29125_ReadRegister>:

HAL_StatusTypeDef ISL29125_ReadRegister(uint8_t reg, uint8_t *value) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef ret;
    ret = HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, &reg, 1, HAL_MAX_DELAY);
 80008b4:	1dfa      	adds	r2, r7, #7
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	2188      	movs	r1, #136	@ 0x88
 80008c0:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <ISL29125_ReadRegister+0x48>)
 80008c2:	f000 fe09 	bl	80014d8 <HAL_I2C_Master_Transmit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) return ret;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <ISL29125_ReadRegister+0x2c>
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	e009      	b.n	80008e8 <ISL29125_ReadRegister+0x40>
    return HAL_I2C_Master_Receive(&hi2c1, ISL29125_ADDR, value, 1, HAL_MAX_DELAY);
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	2188      	movs	r1, #136	@ 0x88
 80008e0:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <ISL29125_ReadRegister+0x48>)
 80008e2:	f000 ff11 	bl	8001708 <HAL_I2C_Master_Receive>
 80008e6:	4603      	mov	r3, r0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000078 	.word	0x20000078

080008f4 <ISL29125_Init>:

HAL_StatusTypeDef ISL29125_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
//    // 1. Read device ID to verify sensor is connected
//    ret = ISL29125_ReadRegister(ISL29125_REG_DEVICE_ID, &device_id);
//    if (ret != HAL_OK) return ret;

    // 2. Configure sensor for RGB mode, 16-bit ADC, 375 lux
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG1, CONFIG1_MODE_RGB_16BIT);
 80008fa:	2105      	movs	r1, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ffb5 	bl	800086c <ISL29125_WriteRegister>
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <ISL29125_Init+0x1c>
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	e000      	b.n	8000912 <ISL29125_Init+0x1e>
//    // 4. Set default CONFIG3 (no interrupts, default settings)
//    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG3, CONFIG3_DEFAULT);
//    if (ret != HAL_OK) return ret;

    // Sensor initialized successfully
    return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <ISL29125_ReadRGBPercent>:
//    *b = (hi << 8) | lo;
//
//    return HAL_OK;
//}

HAL_StatusTypeDef ISL29125_ReadRGBPercent(int *r_perc, int *g_perc, int *b_perc) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
    uint8_t lo, hi;
    uint16_t r_raw, g_raw, b_raw;

    // Read Green
    ISL29125_ReadRegister(ISL29125_REG_GREEN_L, &lo);
 8000928:	f107 0311 	add.w	r3, r7, #17
 800092c:	4619      	mov	r1, r3
 800092e:	2009      	movs	r0, #9
 8000930:	f7ff ffba 	bl	80008a8 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_GREEN_H, &hi);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	200a      	movs	r0, #10
 800093c:	f7ff ffb4 	bl	80008a8 <ISL29125_ReadRegister>
    g_raw = (hi << 8) | lo;
 8000940:	7c3b      	ldrb	r3, [r7, #16]
 8000942:	b21b      	sxth	r3, r3
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b21a      	sxth	r2, r3
 8000948:	7c7b      	ldrb	r3, [r7, #17]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	82fb      	strh	r3, [r7, #22]

    // Read Red
    ISL29125_ReadRegister(ISL29125_REG_RED_L, &lo);
 8000952:	f107 0311 	add.w	r3, r7, #17
 8000956:	4619      	mov	r1, r3
 8000958:	200b      	movs	r0, #11
 800095a:	f7ff ffa5 	bl	80008a8 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_RED_H, &hi);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	200c      	movs	r0, #12
 8000966:	f7ff ff9f 	bl	80008a8 <ISL29125_ReadRegister>
    r_raw = (hi << 8) | lo;
 800096a:	7c3b      	ldrb	r3, [r7, #16]
 800096c:	b21b      	sxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	7c7b      	ldrb	r3, [r7, #17]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	82bb      	strh	r3, [r7, #20]

    // Read Blue
    ISL29125_ReadRegister(ISL29125_REG_BLUE_L, &lo);
 800097c:	f107 0311 	add.w	r3, r7, #17
 8000980:	4619      	mov	r1, r3
 8000982:	200d      	movs	r0, #13
 8000984:	f7ff ff90 	bl	80008a8 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_BLUE_H, &hi);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	200e      	movs	r0, #14
 8000990:	f7ff ff8a 	bl	80008a8 <ISL29125_ReadRegister>
    b_raw = (hi << 8) | lo;
 8000994:	7c3b      	ldrb	r3, [r7, #16]
 8000996:	b21b      	sxth	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	7c7b      	ldrb	r3, [r7, #17]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	827b      	strh	r3, [r7, #18]

    // Convert to percentage of sensor range (0–65535)
    *r_perc = (r_raw * 100) / 65535;
 80009a6:	8abb      	ldrh	r3, [r7, #20]
 80009a8:	2264      	movs	r2, #100	@ 0x64
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	4a14      	ldr	r2, [pc, #80]	@ (8000a00 <ISL29125_ReadRGBPercent+0xe4>)
 80009b0:	fb82 1203 	smull	r1, r2, r2, r3
 80009b4:	441a      	add	r2, r3
 80009b6:	13d2      	asrs	r2, r2, #15
 80009b8:	17db      	asrs	r3, r3, #31
 80009ba:	1ad2      	subs	r2, r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	601a      	str	r2, [r3, #0]
    *g_perc = (g_raw * 100) / 65535;
 80009c0:	8afb      	ldrh	r3, [r7, #22]
 80009c2:	2264      	movs	r2, #100	@ 0x64
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <ISL29125_ReadRGBPercent+0xe4>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	441a      	add	r2, r3
 80009d0:	13d2      	asrs	r2, r2, #15
 80009d2:	17db      	asrs	r3, r3, #31
 80009d4:	1ad2      	subs	r2, r2, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	601a      	str	r2, [r3, #0]
    *b_perc = (b_raw * 100) / 65535;
 80009da:	8a7b      	ldrh	r3, [r7, #18]
 80009dc:	2264      	movs	r2, #100	@ 0x64
 80009de:	fb02 f303 	mul.w	r3, r2, r3
 80009e2:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <ISL29125_ReadRGBPercent+0xe4>)
 80009e4:	fb82 1203 	smull	r1, r2, r2, r3
 80009e8:	441a      	add	r2, r3
 80009ea:	13d2      	asrs	r2, r2, #15
 80009ec:	17db      	asrs	r3, r3, #31
 80009ee:	1ad2      	subs	r2, r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	80008001 	.word	0x80008001

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2288      	movs	r2, #136	@ 0x88
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fb7b 	bl	8004174 <memset>
  if(hi2c->Instance==I2C1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a21      	ldr	r2, [pc, #132]	@ (8000b08 <HAL_I2C_MspInit+0xb0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d13b      	bne.n	8000b00 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a88:	2340      	movs	r3, #64	@ 0x40
 8000a8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 f8cf 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000aa0:	f7ff ffb0 	bl	8000a04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_I2C_MspInit+0xb4>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa8:	4a18      	ldr	r2, [pc, #96]	@ (8000b0c <HAL_I2C_MspInit+0xb4>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_I2C_MspInit+0xb4>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000abc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <HAL_I2C_MspInit+0xb8>)
 8000ae4:	f000 fa9a 	bl	800101c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_I2C_MspInit+0xb4>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <HAL_I2C_MspInit+0xb4>)
 8000aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_I2C_MspInit+0xb4>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b00:	bf00      	nop
 8000b02:	37b0      	adds	r7, #176	@ 0xb0
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400

08000b14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0ac      	sub	sp, #176	@ 0xb0
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2288      	movs	r2, #136	@ 0x88
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 fb1d 	bl	8004174 <memset>
  if(huart->Instance==USART2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <HAL_UART_MspInit+0xb0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d13b      	bne.n	8000bbc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 f871 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b5c:	f7ff ff52 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	4a18      	ldr	r2, [pc, #96]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b84:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <HAL_UART_MspInit+0xb4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b90:	230c      	movs	r3, #12
 8000b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f000 fa30 	bl	800101c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bbc:	bf00      	nop
 8000bbe:	37b0      	adds	r7, #176	@ 0xb0
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f8d1 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f003 fa92 	bl	8004184 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20018000 	.word	0x20018000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	200001a0 	.word	0x200001a0
 8000c94:	200002f0 	.word	0x200002f0

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f003 fa51 	bl	8004190 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fc55 	bl	800059c <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d00:	08004b2c 	.word	0x08004b2c
  ldr r2, =_sbss
 8000d04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d08:	200002f0 	.word	0x200002f0

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <HAL_Init+0x3c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <HAL_Init+0x3c>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f944 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f80f 	bl	8000d50 <HAL_InitTick>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	e001      	b.n	8000d42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3e:	f7ff fe67 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d023      	beq.n	8000dac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_InitTick+0x70>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_InitTick+0x6c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f941 	bl	8001002 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10f      	bne.n	8000da6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d809      	bhi.n	8000da0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f919 	bl	8000fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d98:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_InitTick+0x74>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e007      	b.n	8000db0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e004      	b.n	8000db0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e001      	b.n	8000db0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	200001a4 	.word	0x200001a4

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200001a4 	.word	0x200001a4

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	@ (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff47 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff5c 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffb0 	bl	8000f70 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	e17f      	b.n	800132c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 8171 	beq.w	8001326 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b01      	cmp	r3, #1
 800104e:	d005      	beq.n	800105c <HAL_GPIO_Init+0x40>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d130      	bne.n	80010be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	f003 0201 	and.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d118      	bne.n	80010fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80ac 	beq.w	8001326 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b5f      	ldr	r3, [pc, #380]	@ (800134c <HAL_GPIO_Init+0x330>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	4a5e      	ldr	r2, [pc, #376]	@ (800134c <HAL_GPIO_Init+0x330>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011da:	4b5c      	ldr	r3, [pc, #368]	@ (800134c <HAL_GPIO_Init+0x330>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001350 <HAL_GPIO_Init+0x334>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x242>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	@ (8001354 <HAL_GPIO_Init+0x338>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x23e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	@ (8001358 <HAL_GPIO_Init+0x33c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x23a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	@ (800135c <HAL_GPIO_Init+0x340>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x236>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	@ (8001360 <HAL_GPIO_Init+0x344>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x232>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	@ (8001364 <HAL_GPIO_Init+0x348>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	@ (8001368 <HAL_GPIO_Init+0x34c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x22a>
 8001242:	2306      	movs	r3, #6
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x244>
 8001246:	2307      	movs	r3, #7
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x244>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x244>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800125e:	2300      	movs	r3, #0
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001270:	4937      	ldr	r1, [pc, #220]	@ (8001350 <HAL_GPIO_Init+0x334>)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HAL_GPIO_Init+0x350>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a2:	4a32      	ldr	r2, [pc, #200]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a8:	4b30      	ldr	r3, [pc, #192]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012cc:	4a27      	ldr	r2, [pc, #156]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d2:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f6:	4a1d      	ldr	r2, [pc, #116]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001320:	4a12      	ldr	r2, [pc, #72]	@ (800136c <HAL_GPIO_Init+0x350>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f ae78 	bne.w	800102c <HAL_GPIO_Init+0x10>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	48001000 	.word	0x48001000
 8001364:	48001400 	.word	0x48001400
 8001368:	48001800 	.word	0x48001800
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800138c:	e002      	b.n	8001394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e08d      	b.n	80014ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fb46 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	@ 0x24
 80013d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	e006      	b.n	8001428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d108      	bne.n	8001442 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	e007      	b.n	8001452 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69d9      	ldr	r1, [r3, #28]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2220      	movs	r2, #32
 80014ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	817b      	strh	r3, [r7, #10]
 80014e8:	4613      	mov	r3, r2
 80014ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	f040 80fd 	bne.w	80016f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_I2C_Master_Transmit+0x30>
 8001504:	2302      	movs	r3, #2
 8001506:	e0f6      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x21e>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001510:	f7ff fc6e 	bl	8000df0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2319      	movs	r3, #25
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fa0a 	bl	800193c <I2C_WaitOnFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0e1      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2221      	movs	r2, #33	@ 0x21
 8001536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2210      	movs	r2, #16
 800153e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	893a      	ldrh	r2, [r7, #8]
 8001552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155e:	b29b      	uxth	r3, r3
 8001560:	2bff      	cmp	r3, #255	@ 0xff
 8001562:	d906      	bls.n	8001572 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	22ff      	movs	r2, #255	@ 0xff
 8001568:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800156a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e007      	b.n	8001582 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800157c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001580:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001586:	2b00      	cmp	r3, #0
 8001588:	d024      	beq.n	80015d4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	8979      	ldrh	r1, [r7, #10]
 80015c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001700 <HAL_I2C_Master_Transmit+0x228>)
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 fc05 	bl	8001ddc <I2C_TransferConfig>
 80015d2:	e066      	b.n	80016a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	8979      	ldrh	r1, [r7, #10]
 80015dc:	4b48      	ldr	r3, [pc, #288]	@ (8001700 <HAL_I2C_Master_Transmit+0x228>)
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fbfa 	bl	8001ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015e8:	e05b      	b.n	80016a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	6a39      	ldr	r1, [r7, #32]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f9fd 	bl	80019ee <I2C_WaitOnTXISFlagUntilTimeout>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07b      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001632:	b29b      	uxth	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d034      	beq.n	80016a2 <HAL_I2C_Master_Transmit+0x1ca>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	d130      	bne.n	80016a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	2200      	movs	r2, #0
 8001648:	2180      	movs	r1, #128	@ 0x80
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f976 	bl	800193c <I2C_WaitOnFlagUntilTimeout>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e04d      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165e:	b29b      	uxth	r3, r3
 8001660:	2bff      	cmp	r3, #255	@ 0xff
 8001662:	d90e      	bls.n	8001682 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	22ff      	movs	r2, #255	@ 0xff
 8001668:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166e:	b2da      	uxtb	r2, r3
 8001670:	8979      	ldrh	r1, [r7, #10]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fbae 	bl	8001ddc <I2C_TransferConfig>
 8001680:	e00f      	b.n	80016a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001690:	b2da      	uxtb	r2, r3
 8001692:	8979      	ldrh	r1, [r7, #10]
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fb9d 	bl	8001ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d19e      	bne.n	80015ea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	6a39      	ldr	r1, [r7, #32]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f9e3 	bl	8001a7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e01a      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2220      	movs	r2, #32
 80016c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_I2C_Master_Transmit+0x22c>)
 80016d4:	400b      	ands	r3, r1
 80016d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2220      	movs	r2, #32
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e000      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80016f4:	2302      	movs	r3, #2
  }
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	80002000 	.word	0x80002000
 8001704:	fe00e800 	.word	0xfe00e800

08001708 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	461a      	mov	r2, r3
 8001714:	460b      	mov	r3, r1
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	4613      	mov	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b20      	cmp	r3, #32
 8001726:	f040 80db 	bne.w	80018e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_I2C_Master_Receive+0x30>
 8001734:	2302      	movs	r3, #2
 8001736:	e0d4      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1da>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001740:	f7ff fb56 	bl	8000df0 <HAL_GetTick>
 8001744:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2319      	movs	r3, #25
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f8f2 	bl	800193c <I2C_WaitOnFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0bf      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2222      	movs	r2, #34	@ 0x22
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2210      	movs	r2, #16
 800176e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	893a      	ldrh	r2, [r7, #8]
 8001782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	2bff      	cmp	r3, #255	@ 0xff
 8001792:	d90e      	bls.n	80017b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2201      	movs	r2, #1
 8001798:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	8979      	ldrh	r1, [r7, #10]
 80017a2:	4b52      	ldr	r3, [pc, #328]	@ (80018ec <HAL_I2C_Master_Receive+0x1e4>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fb16 	bl	8001ddc <I2C_TransferConfig>
 80017b0:	e06d      	b.n	800188e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	8979      	ldrh	r1, [r7, #10]
 80017c4:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <HAL_I2C_Master_Receive+0x1e4>)
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fb05 	bl	8001ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80017d2:	e05c      	b.n	800188e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	6a39      	ldr	r1, [r7, #32]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f993 	bl	8001b04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e07c      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d034      	beq.n	800188e <HAL_I2C_Master_Receive+0x186>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d130      	bne.n	800188e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	2200      	movs	r2, #0
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f880 	bl	800193c <I2C_WaitOnFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e04d      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2bff      	cmp	r3, #255	@ 0xff
 800184e:	d90e      	bls.n	800186e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	22ff      	movs	r2, #255	@ 0xff
 8001854:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185a:	b2da      	uxtb	r2, r3
 800185c:	8979      	ldrh	r1, [r7, #10]
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fab8 	bl	8001ddc <I2C_TransferConfig>
 800186c:	e00f      	b.n	800188e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187c:	b2da      	uxtb	r2, r3
 800187e:	8979      	ldrh	r1, [r7, #10]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 faa7 	bl	8001ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d19d      	bne.n	80017d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	6a39      	ldr	r1, [r7, #32]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f8ed 	bl	8001a7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e01a      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2220      	movs	r2, #32
 80018b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_I2C_Master_Receive+0x1e8>)
 80018c0:	400b      	ands	r3, r1
 80018c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80018e0:	2302      	movs	r3, #2
  }
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	80002400 	.word	0x80002400
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d103      	bne.n	8001912 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b01      	cmp	r3, #1
 800191e:	d007      	beq.n	8001930 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	619a      	str	r2, [r3, #24]
  }
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800194c:	e03b      	b.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f962 	bl	8001c1c <I2C_IsErrorOccurred>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e041      	b.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d02d      	beq.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196a:	f7ff fa41 	bl	8000df0 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d302      	bcc.n	8001980 <I2C_WaitOnFlagUntilTimeout+0x44>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d122      	bne.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4013      	ands	r3, r2
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	429a      	cmp	r2, r3
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	429a      	cmp	r2, r3
 800199c:	d113      	bne.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4013      	ands	r3, r2
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d0b4      	beq.n	800194e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019fa:	e033      	b.n	8001a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f90b 	bl	8001c1c <I2C_IsErrorOccurred>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e031      	b.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a16:	d025      	beq.n	8001a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a18:	f7ff f9ea 	bl	8000df0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d302      	bcc.n	8001a2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11a      	bne.n	8001a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d013      	beq.n	8001a64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a40:	f043 0220 	orr.w	r2, r3, #32
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e007      	b.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d1c4      	bne.n	80019fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a88:	e02f      	b.n	8001aea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f8c4 	bl	8001c1c <I2C_IsErrorOccurred>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e02d      	b.n	8001afa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9e:	f7ff f9a7 	bl	8000df0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d11a      	bne.n	8001aea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d013      	beq.n	8001aea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e007      	b.n	8001afa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d1c8      	bne.n	8001a8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001b14:	e071      	b.n	8001bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f87e 	bl	8001c1c <I2C_IsErrorOccurred>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d13b      	bne.n	8001bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d138      	bne.n	8001bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d105      	bne.n	8001b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d121      	bne.n	8001baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2204      	movs	r2, #4
 8001b72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	75fb      	strb	r3, [r7, #23]
 8001ba8:	e002      	b.n	8001bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001bb0:	f7ff f91e 	bl	8000df0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d302      	bcc.n	8001bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d119      	bne.n	8001bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d116      	bne.n	8001bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d00f      	beq.n	8001bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	f043 0220 	orr.w	r2, r3, #32
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d002      	beq.n	8001c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d083      	beq.n	8001b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	fe00e800 	.word	0xfe00e800

08001c1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	@ 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d068      	beq.n	8001d1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c50:	e049      	b.n	8001ce6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d045      	beq.n	8001ce6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c5a:	f7ff f8c9 	bl	8000df0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d302      	bcc.n	8001c70 <I2C_IsErrorOccurred+0x54>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d13a      	bne.n	8001ce6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c92:	d121      	bne.n	8001cd8 <I2C_IsErrorOccurred+0xbc>
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c9a:	d01d      	beq.n	8001cd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c9c:	7cfb      	ldrb	r3, [r7, #19]
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d01a      	beq.n	8001cd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cb2:	f7ff f89d 	bl	8000df0 <HAL_GetTick>
 8001cb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb8:	e00e      	b.n	8001cd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cba:	f7ff f899 	bl	8000df0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b19      	cmp	r3, #25
 8001cc6:	d907      	bls.n	8001cd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001cd6:	e006      	b.n	8001ce6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d1e9      	bne.n	8001cba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d003      	beq.n	8001cfc <I2C_IsErrorOccurred+0xe0>
 8001cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0aa      	beq.n	8001c52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01c      	beq.n	8001dca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fdaf 	bl	80018f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <I2C_IsErrorOccurred+0x1bc>)
 8001da2:	400b      	ands	r3, r1
 8001da4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3728      	adds	r7, #40	@ 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	fe00e800 	.word	0xfe00e800

08001ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	817b      	strh	r3, [r7, #10]
 8001dea:	4613      	mov	r3, r2
 8001dec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001df4:	7a7b      	ldrb	r3, [r7, #9]
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	0d5b      	lsrs	r3, r3, #21
 8001e16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <I2C_TransferConfig+0x60>)
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	ea02 0103 	and.w	r1, r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e2e:	bf00      	nop
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	03ff63ff 	.word	0x03ff63ff

08001e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d138      	bne.n	8001ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e032      	b.n	8001eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	@ 0x24
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6819      	ldr	r1, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d139      	bne.n	8001f60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e033      	b.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2224      	movs	r2, #36	@ 0x24
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e000      	b.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
  }
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40007000 	.word	0x40007000

08001f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f9a:	d130      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9c:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa8:	d038      	beq.n	800201c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fba:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2232      	movs	r2, #50	@ 0x32
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd0:	e002      	b.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe4:	d102      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f2      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fec:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff8:	d110      	bne.n	800201c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e00f      	b.n	800201e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800200a:	d007      	beq.n	800201c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002014:	4a05      	ldr	r2, [pc, #20]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800201a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40007000 	.word	0x40007000
 8002030:	20000000 	.word	0x20000000
 8002034:	431bde83 	.word	0x431bde83

08002038 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e3ca      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204a:	4b97      	ldr	r3, [pc, #604]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002054:	4b94      	ldr	r3, [pc, #592]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80e4 	beq.w	8002234 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d007      	beq.n	8002082 <HAL_RCC_OscConfig+0x4a>
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b0c      	cmp	r3, #12
 8002076:	f040 808b 	bne.w	8002190 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b01      	cmp	r3, #1
 800207e:	f040 8087 	bne.w	8002190 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002082:	4b89      	ldr	r3, [pc, #548]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_RCC_OscConfig+0x62>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e3a2      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	4b82      	ldr	r3, [pc, #520]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_RCC_OscConfig+0x7c>
 80020aa:	4b7f      	ldr	r3, [pc, #508]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_OscConfig+0x88>
 80020b4:	4b7c      	ldr	r3, [pc, #496]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d223      	bcs.n	800210c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fd55 	bl	8002b78 <RCC_SetFlashLatencyFromMSIRange>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e383      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d8:	4b73      	ldr	r3, [pc, #460]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a72      	ldr	r2, [pc, #456]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b70      	ldr	r3, [pc, #448]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	496d      	ldr	r1, [pc, #436]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f6:	4b6c      	ldr	r3, [pc, #432]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	4968      	ldr	r1, [pc, #416]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
 800210a:	e025      	b.n	8002158 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800210c:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a65      	ldr	r2, [pc, #404]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b63      	ldr	r3, [pc, #396]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4960      	ldr	r1, [pc, #384]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212a:	4b5f      	ldr	r3, [pc, #380]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	495b      	ldr	r1, [pc, #364]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fd15 	bl	8002b78 <RCC_SetFlashLatencyFromMSIRange>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e343      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002158:	f000 fc4a 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b52      	ldr	r3, [pc, #328]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	4950      	ldr	r1, [pc, #320]	@ (80022ac <HAL_RCC_OscConfig+0x274>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	4a4e      	ldr	r2, [pc, #312]	@ (80022b0 <HAL_RCC_OscConfig+0x278>)
 8002176:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002178:	4b4e      	ldr	r3, [pc, #312]	@ (80022b4 <HAL_RCC_OscConfig+0x27c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fde7 	bl	8000d50 <HAL_InitTick>
 8002182:	4603      	mov	r3, r0
 8002184:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d052      	beq.n	8002232 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	e327      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d032      	beq.n	80021fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002198:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a42      	ldr	r2, [pc, #264]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fe24 	bl	8000df0 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ac:	f7fe fe20 	bl	8000df0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e310      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021be:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ca:	4b37      	ldr	r3, [pc, #220]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a36      	ldr	r2, [pc, #216]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4931      	ldr	r1, [pc, #196]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	492c      	ldr	r1, [pc, #176]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
 80021fc:	e01a      	b.n	8002234 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021fe:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220a:	f7fe fdf1 	bl	8000df0 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002212:	f7fe fded 	bl	8000df0 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e2dd      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002224:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x1da>
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002232:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d074      	beq.n	800232a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b08      	cmp	r3, #8
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x21a>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d10e      	bne.n	800226a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d10b      	bne.n	800226a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d064      	beq.n	8002328 <HAL_RCC_OscConfig+0x2f0>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d160      	bne.n	8002328 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e2ba      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x24a>
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0b      	ldr	r2, [pc, #44]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e026      	b.n	80022d0 <HAL_RCC_OscConfig+0x298>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800228a:	d115      	bne.n	80022b8 <HAL_RCC_OscConfig+0x280>
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a02      	ldr	r2, [pc, #8]	@ (80022a8 <HAL_RCC_OscConfig+0x270>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e014      	b.n	80022d0 <HAL_RCC_OscConfig+0x298>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08004aa0 	.word	0x08004aa0
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004
 80022b8:	4ba0      	ldr	r3, [pc, #640]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a9f      	ldr	r2, [pc, #636]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b9d      	ldr	r3, [pc, #628]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a9c      	ldr	r2, [pc, #624]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fd8a 	bl	8000df0 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe fd86 	bl	8000df0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	@ 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e276      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f2:	4b92      	ldr	r3, [pc, #584]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x2a8>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fd76 	bl	8000df0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fd72 	bl	8000df0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	@ 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e262      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231a:	4b88      	ldr	r3, [pc, #544]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x2d0>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d060      	beq.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d005      	beq.n	8002348 <HAL_RCC_OscConfig+0x310>
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d119      	bne.n	8002376 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d116      	bne.n	8002376 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002348:	4b7c      	ldr	r3, [pc, #496]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_OscConfig+0x328>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e23f      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b76      	ldr	r3, [pc, #472]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	4973      	ldr	r1, [pc, #460]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	e040      	b.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d023      	beq.n	80023c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800237e:	4b6f      	ldr	r3, [pc, #444]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6e      	ldr	r2, [pc, #440]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe fd31 	bl	8000df0 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7fe fd2d 	bl	8000df0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e21d      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a4:	4b65      	ldr	r3, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b62      	ldr	r3, [pc, #392]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	495f      	ldr	r1, [pc, #380]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
 80023c4:	e018      	b.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c6:	4b5d      	ldr	r3, [pc, #372]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5c      	ldr	r2, [pc, #368]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80023cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fd0d 	bl	8000df0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023da:	f7fe fd09 	bl	8000df0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1f9      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ec:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03c      	beq.n	800247e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01c      	beq.n	8002446 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240c:	4b4b      	ldr	r3, [pc, #300]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 800240e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002412:	4a4a      	ldr	r2, [pc, #296]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fce8 	bl	8000df0 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7fe fce4 	bl	8000df0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1d4      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ef      	beq.n	8002424 <HAL_RCC_OscConfig+0x3ec>
 8002444:	e01b      	b.n	800247e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002446:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800244c:	4a3b      	ldr	r2, [pc, #236]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe fccb 	bl	8000df0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245e:	f7fe fcc7 	bl	8000df0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1b7      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002470:	4b32      	ldr	r3, [pc, #200]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ef      	bne.n	800245e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80a6 	beq.w	80025d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249c:	4b27      	ldr	r3, [pc, #156]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	4a26      	ldr	r2, [pc, #152]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024a8:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b4:	2301      	movs	r3, #1
 80024b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b8:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <HAL_RCC_OscConfig+0x508>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d118      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <HAL_RCC_OscConfig+0x508>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_RCC_OscConfig+0x508>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d0:	f7fe fc8e 	bl	8000df0 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7fe fc8a 	bl	8000df0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e17a      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x508>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x4d8>
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002504:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800250e:	e029      	b.n	8002564 <HAL_RCC_OscConfig+0x52c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b05      	cmp	r3, #5
 8002516:	d115      	bne.n	8002544 <HAL_RCC_OscConfig+0x50c>
 8002518:	4b08      	ldr	r3, [pc, #32]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	4a07      	ldr	r2, [pc, #28]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002528:	4b04      	ldr	r3, [pc, #16]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	4a03      	ldr	r2, [pc, #12]	@ (800253c <HAL_RCC_OscConfig+0x504>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x52c>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	40007000 	.word	0x40007000
 8002544:	4b9c      	ldr	r3, [pc, #624]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	4a9b      	ldr	r2, [pc, #620]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002554:	4b98      	ldr	r3, [pc, #608]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255a:	4a97      	ldr	r2, [pc, #604]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d016      	beq.n	800259a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fc40 	bl	8000df0 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002572:	e00a      	b.n	800258a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7fe fc3c 	bl	8000df0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e12a      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258a:	4b8b      	ldr	r3, [pc, #556]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ed      	beq.n	8002574 <HAL_RCC_OscConfig+0x53c>
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fe fc29 	bl	8000df0 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fc25 	bl	8000df0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e113      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b8:	4b7f      	ldr	r3, [pc, #508]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ed      	bne.n	80025a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c6:	7ffb      	ldrb	r3, [r7, #31]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025cc:	4b7a      	ldr	r3, [pc, #488]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	4a79      	ldr	r2, [pc, #484]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80025d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80fe 	beq.w	80027de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	f040 80d0 	bne.w	800278c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025ec:	4b72      	ldr	r3, [pc, #456]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d130      	bne.n	8002662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	3b01      	subs	r3, #1
 800260c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d127      	bne.n	8002662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d11f      	bne.n	8002662 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800262c:	2a07      	cmp	r2, #7
 800262e:	bf14      	ite	ne
 8002630:	2201      	movne	r2, #1
 8002632:	2200      	moveq	r2, #0
 8002634:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002636:	4293      	cmp	r3, r2
 8002638:	d113      	bne.n	8002662 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	3b01      	subs	r3, #1
 8002648:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d109      	bne.n	8002662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	3b01      	subs	r3, #1
 800265c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d06e      	beq.n	8002740 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d069      	beq.n	800273c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002668:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002674:	4b50      	ldr	r3, [pc, #320]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0ad      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002684:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a4b      	ldr	r2, [pc, #300]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800268a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002690:	f7fe fbae 	bl	8000df0 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fbaa 	bl	8000df0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e09a      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026aa:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b6:	4b40      	ldr	r3, [pc, #256]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b40      	ldr	r3, [pc, #256]	@ (80027bc <HAL_RCC_OscConfig+0x784>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026c6:	3a01      	subs	r2, #1
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	4311      	orrs	r1, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026d0:	0212      	lsls	r2, r2, #8
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026d8:	0852      	lsrs	r2, r2, #1
 80026da:	3a01      	subs	r2, #1
 80026dc:	0552      	lsls	r2, r2, #21
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026e4:	0852      	lsrs	r2, r2, #1
 80026e6:	3a01      	subs	r2, #1
 80026e8:	0652      	lsls	r2, r2, #25
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026f0:	0912      	lsrs	r2, r2, #4
 80026f2:	0452      	lsls	r2, r2, #17
 80026f4:	430a      	orrs	r2, r1
 80026f6:	4930      	ldr	r1, [pc, #192]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026fc:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002708:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a2a      	ldr	r2, [pc, #168]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002714:	f7fe fb6c 	bl	8000df0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fb68 	bl	8000df0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e058      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	4b22      	ldr	r3, [pc, #136]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800273a:	e050      	b.n	80027de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e04f      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002740:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d148      	bne.n	80027de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002758:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 800275e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002762:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002764:	f7fe fb44 	bl	8000df0 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe fb40 	bl	8000df0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e030      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x734>
 800278a:	e028      	b.n	80027de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d023      	beq.n	80027da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a08      	ldr	r2, [pc, #32]	@ (80027b8 <HAL_RCC_OscConfig+0x780>)
 8002798:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800279c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fb27 	bl	8000df0 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a4:	e00c      	b.n	80027c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fb23 	bl	8000df0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d905      	bls.n	80027c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e013      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
 80027b8:	40021000 	.word	0x40021000
 80027bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_OscConfig+0x7b0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ec      	bne.n	80027a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_RCC_OscConfig+0x7b0>)
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	4905      	ldr	r1, [pc, #20]	@ (80027e8 <HAL_RCC_OscConfig+0x7b0>)
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_OscConfig+0x7b4>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
 80027d8:	e001      	b.n	80027de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	feeefffc 	.word	0xfeeefffc

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0e7      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b75      	ldr	r3, [pc, #468]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d910      	bls.n	8002834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b72      	ldr	r3, [pc, #456]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 0207 	bic.w	r2, r3, #7
 800281a:	4970      	ldr	r1, [pc, #448]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b6e      	ldr	r3, [pc, #440]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0cf      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	4b66      	ldr	r3, [pc, #408]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800284c:	429a      	cmp	r2, r3
 800284e:	d908      	bls.n	8002862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b63      	ldr	r3, [pc, #396]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4960      	ldr	r1, [pc, #384]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d04c      	beq.n	8002908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	4b5a      	ldr	r3, [pc, #360]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d121      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0a6      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288e:	4b54      	ldr	r3, [pc, #336]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d115      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e09a      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a6:	4b4e      	ldr	r3, [pc, #312]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e08e      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b6:	4b4a      	ldr	r3, [pc, #296]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e086      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b46      	ldr	r3, [pc, #280]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4943      	ldr	r1, [pc, #268]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d8:	f7fe fa8a 	bl	8000df0 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fa86 	bl	8000df0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e06e      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b3a      	ldr	r3, [pc, #232]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d010      	beq.n	8002936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002920:	429a      	cmp	r2, r3
 8002922:	d208      	bcs.n	8002936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b2e      	ldr	r3, [pc, #184]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	492b      	ldr	r1, [pc, #172]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002936:	4b29      	ldr	r3, [pc, #164]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d210      	bcs.n	8002966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002944:	4b25      	ldr	r3, [pc, #148]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 0207 	bic.w	r2, r3, #7
 800294c:	4923      	ldr	r1, [pc, #140]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002954:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e036      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4918      	ldr	r1, [pc, #96]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002990:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4910      	ldr	r1, [pc, #64]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a4:	f000 f824 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	490b      	ldr	r1, [pc, #44]	@ (80029e4 <HAL_RCC_ClockConfig+0x1f4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
 80029c0:	4a09      	ldr	r2, [pc, #36]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80029c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1fc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f9c1 	bl	8000d50 <HAL_InitTick>
 80029ce:	4603      	mov	r3, r0
 80029d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029d2:	7afb      	ldrb	r3, [r7, #11]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08004aa0 	.word	0x08004aa0
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	@ 0x24
 80029f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fe:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x34>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d121      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d11e      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a24:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a30:	4b31      	ldr	r3, [pc, #196]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e005      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	e004      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a74:	4b23      	ldr	r3, [pc, #140]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d134      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d003      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0xac>
 8002a94:	e005      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a96:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a98:	617b      	str	r3, [r7, #20]
      break;
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a9e:	617b      	str	r3, [r7, #20]
      break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	617b      	str	r3, [r7, #20]
      break;
 8002aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	fb03 f202 	mul.w	r2, r3, r2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	0e5b      	lsrs	r3, r3, #25
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	@ 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	08004ab8 	.word	0x08004ab8
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200

08002b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000

08002b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b24:	f7ff fff0 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4904      	ldr	r1, [pc, #16]	@ (8002b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08004ab0 	.word	0x08004ab0

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b50:	f7ff ffda 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0adb      	lsrs	r3, r3, #11
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4904      	ldr	r1, [pc, #16]	@ (8002b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08004ab0 	.word	0x08004ab0

08002b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b84:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b90:	f7ff f9ee 	bl	8001f70 <HAL_PWREx_GetVoltageRange>
 8002b94:	6178      	str	r0, [r7, #20]
 8002b96:	e014      	b.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	4a24      	ldr	r2, [pc, #144]	@ (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba4:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb0:	f7ff f9de 	bl	8001f70 <HAL_PWREx_GetVoltageRange>
 8002bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bba:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bc8:	d10b      	bne.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b80      	cmp	r3, #128	@ 0x80
 8002bce:	d919      	bls.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bd4:	d902      	bls.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e013      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bdc:	2301      	movs	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e010      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b80      	cmp	r3, #128	@ 0x80
 8002be6:	d902      	bls.n	8002bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002be8:	2303      	movs	r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e00a      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b80      	cmp	r3, #128	@ 0x80
 8002bf2:	d102      	bne.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e004      	b.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b70      	cmp	r3, #112	@ 0x70
 8002bfe:	d101      	bne.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c00:	2301      	movs	r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 0207 	bic.w	r2, r3, #7
 8002c0c:	4909      	ldr	r1, [pc, #36]	@ (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c14:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40022000 	.word	0x40022000

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c44:	2300      	movs	r3, #0
 8002c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d041      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c5c:	d02a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c5e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c62:	d824      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c6e:	d81e      	bhi.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c78:	d010      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c7a:	e018      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c7c:	4b86      	ldr	r3, [pc, #536]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a85      	ldr	r2, [pc, #532]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c88:	e015      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fabb 	bl	800320c <RCCEx_PLLSAI1_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9a:	e00c      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fba6 	bl	80033f4 <RCCEx_PLLSAI2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cac:	e003      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cbc:	4b76      	ldr	r3, [pc, #472]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cca:	4973      	ldr	r1, [pc, #460]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cd2:	e001      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d041      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ce8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cec:	d02a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cf2:	d824      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cfe:	d81e      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d08:	d010      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d0a:	e018      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d0c:	4b62      	ldr	r3, [pc, #392]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a61      	ldr	r2, [pc, #388]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d18:	e015      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa73 	bl	800320c <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d2a:	e00c      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3320      	adds	r3, #32
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fb5e 	bl	80033f4 <RCCEx_PLLSAI2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	74fb      	strb	r3, [r7, #19]
      break;
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d4c:	4b52      	ldr	r3, [pc, #328]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d5a:	494f      	ldr	r1, [pc, #316]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a0 	beq.w	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b41      	ldr	r3, [pc, #260]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d94:	4a40      	ldr	r2, [pc, #256]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a3a      	ldr	r2, [pc, #232]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db8:	f7fe f81a 	bl	8000df0 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc0:	f7fe f816 	bl	8000df0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d902      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8002dd2:	e005      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dd4:	4b31      	ldr	r3, [pc, #196]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d15c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002de6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01f      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d019      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e04:	4b24      	ldr	r3, [pc, #144]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e10:	4b21      	ldr	r3, [pc, #132]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	4a20      	ldr	r2, [pc, #128]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e20:	4b1d      	ldr	r3, [pc, #116]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	4a1c      	ldr	r2, [pc, #112]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e30:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fd ffd5 	bl	8000df0 <HAL_GetTick>
 8002e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	e00b      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fd ffd1 	bl	8000df0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d902      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e60:	e006      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ec      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e86:	4904      	ldr	r1, [pc, #16]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
 8002e94:	e006      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea4:	7c7b      	ldrb	r3, [r7, #17]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eaa:	4b9e      	ldr	r3, [pc, #632]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	4a9d      	ldr	r2, [pc, #628]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec2:	4b98      	ldr	r3, [pc, #608]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	4994      	ldr	r1, [pc, #592]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	f023 020c 	bic.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef2:	498c      	ldr	r1, [pc, #560]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f06:	4b87      	ldr	r3, [pc, #540]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	4983      	ldr	r1, [pc, #524]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f28:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	497b      	ldr	r1, [pc, #492]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f4a:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f58:	4972      	ldr	r1, [pc, #456]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f6c:	4b6d      	ldr	r3, [pc, #436]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	496a      	ldr	r1, [pc, #424]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f8e:	4b65      	ldr	r3, [pc, #404]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	4961      	ldr	r1, [pc, #388]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbe:	4959      	ldr	r1, [pc, #356]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd2:	4b54      	ldr	r3, [pc, #336]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe0:	4950      	ldr	r1, [pc, #320]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003002:	4948      	ldr	r1, [pc, #288]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003016:	4b43      	ldr	r3, [pc, #268]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	493f      	ldr	r1, [pc, #252]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d028      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003038:	4b3a      	ldr	r3, [pc, #232]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003046:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003056:	d106      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003058:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a31      	ldr	r2, [pc, #196]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003062:	60d3      	str	r3, [r2, #12]
 8003064:	e011      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800306a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800306e:	d10c      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f8c8 	bl	800320c <RCCEx_PLLSAI1_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d028      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003096:	4b23      	ldr	r3, [pc, #140]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	491f      	ldr	r1, [pc, #124]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030c0:	60d3      	str	r3, [r2, #12]
 80030c2:	e011      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f899 	bl	800320c <RCCEx_PLLSAI1_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d02b      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003102:	4908      	ldr	r1, [pc, #32]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003112:	d109      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a02      	ldr	r2, [pc, #8]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800311e:	60d3      	str	r3, [r2, #12]
 8003120:	e014      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003130:	d10c      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f867 	bl	800320c <RCCEx_PLLSAI1_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d02f      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003158:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003166:	4928      	ldr	r1, [pc, #160]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003176:	d10d      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f844 	bl	800320c <RCCEx_PLLSAI1_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d014      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	74bb      	strb	r3, [r7, #18]
 8003192:	e011      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3320      	adds	r3, #32
 80031a2:	2102      	movs	r1, #2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f925 	bl	80033f4 <RCCEx_PLLSAI2_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031c4:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031d2:	490d      	ldr	r1, [pc, #52]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031e6:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031f6:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000

0800320c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800321a:	4b75      	ldr	r3, [pc, #468]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d018      	beq.n	8003258 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003226:	4b72      	ldr	r3, [pc, #456]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d10d      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
       ||
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800323e:	4b6c      	ldr	r3, [pc, #432]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
       ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d047      	beq.n	80032e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e044      	b.n	80032e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d018      	beq.n	8003292 <RCCEx_PLLSAI1_Config+0x86>
 8003260:	2b03      	cmp	r3, #3
 8003262:	d825      	bhi.n	80032b0 <RCCEx_PLLSAI1_Config+0xa4>
 8003264:	2b01      	cmp	r3, #1
 8003266:	d002      	beq.n	800326e <RCCEx_PLLSAI1_Config+0x62>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d009      	beq.n	8003280 <RCCEx_PLLSAI1_Config+0x74>
 800326c:	e020      	b.n	80032b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800326e:	4b60      	ldr	r3, [pc, #384]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11d      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800327e:	e01a      	b.n	80032b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003280:	4b5b      	ldr	r3, [pc, #364]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d116      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003290:	e013      	b.n	80032ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003292:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800329e:	4b54      	ldr	r3, [pc, #336]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ae:	e006      	b.n	80032be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	e004      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032be:	bf00      	nop
    }

    if(status == HAL_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032c6:	4b4a      	ldr	r3, [pc, #296]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	430b      	orrs	r3, r1
 80032dc:	4944      	ldr	r1, [pc, #272]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d17d      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032e8:	4b41      	ldr	r3, [pc, #260]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a40      	ldr	r2, [pc, #256]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7fd fd7c 	bl	8000df0 <HAL_GetTick>
 80032f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032fa:	e009      	b.n	8003310 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032fc:	f7fd fd78 	bl	8000df0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d902      	bls.n	8003310 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	73fb      	strb	r3, [r7, #15]
        break;
 800330e:	e005      	b.n	800331c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003310:	4b37      	ldr	r3, [pc, #220]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ef      	bne.n	80032fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d160      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d111      	bne.n	800334c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003328:	4b31      	ldr	r3, [pc, #196]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6892      	ldr	r2, [r2, #8]
 8003338:	0211      	lsls	r1, r2, #8
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68d2      	ldr	r2, [r2, #12]
 800333e:	0912      	lsrs	r2, r2, #4
 8003340:	0452      	lsls	r2, r2, #17
 8003342:	430a      	orrs	r2, r1
 8003344:	492a      	ldr	r1, [pc, #168]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	610b      	str	r3, [r1, #16]
 800334a:	e027      	b.n	800339c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d112      	bne.n	8003378 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003352:	4b27      	ldr	r3, [pc, #156]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800335a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6892      	ldr	r2, [r2, #8]
 8003362:	0211      	lsls	r1, r2, #8
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6912      	ldr	r2, [r2, #16]
 8003368:	0852      	lsrs	r2, r2, #1
 800336a:	3a01      	subs	r2, #1
 800336c:	0552      	lsls	r2, r2, #21
 800336e:	430a      	orrs	r2, r1
 8003370:	491f      	ldr	r1, [pc, #124]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	610b      	str	r3, [r1, #16]
 8003376:	e011      	b.n	800339c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003378:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003380:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	0211      	lsls	r1, r2, #8
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6952      	ldr	r2, [r2, #20]
 800338e:	0852      	lsrs	r2, r2, #1
 8003390:	3a01      	subs	r2, #1
 8003392:	0652      	lsls	r2, r2, #25
 8003394:	430a      	orrs	r2, r1
 8003396:	4916      	ldr	r1, [pc, #88]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800339c:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fd fd22 	bl	8000df0 <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ae:	e009      	b.n	80033c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033b0:	f7fd fd1e 	bl	8000df0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	73fb      	strb	r3, [r7, #15]
          break;
 80033c2:	e005      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033c4:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ef      	beq.n	80033b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4904      	ldr	r1, [pc, #16]	@ (80033f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000

080033f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003402:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d018      	beq.n	8003440 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800340e:	4b67      	ldr	r3, [pc, #412]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d10d      	bne.n	800343a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
       ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003426:	4b61      	ldr	r3, [pc, #388]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
       ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d047      	beq.n	80034ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e044      	b.n	80034ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d018      	beq.n	800347a <RCCEx_PLLSAI2_Config+0x86>
 8003448:	2b03      	cmp	r3, #3
 800344a:	d825      	bhi.n	8003498 <RCCEx_PLLSAI2_Config+0xa4>
 800344c:	2b01      	cmp	r3, #1
 800344e:	d002      	beq.n	8003456 <RCCEx_PLLSAI2_Config+0x62>
 8003450:	2b02      	cmp	r3, #2
 8003452:	d009      	beq.n	8003468 <RCCEx_PLLSAI2_Config+0x74>
 8003454:	e020      	b.n	8003498 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003456:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11d      	bne.n	800349e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003466:	e01a      	b.n	800349e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003468:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e013      	b.n	80034a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800347a:	4b4c      	ldr	r3, [pc, #304]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003496:	e006      	b.n	80034a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e004      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ae:	4b3f      	ldr	r3, [pc, #252]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	430b      	orrs	r3, r1
 80034c4:	4939      	ldr	r1, [pc, #228]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d167      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034d0:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a35      	ldr	r2, [pc, #212]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034dc:	f7fd fc88 	bl	8000df0 <HAL_GetTick>
 80034e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e2:	e009      	b.n	80034f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034e4:	f7fd fc84 	bl	8000df0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	73fb      	strb	r3, [r7, #15]
        break;
 80034f6:	e005      	b.n	8003504 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034f8:	4b2c      	ldr	r3, [pc, #176]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ef      	bne.n	80034e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d14a      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d111      	bne.n	8003534 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003510:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	0211      	lsls	r1, r2, #8
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68d2      	ldr	r2, [r2, #12]
 8003526:	0912      	lsrs	r2, r2, #4
 8003528:	0452      	lsls	r2, r2, #17
 800352a:	430a      	orrs	r2, r1
 800352c:	491f      	ldr	r1, [pc, #124]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	614b      	str	r3, [r1, #20]
 8003532:	e011      	b.n	8003558 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003534:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800353c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	0211      	lsls	r1, r2, #8
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6912      	ldr	r2, [r2, #16]
 800354a:	0852      	lsrs	r2, r2, #1
 800354c:	3a01      	subs	r2, #1
 800354e:	0652      	lsls	r2, r2, #25
 8003550:	430a      	orrs	r2, r1
 8003552:	4916      	ldr	r1, [pc, #88]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003558:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a13      	ldr	r2, [pc, #76]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fd fc44 	bl	8000df0 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800356c:	f7fd fc40 	bl	8000df0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
          break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003580:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ef      	beq.n	800356c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4904      	ldr	r1, [pc, #16]	@ (80035ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800359c:	4313      	orrs	r3, r2
 800359e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e040      	b.n	8003644 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd fa9e 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fb6a 	bl	8003cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f8af 	bl	8003760 <UART_SetConfig>
 8003602:	4603      	mov	r3, r0
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e01b      	b.n	8003644 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800361a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800362a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fbe9 	bl	8003e14 <UART_CheckIdleState>
 8003642:	4603      	mov	r3, r0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	@ 0x28
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003660:	2b20      	cmp	r3, #32
 8003662:	d177      	bne.n	8003754 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_UART_Transmit+0x24>
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e070      	b.n	8003756 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2221      	movs	r2, #33	@ 0x21
 8003680:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003682:	f7fd fbb5 	bl	8000df0 <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a0:	d108      	bne.n	80036b4 <HAL_UART_Transmit+0x68>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	e003      	b.n	80036bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036bc:	e02f      	b.n	800371e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	2180      	movs	r1, #128	@ 0x80
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fc4b 	bl	8003f64 <UART_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e03b      	b.n	8003756 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f0:	b292      	uxth	r2, r2
 80036f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	3302      	adds	r3, #2
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	e007      	b.n	800370c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	781a      	ldrb	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3301      	adds	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1c9      	bne.n	80036be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2140      	movs	r1, #64	@ 0x40
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fc15 	bl	8003f64 <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e005      	b.n	8003756 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b08a      	sub	sp, #40	@ 0x28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	431a      	orrs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	4313      	orrs	r3, r2
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4ba4      	ldr	r3, [pc, #656]	@ (8003a20 <UART_SetConfig+0x2c0>)
 8003790:	4013      	ands	r3, r2
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003798:	430b      	orrs	r3, r1
 800379a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a99      	ldr	r2, [pc, #612]	@ (8003a24 <UART_SetConfig+0x2c4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	4313      	orrs	r3, r2
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a90      	ldr	r2, [pc, #576]	@ (8003a28 <UART_SetConfig+0x2c8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d126      	bne.n	8003838 <UART_SetConfig+0xd8>
 80037ea:	4b90      	ldr	r3, [pc, #576]	@ (8003a2c <UART_SetConfig+0x2cc>)
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d81b      	bhi.n	8003830 <UART_SetConfig+0xd0>
 80037f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <UART_SetConfig+0xa0>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003811 	.word	0x08003811
 8003804:	08003821 	.word	0x08003821
 8003808:	08003819 	.word	0x08003819
 800380c:	08003829 	.word	0x08003829
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003816:	e116      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003818:	2302      	movs	r3, #2
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381e:	e112      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003820:	2304      	movs	r3, #4
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003826:	e10e      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003828:	2308      	movs	r3, #8
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382e:	e10a      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003830:	2310      	movs	r3, #16
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003836:	e106      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a7c      	ldr	r2, [pc, #496]	@ (8003a30 <UART_SetConfig+0x2d0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d138      	bne.n	80038b4 <UART_SetConfig+0x154>
 8003842:	4b7a      	ldr	r3, [pc, #488]	@ (8003a2c <UART_SetConfig+0x2cc>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d82d      	bhi.n	80038ac <UART_SetConfig+0x14c>
 8003850:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <UART_SetConfig+0xf8>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800388d 	.word	0x0800388d
 800385c:	080038ad 	.word	0x080038ad
 8003860:	080038ad 	.word	0x080038ad
 8003864:	080038ad 	.word	0x080038ad
 8003868:	0800389d 	.word	0x0800389d
 800386c:	080038ad 	.word	0x080038ad
 8003870:	080038ad 	.word	0x080038ad
 8003874:	080038ad 	.word	0x080038ad
 8003878:	08003895 	.word	0x08003895
 800387c:	080038ad 	.word	0x080038ad
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038ad 	.word	0x080038ad
 8003888:	080038a5 	.word	0x080038a5
 800388c:	2300      	movs	r3, #0
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003892:	e0d8      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003894:	2302      	movs	r3, #2
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800389a:	e0d4      	b.n	8003a46 <UART_SetConfig+0x2e6>
 800389c:	2304      	movs	r3, #4
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a2:	e0d0      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80038a4:	2308      	movs	r3, #8
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038aa:	e0cc      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80038ac:	2310      	movs	r3, #16
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b2:	e0c8      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003a34 <UART_SetConfig+0x2d4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d125      	bne.n	800390a <UART_SetConfig+0x1aa>
 80038be:	4b5b      	ldr	r3, [pc, #364]	@ (8003a2c <UART_SetConfig+0x2cc>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038c8:	2b30      	cmp	r3, #48	@ 0x30
 80038ca:	d016      	beq.n	80038fa <UART_SetConfig+0x19a>
 80038cc:	2b30      	cmp	r3, #48	@ 0x30
 80038ce:	d818      	bhi.n	8003902 <UART_SetConfig+0x1a2>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d00a      	beq.n	80038ea <UART_SetConfig+0x18a>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d814      	bhi.n	8003902 <UART_SetConfig+0x1a2>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <UART_SetConfig+0x182>
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d008      	beq.n	80038f2 <UART_SetConfig+0x192>
 80038e0:	e00f      	b.n	8003902 <UART_SetConfig+0x1a2>
 80038e2:	2300      	movs	r3, #0
 80038e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e8:	e0ad      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80038ea:	2302      	movs	r3, #2
 80038ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f0:	e0a9      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80038f2:	2304      	movs	r3, #4
 80038f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f8:	e0a5      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80038fa:	2308      	movs	r3, #8
 80038fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003900:	e0a1      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003902:	2310      	movs	r3, #16
 8003904:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003908:	e09d      	b.n	8003a46 <UART_SetConfig+0x2e6>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a38 <UART_SetConfig+0x2d8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d125      	bne.n	8003960 <UART_SetConfig+0x200>
 8003914:	4b45      	ldr	r3, [pc, #276]	@ (8003a2c <UART_SetConfig+0x2cc>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800391e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003920:	d016      	beq.n	8003950 <UART_SetConfig+0x1f0>
 8003922:	2bc0      	cmp	r3, #192	@ 0xc0
 8003924:	d818      	bhi.n	8003958 <UART_SetConfig+0x1f8>
 8003926:	2b80      	cmp	r3, #128	@ 0x80
 8003928:	d00a      	beq.n	8003940 <UART_SetConfig+0x1e0>
 800392a:	2b80      	cmp	r3, #128	@ 0x80
 800392c:	d814      	bhi.n	8003958 <UART_SetConfig+0x1f8>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <UART_SetConfig+0x1d8>
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d008      	beq.n	8003948 <UART_SetConfig+0x1e8>
 8003936:	e00f      	b.n	8003958 <UART_SetConfig+0x1f8>
 8003938:	2300      	movs	r3, #0
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800393e:	e082      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003940:	2302      	movs	r3, #2
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003946:	e07e      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003948:	2304      	movs	r3, #4
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394e:	e07a      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003950:	2308      	movs	r3, #8
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003956:	e076      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003958:	2310      	movs	r3, #16
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395e:	e072      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <UART_SetConfig+0x2dc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d12a      	bne.n	80039c0 <UART_SetConfig+0x260>
 800396a:	4b30      	ldr	r3, [pc, #192]	@ (8003a2c <UART_SetConfig+0x2cc>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003978:	d01a      	beq.n	80039b0 <UART_SetConfig+0x250>
 800397a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800397e:	d81b      	bhi.n	80039b8 <UART_SetConfig+0x258>
 8003980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003984:	d00c      	beq.n	80039a0 <UART_SetConfig+0x240>
 8003986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800398a:	d815      	bhi.n	80039b8 <UART_SetConfig+0x258>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <UART_SetConfig+0x238>
 8003990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003994:	d008      	beq.n	80039a8 <UART_SetConfig+0x248>
 8003996:	e00f      	b.n	80039b8 <UART_SetConfig+0x258>
 8003998:	2300      	movs	r3, #0
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399e:	e052      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80039a0:	2302      	movs	r3, #2
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039a6:	e04e      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80039a8:	2304      	movs	r3, #4
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ae:	e04a      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80039b0:	2308      	movs	r3, #8
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039b6:	e046      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80039b8:	2310      	movs	r3, #16
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039be:	e042      	b.n	8003a46 <UART_SetConfig+0x2e6>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a17      	ldr	r2, [pc, #92]	@ (8003a24 <UART_SetConfig+0x2c4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d13a      	bne.n	8003a40 <UART_SetConfig+0x2e0>
 80039ca:	4b18      	ldr	r3, [pc, #96]	@ (8003a2c <UART_SetConfig+0x2cc>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039d8:	d01a      	beq.n	8003a10 <UART_SetConfig+0x2b0>
 80039da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039de:	d81b      	bhi.n	8003a18 <UART_SetConfig+0x2b8>
 80039e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e4:	d00c      	beq.n	8003a00 <UART_SetConfig+0x2a0>
 80039e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ea:	d815      	bhi.n	8003a18 <UART_SetConfig+0x2b8>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <UART_SetConfig+0x298>
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f4:	d008      	beq.n	8003a08 <UART_SetConfig+0x2a8>
 80039f6:	e00f      	b.n	8003a18 <UART_SetConfig+0x2b8>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fe:	e022      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003a00:	2302      	movs	r3, #2
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a06:	e01e      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0e:	e01a      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003a10:	2308      	movs	r3, #8
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a16:	e016      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1e:	e012      	b.n	8003a46 <UART_SetConfig+0x2e6>
 8003a20:	efff69f3 	.word	0xefff69f3
 8003a24:	40008000 	.word	0x40008000
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40004400 	.word	0x40004400
 8003a34:	40004800 	.word	0x40004800
 8003a38:	40004c00 	.word	0x40004c00
 8003a3c:	40005000 	.word	0x40005000
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a9f      	ldr	r2, [pc, #636]	@ (8003cc8 <UART_SetConfig+0x568>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d17a      	bne.n	8003b46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d824      	bhi.n	8003aa2 <UART_SetConfig+0x342>
 8003a58:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <UART_SetConfig+0x300>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003aa3 	.word	0x08003aa3
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003aa3 	.word	0x08003aa3
 8003a70:	08003a93 	.word	0x08003a93
 8003a74:	08003aa3 	.word	0x08003aa3
 8003a78:	08003aa3 	.word	0x08003aa3
 8003a7c:	08003aa3 	.word	0x08003aa3
 8003a80:	08003a9b 	.word	0x08003a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a84:	f7ff f84c 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003a88:	61f8      	str	r0, [r7, #28]
        break;
 8003a8a:	e010      	b.n	8003aae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ccc <UART_SetConfig+0x56c>)
 8003a8e:	61fb      	str	r3, [r7, #28]
        break;
 8003a90:	e00d      	b.n	8003aae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a92:	f7fe ffad 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003a96:	61f8      	str	r0, [r7, #28]
        break;
 8003a98:	e009      	b.n	8003aae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9e:	61fb      	str	r3, [r7, #28]
        break;
 8003aa0:	e005      	b.n	8003aae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003aac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80fb 	beq.w	8003cac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d305      	bcc.n	8003ad2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d903      	bls.n	8003ada <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ad8:	e0e8      	b.n	8003cac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	2200      	movs	r2, #0
 8003ade:	461c      	mov	r4, r3
 8003ae0:	4615      	mov	r5, r2
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	022b      	lsls	r3, r5, #8
 8003aec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003af0:	0222      	lsls	r2, r4, #8
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	6849      	ldr	r1, [r1, #4]
 8003af6:	0849      	lsrs	r1, r1, #1
 8003af8:	2000      	movs	r0, #0
 8003afa:	4688      	mov	r8, r1
 8003afc:	4681      	mov	r9, r0
 8003afe:	eb12 0a08 	adds.w	sl, r2, r8
 8003b02:	eb43 0b09 	adc.w	fp, r3, r9
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b14:	4650      	mov	r0, sl
 8003b16:	4659      	mov	r1, fp
 8003b18:	f7fc fbaa 	bl	8000270 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b2a:	d308      	bcc.n	8003b3e <UART_SetConfig+0x3de>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b32:	d204      	bcs.n	8003b3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	60da      	str	r2, [r3, #12]
 8003b3c:	e0b6      	b.n	8003cac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b44:	e0b2      	b.n	8003cac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4e:	d15e      	bne.n	8003c0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d828      	bhi.n	8003baa <UART_SetConfig+0x44a>
 8003b58:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <UART_SetConfig+0x400>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003b8d 	.word	0x08003b8d
 8003b68:	08003b95 	.word	0x08003b95
 8003b6c:	08003bab 	.word	0x08003bab
 8003b70:	08003b9b 	.word	0x08003b9b
 8003b74:	08003bab 	.word	0x08003bab
 8003b78:	08003bab 	.word	0x08003bab
 8003b7c:	08003bab 	.word	0x08003bab
 8003b80:	08003ba3 	.word	0x08003ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b84:	f7fe ffcc 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003b88:	61f8      	str	r0, [r7, #28]
        break;
 8003b8a:	e014      	b.n	8003bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b8c:	f7fe ffde 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003b90:	61f8      	str	r0, [r7, #28]
        break;
 8003b92:	e010      	b.n	8003bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ccc <UART_SetConfig+0x56c>)
 8003b96:	61fb      	str	r3, [r7, #28]
        break;
 8003b98:	e00d      	b.n	8003bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9a:	f7fe ff29 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ba0:	e009      	b.n	8003bb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ba6:	61fb      	str	r3, [r7, #28]
        break;
 8003ba8:	e005      	b.n	8003bb6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d077      	beq.n	8003cac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005a      	lsls	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	441a      	add	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b0f      	cmp	r3, #15
 8003bd6:	d916      	bls.n	8003c06 <UART_SetConfig+0x4a6>
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bde:	d212      	bcs.n	8003c06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f023 030f 	bic.w	r3, r3, #15
 8003be8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	8afb      	ldrh	r3, [r7, #22]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	8afa      	ldrh	r2, [r7, #22]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	e052      	b.n	8003cac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c0c:	e04e      	b.n	8003cac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d827      	bhi.n	8003c66 <UART_SetConfig+0x506>
 8003c16:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <UART_SetConfig+0x4bc>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c49 	.word	0x08003c49
 8003c24:	08003c51 	.word	0x08003c51
 8003c28:	08003c67 	.word	0x08003c67
 8003c2c:	08003c57 	.word	0x08003c57
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c67 	.word	0x08003c67
 8003c3c:	08003c5f 	.word	0x08003c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe ff6e 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003c44:	61f8      	str	r0, [r7, #28]
        break;
 8003c46:	e014      	b.n	8003c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7fe ff80 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003c4c:	61f8      	str	r0, [r7, #28]
        break;
 8003c4e:	e010      	b.n	8003c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <UART_SetConfig+0x56c>)
 8003c52:	61fb      	str	r3, [r7, #28]
        break;
 8003c54:	e00d      	b.n	8003c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c56:	f7fe fecb 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003c5a:	61f8      	str	r0, [r7, #28]
        break;
 8003c5c:	e009      	b.n	8003c72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c62:	61fb      	str	r3, [r7, #28]
        break;
 8003c64:	e005      	b.n	8003c72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c70:	bf00      	nop
    }

    if (pclk != 0U)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d019      	beq.n	8003cac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	085a      	lsrs	r2, r3, #1
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	441a      	add	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b0f      	cmp	r3, #15
 8003c90:	d909      	bls.n	8003ca6 <UART_SetConfig+0x546>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c98:	d205      	bcs.n	8003ca6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60da      	str	r2, [r3, #12]
 8003ca4:	e002      	b.n	8003cac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3728      	adds	r7, #40	@ 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40008000 	.word	0x40008000
 8003ccc:	00f42400 	.word	0x00f42400

08003cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dce:	d10a      	bne.n	8003de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b098      	sub	sp, #96	@ 0x60
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e24:	f7fc ffe4 	bl	8000df0 <HAL_GetTick>
 8003e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d12e      	bne.n	8003e96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e40:	2200      	movs	r2, #0
 8003e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f88c 	bl	8003f64 <UART_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d021      	beq.n	8003e96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e6      	bne.n	8003e52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e062      	b.n	8003f5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d149      	bne.n	8003f38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f856 	bl	8003f64 <UART_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d03c      	beq.n	8003f38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	623b      	str	r3, [r7, #32]
   return(result);
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f10:	61fa      	str	r2, [r7, #28]
 8003f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e011      	b.n	8003f5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3758      	adds	r7, #88	@ 0x58
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	e04f      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d04b      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fc ff37 	bl	8000df0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e04e      	b.n	8004036 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d037      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b80      	cmp	r3, #128	@ 0x80
 8003faa:	d034      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d031      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d110      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f838 	bl	800403e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e029      	b.n	8004036 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff0:	d111      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f81e 	bl	800403e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e00f      	b.n	8004036 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	429a      	cmp	r2, r3
 8004032:	d0a0      	beq.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800403e:	b480      	push	{r7}
 8004040:	b095      	sub	sp, #84	@ 0x54
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004064:	643b      	str	r3, [r7, #64]	@ 0x40
 8004066:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800406a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e6      	bne.n	8004046 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	61fb      	str	r3, [r7, #28]
   return(result);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3308      	adds	r3, #8
 8004096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800409a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800409e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d118      	bne.n	80040e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f023 0310 	bic.w	r3, r3, #16
 80040c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6979      	ldr	r1, [r7, #20]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	613b      	str	r3, [r7, #16]
   return(result);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e6      	bne.n	80040b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040fa:	bf00      	nop
 80040fc:	3754      	adds	r7, #84	@ 0x54
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <sniprintf>:
 8004108:	b40c      	push	{r2, r3}
 800410a:	b530      	push	{r4, r5, lr}
 800410c:	4b18      	ldr	r3, [pc, #96]	@ (8004170 <sniprintf+0x68>)
 800410e:	1e0c      	subs	r4, r1, #0
 8004110:	681d      	ldr	r5, [r3, #0]
 8004112:	b09d      	sub	sp, #116	@ 0x74
 8004114:	da08      	bge.n	8004128 <sniprintf+0x20>
 8004116:	238b      	movs	r3, #139	@ 0x8b
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	b01d      	add	sp, #116	@ 0x74
 8004120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004124:	b002      	add	sp, #8
 8004126:	4770      	bx	lr
 8004128:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800412c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004136:	bf14      	ite	ne
 8004138:	f104 33ff 	addne.w	r3, r4, #4294967295
 800413c:	4623      	moveq	r3, r4
 800413e:	9304      	str	r3, [sp, #16]
 8004140:	9307      	str	r3, [sp, #28]
 8004142:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004146:	9002      	str	r0, [sp, #8]
 8004148:	9006      	str	r0, [sp, #24]
 800414a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800414e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004150:	ab21      	add	r3, sp, #132	@ 0x84
 8004152:	a902      	add	r1, sp, #8
 8004154:	4628      	mov	r0, r5
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	f000 f994 	bl	8004484 <_svfiprintf_r>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	bfbc      	itt	lt
 8004160:	238b      	movlt	r3, #139	@ 0x8b
 8004162:	602b      	strlt	r3, [r5, #0]
 8004164:	2c00      	cmp	r4, #0
 8004166:	d0da      	beq.n	800411e <sniprintf+0x16>
 8004168:	9b02      	ldr	r3, [sp, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e7d6      	b.n	800411e <sniprintf+0x16>
 8004170:	2000000c 	.word	0x2000000c

08004174 <memset>:
 8004174:	4402      	add	r2, r0
 8004176:	4603      	mov	r3, r0
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	f803 1b01 	strb.w	r1, [r3], #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <__errno>:
 8004184:	4b01      	ldr	r3, [pc, #4]	@ (800418c <__errno+0x8>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000000c 	.word	0x2000000c

08004190 <__libc_init_array>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	4d0d      	ldr	r5, [pc, #52]	@ (80041c8 <__libc_init_array+0x38>)
 8004194:	4c0d      	ldr	r4, [pc, #52]	@ (80041cc <__libc_init_array+0x3c>)
 8004196:	1b64      	subs	r4, r4, r5
 8004198:	10a4      	asrs	r4, r4, #2
 800419a:	2600      	movs	r6, #0
 800419c:	42a6      	cmp	r6, r4
 800419e:	d109      	bne.n	80041b4 <__libc_init_array+0x24>
 80041a0:	4d0b      	ldr	r5, [pc, #44]	@ (80041d0 <__libc_init_array+0x40>)
 80041a2:	4c0c      	ldr	r4, [pc, #48]	@ (80041d4 <__libc_init_array+0x44>)
 80041a4:	f000 fc64 	bl	8004a70 <_init>
 80041a8:	1b64      	subs	r4, r4, r5
 80041aa:	10a4      	asrs	r4, r4, #2
 80041ac:	2600      	movs	r6, #0
 80041ae:	42a6      	cmp	r6, r4
 80041b0:	d105      	bne.n	80041be <__libc_init_array+0x2e>
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b8:	4798      	blx	r3
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7ee      	b.n	800419c <__libc_init_array+0xc>
 80041be:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c2:	4798      	blx	r3
 80041c4:	3601      	adds	r6, #1
 80041c6:	e7f2      	b.n	80041ae <__libc_init_array+0x1e>
 80041c8:	08004b24 	.word	0x08004b24
 80041cc:	08004b24 	.word	0x08004b24
 80041d0:	08004b24 	.word	0x08004b24
 80041d4:	08004b28 	.word	0x08004b28

080041d8 <__retarget_lock_acquire_recursive>:
 80041d8:	4770      	bx	lr

080041da <__retarget_lock_release_recursive>:
 80041da:	4770      	bx	lr

080041dc <_free_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4605      	mov	r5, r0
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d041      	beq.n	8004268 <_free_r+0x8c>
 80041e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e8:	1f0c      	subs	r4, r1, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	18e4      	addlt	r4, r4, r3
 80041f0:	f000 f8e0 	bl	80043b4 <__malloc_lock>
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <_free_r+0x90>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	b933      	cbnz	r3, 8004208 <_free_r+0x2c>
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6014      	str	r4, [r2, #0]
 80041fe:	4628      	mov	r0, r5
 8004200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004204:	f000 b8dc 	b.w	80043c0 <__malloc_unlock>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d908      	bls.n	800421e <_free_r+0x42>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf01      	itttt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	1809      	addeq	r1, r1, r0
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	e7ed      	b.n	80041fa <_free_r+0x1e>
 800421e:	461a      	mov	r2, r3
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b10b      	cbz	r3, 8004228 <_free_r+0x4c>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d9fa      	bls.n	800421e <_free_r+0x42>
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	1850      	adds	r0, r2, r1
 800422c:	42a0      	cmp	r0, r4
 800422e:	d10b      	bne.n	8004248 <_free_r+0x6c>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	4401      	add	r1, r0
 8004234:	1850      	adds	r0, r2, r1
 8004236:	4283      	cmp	r3, r0
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	d1e0      	bne.n	80041fe <_free_r+0x22>
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6053      	str	r3, [r2, #4]
 8004242:	4408      	add	r0, r1
 8004244:	6010      	str	r0, [r2, #0]
 8004246:	e7da      	b.n	80041fe <_free_r+0x22>
 8004248:	d902      	bls.n	8004250 <_free_r+0x74>
 800424a:	230c      	movs	r3, #12
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7d6      	b.n	80041fe <_free_r+0x22>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	bf04      	itt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	bf04      	itt	eq
 8004260:	1809      	addeq	r1, r1, r0
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	6054      	str	r4, [r2, #4]
 8004266:	e7ca      	b.n	80041fe <_free_r+0x22>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	bf00      	nop
 800426c:	200002ec 	.word	0x200002ec

08004270 <sbrk_aligned>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0f      	ldr	r6, [pc, #60]	@ (80042b0 <sbrk_aligned+0x40>)
 8004274:	460c      	mov	r4, r1
 8004276:	6831      	ldr	r1, [r6, #0]
 8004278:	4605      	mov	r5, r0
 800427a:	b911      	cbnz	r1, 8004282 <sbrk_aligned+0x12>
 800427c:	f000 fba4 	bl	80049c8 <_sbrk_r>
 8004280:	6030      	str	r0, [r6, #0]
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 fb9f 	bl	80049c8 <_sbrk_r>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	d103      	bne.n	8004296 <sbrk_aligned+0x26>
 800428e:	f04f 34ff 	mov.w	r4, #4294967295
 8004292:	4620      	mov	r0, r4
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	1cc4      	adds	r4, r0, #3
 8004298:	f024 0403 	bic.w	r4, r4, #3
 800429c:	42a0      	cmp	r0, r4
 800429e:	d0f8      	beq.n	8004292 <sbrk_aligned+0x22>
 80042a0:	1a21      	subs	r1, r4, r0
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 fb90 	bl	80049c8 <_sbrk_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d1f2      	bne.n	8004292 <sbrk_aligned+0x22>
 80042ac:	e7ef      	b.n	800428e <sbrk_aligned+0x1e>
 80042ae:	bf00      	nop
 80042b0:	200002e8 	.word	0x200002e8

080042b4 <_malloc_r>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	1ccd      	adds	r5, r1, #3
 80042ba:	f025 0503 	bic.w	r5, r5, #3
 80042be:	3508      	adds	r5, #8
 80042c0:	2d0c      	cmp	r5, #12
 80042c2:	bf38      	it	cc
 80042c4:	250c      	movcc	r5, #12
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	4606      	mov	r6, r0
 80042ca:	db01      	blt.n	80042d0 <_malloc_r+0x1c>
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d904      	bls.n	80042da <_malloc_r+0x26>
 80042d0:	230c      	movs	r3, #12
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	2000      	movs	r0, #0
 80042d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043b0 <_malloc_r+0xfc>
 80042de:	f000 f869 	bl	80043b4 <__malloc_lock>
 80042e2:	f8d8 3000 	ldr.w	r3, [r8]
 80042e6:	461c      	mov	r4, r3
 80042e8:	bb44      	cbnz	r4, 800433c <_malloc_r+0x88>
 80042ea:	4629      	mov	r1, r5
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7ff ffbf 	bl	8004270 <sbrk_aligned>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	4604      	mov	r4, r0
 80042f6:	d158      	bne.n	80043aa <_malloc_r+0xf6>
 80042f8:	f8d8 4000 	ldr.w	r4, [r8]
 80042fc:	4627      	mov	r7, r4
 80042fe:	2f00      	cmp	r7, #0
 8004300:	d143      	bne.n	800438a <_malloc_r+0xd6>
 8004302:	2c00      	cmp	r4, #0
 8004304:	d04b      	beq.n	800439e <_malloc_r+0xea>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4639      	mov	r1, r7
 800430a:	4630      	mov	r0, r6
 800430c:	eb04 0903 	add.w	r9, r4, r3
 8004310:	f000 fb5a 	bl	80049c8 <_sbrk_r>
 8004314:	4581      	cmp	r9, r0
 8004316:	d142      	bne.n	800439e <_malloc_r+0xea>
 8004318:	6821      	ldr	r1, [r4, #0]
 800431a:	1a6d      	subs	r5, r5, r1
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f7ff ffa6 	bl	8004270 <sbrk_aligned>
 8004324:	3001      	adds	r0, #1
 8004326:	d03a      	beq.n	800439e <_malloc_r+0xea>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	442b      	add	r3, r5
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	f8d8 3000 	ldr.w	r3, [r8]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	bb62      	cbnz	r2, 8004390 <_malloc_r+0xdc>
 8004336:	f8c8 7000 	str.w	r7, [r8]
 800433a:	e00f      	b.n	800435c <_malloc_r+0xa8>
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	1b52      	subs	r2, r2, r5
 8004340:	d420      	bmi.n	8004384 <_malloc_r+0xd0>
 8004342:	2a0b      	cmp	r2, #11
 8004344:	d917      	bls.n	8004376 <_malloc_r+0xc2>
 8004346:	1961      	adds	r1, r4, r5
 8004348:	42a3      	cmp	r3, r4
 800434a:	6025      	str	r5, [r4, #0]
 800434c:	bf18      	it	ne
 800434e:	6059      	strne	r1, [r3, #4]
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	bf08      	it	eq
 8004354:	f8c8 1000 	streq.w	r1, [r8]
 8004358:	5162      	str	r2, [r4, r5]
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f82f 	bl	80043c0 <__malloc_unlock>
 8004362:	f104 000b 	add.w	r0, r4, #11
 8004366:	1d23      	adds	r3, r4, #4
 8004368:	f020 0007 	bic.w	r0, r0, #7
 800436c:	1ac2      	subs	r2, r0, r3
 800436e:	bf1c      	itt	ne
 8004370:	1a1b      	subne	r3, r3, r0
 8004372:	50a3      	strne	r3, [r4, r2]
 8004374:	e7af      	b.n	80042d6 <_malloc_r+0x22>
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	42a3      	cmp	r3, r4
 800437a:	bf0c      	ite	eq
 800437c:	f8c8 2000 	streq.w	r2, [r8]
 8004380:	605a      	strne	r2, [r3, #4]
 8004382:	e7eb      	b.n	800435c <_malloc_r+0xa8>
 8004384:	4623      	mov	r3, r4
 8004386:	6864      	ldr	r4, [r4, #4]
 8004388:	e7ae      	b.n	80042e8 <_malloc_r+0x34>
 800438a:	463c      	mov	r4, r7
 800438c:	687f      	ldr	r7, [r7, #4]
 800438e:	e7b6      	b.n	80042fe <_malloc_r+0x4a>
 8004390:	461a      	mov	r2, r3
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	d1fb      	bne.n	8004390 <_malloc_r+0xdc>
 8004398:	2300      	movs	r3, #0
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e7de      	b.n	800435c <_malloc_r+0xa8>
 800439e:	230c      	movs	r3, #12
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	4630      	mov	r0, r6
 80043a4:	f000 f80c 	bl	80043c0 <__malloc_unlock>
 80043a8:	e794      	b.n	80042d4 <_malloc_r+0x20>
 80043aa:	6005      	str	r5, [r0, #0]
 80043ac:	e7d6      	b.n	800435c <_malloc_r+0xa8>
 80043ae:	bf00      	nop
 80043b0:	200002ec 	.word	0x200002ec

080043b4 <__malloc_lock>:
 80043b4:	4801      	ldr	r0, [pc, #4]	@ (80043bc <__malloc_lock+0x8>)
 80043b6:	f7ff bf0f 	b.w	80041d8 <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	200002e4 	.word	0x200002e4

080043c0 <__malloc_unlock>:
 80043c0:	4801      	ldr	r0, [pc, #4]	@ (80043c8 <__malloc_unlock+0x8>)
 80043c2:	f7ff bf0a 	b.w	80041da <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	200002e4 	.word	0x200002e4

080043cc <__ssputs_r>:
 80043cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d0:	688e      	ldr	r6, [r1, #8]
 80043d2:	461f      	mov	r7, r3
 80043d4:	42be      	cmp	r6, r7
 80043d6:	680b      	ldr	r3, [r1, #0]
 80043d8:	4682      	mov	sl, r0
 80043da:	460c      	mov	r4, r1
 80043dc:	4690      	mov	r8, r2
 80043de:	d82d      	bhi.n	800443c <__ssputs_r+0x70>
 80043e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043e8:	d026      	beq.n	8004438 <__ssputs_r+0x6c>
 80043ea:	6965      	ldr	r5, [r4, #20]
 80043ec:	6909      	ldr	r1, [r1, #16]
 80043ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043f2:	eba3 0901 	sub.w	r9, r3, r1
 80043f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043fa:	1c7b      	adds	r3, r7, #1
 80043fc:	444b      	add	r3, r9
 80043fe:	106d      	asrs	r5, r5, #1
 8004400:	429d      	cmp	r5, r3
 8004402:	bf38      	it	cc
 8004404:	461d      	movcc	r5, r3
 8004406:	0553      	lsls	r3, r2, #21
 8004408:	d527      	bpl.n	800445a <__ssputs_r+0x8e>
 800440a:	4629      	mov	r1, r5
 800440c:	f7ff ff52 	bl	80042b4 <_malloc_r>
 8004410:	4606      	mov	r6, r0
 8004412:	b360      	cbz	r0, 800446e <__ssputs_r+0xa2>
 8004414:	6921      	ldr	r1, [r4, #16]
 8004416:	464a      	mov	r2, r9
 8004418:	f000 fae6 	bl	80049e8 <memcpy>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	6126      	str	r6, [r4, #16]
 800442a:	6165      	str	r5, [r4, #20]
 800442c:	444e      	add	r6, r9
 800442e:	eba5 0509 	sub.w	r5, r5, r9
 8004432:	6026      	str	r6, [r4, #0]
 8004434:	60a5      	str	r5, [r4, #8]
 8004436:	463e      	mov	r6, r7
 8004438:	42be      	cmp	r6, r7
 800443a:	d900      	bls.n	800443e <__ssputs_r+0x72>
 800443c:	463e      	mov	r6, r7
 800443e:	6820      	ldr	r0, [r4, #0]
 8004440:	4632      	mov	r2, r6
 8004442:	4641      	mov	r1, r8
 8004444:	f000 faa6 	bl	8004994 <memmove>
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	1b9b      	subs	r3, r3, r6
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	4433      	add	r3, r6
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445a:	462a      	mov	r2, r5
 800445c:	f000 fad2 	bl	8004a04 <_realloc_r>
 8004460:	4606      	mov	r6, r0
 8004462:	2800      	cmp	r0, #0
 8004464:	d1e0      	bne.n	8004428 <__ssputs_r+0x5c>
 8004466:	6921      	ldr	r1, [r4, #16]
 8004468:	4650      	mov	r0, sl
 800446a:	f7ff feb7 	bl	80041dc <_free_r>
 800446e:	230c      	movs	r3, #12
 8004470:	f8ca 3000 	str.w	r3, [sl]
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e7e9      	b.n	8004456 <__ssputs_r+0x8a>
	...

08004484 <_svfiprintf_r>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	4698      	mov	r8, r3
 800448a:	898b      	ldrh	r3, [r1, #12]
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	b09d      	sub	sp, #116	@ 0x74
 8004490:	4607      	mov	r7, r0
 8004492:	460d      	mov	r5, r1
 8004494:	4614      	mov	r4, r2
 8004496:	d510      	bpl.n	80044ba <_svfiprintf_r+0x36>
 8004498:	690b      	ldr	r3, [r1, #16]
 800449a:	b973      	cbnz	r3, 80044ba <_svfiprintf_r+0x36>
 800449c:	2140      	movs	r1, #64	@ 0x40
 800449e:	f7ff ff09 	bl	80042b4 <_malloc_r>
 80044a2:	6028      	str	r0, [r5, #0]
 80044a4:	6128      	str	r0, [r5, #16]
 80044a6:	b930      	cbnz	r0, 80044b6 <_svfiprintf_r+0x32>
 80044a8:	230c      	movs	r3, #12
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	b01d      	add	sp, #116	@ 0x74
 80044b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b6:	2340      	movs	r3, #64	@ 0x40
 80044b8:	616b      	str	r3, [r5, #20]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044be:	2320      	movs	r3, #32
 80044c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80044c8:	2330      	movs	r3, #48	@ 0x30
 80044ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004668 <_svfiprintf_r+0x1e4>
 80044ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044d2:	f04f 0901 	mov.w	r9, #1
 80044d6:	4623      	mov	r3, r4
 80044d8:	469a      	mov	sl, r3
 80044da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044de:	b10a      	cbz	r2, 80044e4 <_svfiprintf_r+0x60>
 80044e0:	2a25      	cmp	r2, #37	@ 0x25
 80044e2:	d1f9      	bne.n	80044d8 <_svfiprintf_r+0x54>
 80044e4:	ebba 0b04 	subs.w	fp, sl, r4
 80044e8:	d00b      	beq.n	8004502 <_svfiprintf_r+0x7e>
 80044ea:	465b      	mov	r3, fp
 80044ec:	4622      	mov	r2, r4
 80044ee:	4629      	mov	r1, r5
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7ff ff6b 	bl	80043cc <__ssputs_r>
 80044f6:	3001      	adds	r0, #1
 80044f8:	f000 80a7 	beq.w	800464a <_svfiprintf_r+0x1c6>
 80044fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044fe:	445a      	add	r2, fp
 8004500:	9209      	str	r2, [sp, #36]	@ 0x24
 8004502:	f89a 3000 	ldrb.w	r3, [sl]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 809f 	beq.w	800464a <_svfiprintf_r+0x1c6>
 800450c:	2300      	movs	r3, #0
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004516:	f10a 0a01 	add.w	sl, sl, #1
 800451a:	9304      	str	r3, [sp, #16]
 800451c:	9307      	str	r3, [sp, #28]
 800451e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004522:	931a      	str	r3, [sp, #104]	@ 0x68
 8004524:	4654      	mov	r4, sl
 8004526:	2205      	movs	r2, #5
 8004528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452c:	484e      	ldr	r0, [pc, #312]	@ (8004668 <_svfiprintf_r+0x1e4>)
 800452e:	f7fb fe4f 	bl	80001d0 <memchr>
 8004532:	9a04      	ldr	r2, [sp, #16]
 8004534:	b9d8      	cbnz	r0, 800456e <_svfiprintf_r+0xea>
 8004536:	06d0      	lsls	r0, r2, #27
 8004538:	bf44      	itt	mi
 800453a:	2320      	movmi	r3, #32
 800453c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004540:	0711      	lsls	r1, r2, #28
 8004542:	bf44      	itt	mi
 8004544:	232b      	movmi	r3, #43	@ 0x2b
 8004546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800454a:	f89a 3000 	ldrb.w	r3, [sl]
 800454e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004550:	d015      	beq.n	800457e <_svfiprintf_r+0xfa>
 8004552:	9a07      	ldr	r2, [sp, #28]
 8004554:	4654      	mov	r4, sl
 8004556:	2000      	movs	r0, #0
 8004558:	f04f 0c0a 	mov.w	ip, #10
 800455c:	4621      	mov	r1, r4
 800455e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004562:	3b30      	subs	r3, #48	@ 0x30
 8004564:	2b09      	cmp	r3, #9
 8004566:	d94b      	bls.n	8004600 <_svfiprintf_r+0x17c>
 8004568:	b1b0      	cbz	r0, 8004598 <_svfiprintf_r+0x114>
 800456a:	9207      	str	r2, [sp, #28]
 800456c:	e014      	b.n	8004598 <_svfiprintf_r+0x114>
 800456e:	eba0 0308 	sub.w	r3, r0, r8
 8004572:	fa09 f303 	lsl.w	r3, r9, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	9304      	str	r3, [sp, #16]
 800457a:	46a2      	mov	sl, r4
 800457c:	e7d2      	b.n	8004524 <_svfiprintf_r+0xa0>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	1d19      	adds	r1, r3, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	9103      	str	r1, [sp, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	bfbb      	ittet	lt
 800458a:	425b      	neglt	r3, r3
 800458c:	f042 0202 	orrlt.w	r2, r2, #2
 8004590:	9307      	strge	r3, [sp, #28]
 8004592:	9307      	strlt	r3, [sp, #28]
 8004594:	bfb8      	it	lt
 8004596:	9204      	strlt	r2, [sp, #16]
 8004598:	7823      	ldrb	r3, [r4, #0]
 800459a:	2b2e      	cmp	r3, #46	@ 0x2e
 800459c:	d10a      	bne.n	80045b4 <_svfiprintf_r+0x130>
 800459e:	7863      	ldrb	r3, [r4, #1]
 80045a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045a2:	d132      	bne.n	800460a <_svfiprintf_r+0x186>
 80045a4:	9b03      	ldr	r3, [sp, #12]
 80045a6:	1d1a      	adds	r2, r3, #4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	9203      	str	r2, [sp, #12]
 80045ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045b0:	3402      	adds	r4, #2
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004678 <_svfiprintf_r+0x1f4>
 80045b8:	7821      	ldrb	r1, [r4, #0]
 80045ba:	2203      	movs	r2, #3
 80045bc:	4650      	mov	r0, sl
 80045be:	f7fb fe07 	bl	80001d0 <memchr>
 80045c2:	b138      	cbz	r0, 80045d4 <_svfiprintf_r+0x150>
 80045c4:	9b04      	ldr	r3, [sp, #16]
 80045c6:	eba0 000a 	sub.w	r0, r0, sl
 80045ca:	2240      	movs	r2, #64	@ 0x40
 80045cc:	4082      	lsls	r2, r0
 80045ce:	4313      	orrs	r3, r2
 80045d0:	3401      	adds	r4, #1
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d8:	4824      	ldr	r0, [pc, #144]	@ (800466c <_svfiprintf_r+0x1e8>)
 80045da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045de:	2206      	movs	r2, #6
 80045e0:	f7fb fdf6 	bl	80001d0 <memchr>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d036      	beq.n	8004656 <_svfiprintf_r+0x1d2>
 80045e8:	4b21      	ldr	r3, [pc, #132]	@ (8004670 <_svfiprintf_r+0x1ec>)
 80045ea:	bb1b      	cbnz	r3, 8004634 <_svfiprintf_r+0x1b0>
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	3307      	adds	r3, #7
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	3308      	adds	r3, #8
 80045f6:	9303      	str	r3, [sp, #12]
 80045f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045fa:	4433      	add	r3, r6
 80045fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80045fe:	e76a      	b.n	80044d6 <_svfiprintf_r+0x52>
 8004600:	fb0c 3202 	mla	r2, ip, r2, r3
 8004604:	460c      	mov	r4, r1
 8004606:	2001      	movs	r0, #1
 8004608:	e7a8      	b.n	800455c <_svfiprintf_r+0xd8>
 800460a:	2300      	movs	r3, #0
 800460c:	3401      	adds	r4, #1
 800460e:	9305      	str	r3, [sp, #20]
 8004610:	4619      	mov	r1, r3
 8004612:	f04f 0c0a 	mov.w	ip, #10
 8004616:	4620      	mov	r0, r4
 8004618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800461c:	3a30      	subs	r2, #48	@ 0x30
 800461e:	2a09      	cmp	r2, #9
 8004620:	d903      	bls.n	800462a <_svfiprintf_r+0x1a6>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0c6      	beq.n	80045b4 <_svfiprintf_r+0x130>
 8004626:	9105      	str	r1, [sp, #20]
 8004628:	e7c4      	b.n	80045b4 <_svfiprintf_r+0x130>
 800462a:	fb0c 2101 	mla	r1, ip, r1, r2
 800462e:	4604      	mov	r4, r0
 8004630:	2301      	movs	r3, #1
 8004632:	e7f0      	b.n	8004616 <_svfiprintf_r+0x192>
 8004634:	ab03      	add	r3, sp, #12
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	462a      	mov	r2, r5
 800463a:	4b0e      	ldr	r3, [pc, #56]	@ (8004674 <_svfiprintf_r+0x1f0>)
 800463c:	a904      	add	r1, sp, #16
 800463e:	4638      	mov	r0, r7
 8004640:	f3af 8000 	nop.w
 8004644:	1c42      	adds	r2, r0, #1
 8004646:	4606      	mov	r6, r0
 8004648:	d1d6      	bne.n	80045f8 <_svfiprintf_r+0x174>
 800464a:	89ab      	ldrh	r3, [r5, #12]
 800464c:	065b      	lsls	r3, r3, #25
 800464e:	f53f af2d 	bmi.w	80044ac <_svfiprintf_r+0x28>
 8004652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004654:	e72c      	b.n	80044b0 <_svfiprintf_r+0x2c>
 8004656:	ab03      	add	r3, sp, #12
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	462a      	mov	r2, r5
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <_svfiprintf_r+0x1f0>)
 800465e:	a904      	add	r1, sp, #16
 8004660:	4638      	mov	r0, r7
 8004662:	f000 f879 	bl	8004758 <_printf_i>
 8004666:	e7ed      	b.n	8004644 <_svfiprintf_r+0x1c0>
 8004668:	08004ae8 	.word	0x08004ae8
 800466c:	08004af2 	.word	0x08004af2
 8004670:	00000000 	.word	0x00000000
 8004674:	080043cd 	.word	0x080043cd
 8004678:	08004aee 	.word	0x08004aee

0800467c <_printf_common>:
 800467c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	4616      	mov	r6, r2
 8004682:	4698      	mov	r8, r3
 8004684:	688a      	ldr	r2, [r1, #8]
 8004686:	690b      	ldr	r3, [r1, #16]
 8004688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800468c:	4293      	cmp	r3, r2
 800468e:	bfb8      	it	lt
 8004690:	4613      	movlt	r3, r2
 8004692:	6033      	str	r3, [r6, #0]
 8004694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004698:	4607      	mov	r7, r0
 800469a:	460c      	mov	r4, r1
 800469c:	b10a      	cbz	r2, 80046a2 <_printf_common+0x26>
 800469e:	3301      	adds	r3, #1
 80046a0:	6033      	str	r3, [r6, #0]
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	0699      	lsls	r1, r3, #26
 80046a6:	bf42      	ittt	mi
 80046a8:	6833      	ldrmi	r3, [r6, #0]
 80046aa:	3302      	addmi	r3, #2
 80046ac:	6033      	strmi	r3, [r6, #0]
 80046ae:	6825      	ldr	r5, [r4, #0]
 80046b0:	f015 0506 	ands.w	r5, r5, #6
 80046b4:	d106      	bne.n	80046c4 <_printf_common+0x48>
 80046b6:	f104 0a19 	add.w	sl, r4, #25
 80046ba:	68e3      	ldr	r3, [r4, #12]
 80046bc:	6832      	ldr	r2, [r6, #0]
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	42ab      	cmp	r3, r5
 80046c2:	dc26      	bgt.n	8004712 <_printf_common+0x96>
 80046c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	3b00      	subs	r3, #0
 80046cc:	bf18      	it	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	0692      	lsls	r2, r2, #26
 80046d2:	d42b      	bmi.n	800472c <_printf_common+0xb0>
 80046d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046d8:	4641      	mov	r1, r8
 80046da:	4638      	mov	r0, r7
 80046dc:	47c8      	blx	r9
 80046de:	3001      	adds	r0, #1
 80046e0:	d01e      	beq.n	8004720 <_printf_common+0xa4>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	6922      	ldr	r2, [r4, #16]
 80046e6:	f003 0306 	and.w	r3, r3, #6
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	bf02      	ittt	eq
 80046ee:	68e5      	ldreq	r5, [r4, #12]
 80046f0:	6833      	ldreq	r3, [r6, #0]
 80046f2:	1aed      	subeq	r5, r5, r3
 80046f4:	68a3      	ldr	r3, [r4, #8]
 80046f6:	bf0c      	ite	eq
 80046f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046fc:	2500      	movne	r5, #0
 80046fe:	4293      	cmp	r3, r2
 8004700:	bfc4      	itt	gt
 8004702:	1a9b      	subgt	r3, r3, r2
 8004704:	18ed      	addgt	r5, r5, r3
 8004706:	2600      	movs	r6, #0
 8004708:	341a      	adds	r4, #26
 800470a:	42b5      	cmp	r5, r6
 800470c:	d11a      	bne.n	8004744 <_printf_common+0xc8>
 800470e:	2000      	movs	r0, #0
 8004710:	e008      	b.n	8004724 <_printf_common+0xa8>
 8004712:	2301      	movs	r3, #1
 8004714:	4652      	mov	r2, sl
 8004716:	4641      	mov	r1, r8
 8004718:	4638      	mov	r0, r7
 800471a:	47c8      	blx	r9
 800471c:	3001      	adds	r0, #1
 800471e:	d103      	bne.n	8004728 <_printf_common+0xac>
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004728:	3501      	adds	r5, #1
 800472a:	e7c6      	b.n	80046ba <_printf_common+0x3e>
 800472c:	18e1      	adds	r1, r4, r3
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	2030      	movs	r0, #48	@ 0x30
 8004732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004736:	4422      	add	r2, r4
 8004738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800473c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004740:	3302      	adds	r3, #2
 8004742:	e7c7      	b.n	80046d4 <_printf_common+0x58>
 8004744:	2301      	movs	r3, #1
 8004746:	4622      	mov	r2, r4
 8004748:	4641      	mov	r1, r8
 800474a:	4638      	mov	r0, r7
 800474c:	47c8      	blx	r9
 800474e:	3001      	adds	r0, #1
 8004750:	d0e6      	beq.n	8004720 <_printf_common+0xa4>
 8004752:	3601      	adds	r6, #1
 8004754:	e7d9      	b.n	800470a <_printf_common+0x8e>
	...

08004758 <_printf_i>:
 8004758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800475c:	7e0f      	ldrb	r7, [r1, #24]
 800475e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004760:	2f78      	cmp	r7, #120	@ 0x78
 8004762:	4691      	mov	r9, r2
 8004764:	4680      	mov	r8, r0
 8004766:	460c      	mov	r4, r1
 8004768:	469a      	mov	sl, r3
 800476a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800476e:	d807      	bhi.n	8004780 <_printf_i+0x28>
 8004770:	2f62      	cmp	r7, #98	@ 0x62
 8004772:	d80a      	bhi.n	800478a <_printf_i+0x32>
 8004774:	2f00      	cmp	r7, #0
 8004776:	f000 80d1 	beq.w	800491c <_printf_i+0x1c4>
 800477a:	2f58      	cmp	r7, #88	@ 0x58
 800477c:	f000 80b8 	beq.w	80048f0 <_printf_i+0x198>
 8004780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004788:	e03a      	b.n	8004800 <_printf_i+0xa8>
 800478a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800478e:	2b15      	cmp	r3, #21
 8004790:	d8f6      	bhi.n	8004780 <_printf_i+0x28>
 8004792:	a101      	add	r1, pc, #4	@ (adr r1, 8004798 <_printf_i+0x40>)
 8004794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004798:	080047f1 	.word	0x080047f1
 800479c:	08004805 	.word	0x08004805
 80047a0:	08004781 	.word	0x08004781
 80047a4:	08004781 	.word	0x08004781
 80047a8:	08004781 	.word	0x08004781
 80047ac:	08004781 	.word	0x08004781
 80047b0:	08004805 	.word	0x08004805
 80047b4:	08004781 	.word	0x08004781
 80047b8:	08004781 	.word	0x08004781
 80047bc:	08004781 	.word	0x08004781
 80047c0:	08004781 	.word	0x08004781
 80047c4:	08004903 	.word	0x08004903
 80047c8:	0800482f 	.word	0x0800482f
 80047cc:	080048bd 	.word	0x080048bd
 80047d0:	08004781 	.word	0x08004781
 80047d4:	08004781 	.word	0x08004781
 80047d8:	08004925 	.word	0x08004925
 80047dc:	08004781 	.word	0x08004781
 80047e0:	0800482f 	.word	0x0800482f
 80047e4:	08004781 	.word	0x08004781
 80047e8:	08004781 	.word	0x08004781
 80047ec:	080048c5 	.word	0x080048c5
 80047f0:	6833      	ldr	r3, [r6, #0]
 80047f2:	1d1a      	adds	r2, r3, #4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6032      	str	r2, [r6, #0]
 80047f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004800:	2301      	movs	r3, #1
 8004802:	e09c      	b.n	800493e <_printf_i+0x1e6>
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	6820      	ldr	r0, [r4, #0]
 8004808:	1d19      	adds	r1, r3, #4
 800480a:	6031      	str	r1, [r6, #0]
 800480c:	0606      	lsls	r6, r0, #24
 800480e:	d501      	bpl.n	8004814 <_printf_i+0xbc>
 8004810:	681d      	ldr	r5, [r3, #0]
 8004812:	e003      	b.n	800481c <_printf_i+0xc4>
 8004814:	0645      	lsls	r5, r0, #25
 8004816:	d5fb      	bpl.n	8004810 <_printf_i+0xb8>
 8004818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800481c:	2d00      	cmp	r5, #0
 800481e:	da03      	bge.n	8004828 <_printf_i+0xd0>
 8004820:	232d      	movs	r3, #45	@ 0x2d
 8004822:	426d      	negs	r5, r5
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004828:	4858      	ldr	r0, [pc, #352]	@ (800498c <_printf_i+0x234>)
 800482a:	230a      	movs	r3, #10
 800482c:	e011      	b.n	8004852 <_printf_i+0xfa>
 800482e:	6821      	ldr	r1, [r4, #0]
 8004830:	6833      	ldr	r3, [r6, #0]
 8004832:	0608      	lsls	r0, r1, #24
 8004834:	f853 5b04 	ldr.w	r5, [r3], #4
 8004838:	d402      	bmi.n	8004840 <_printf_i+0xe8>
 800483a:	0649      	lsls	r1, r1, #25
 800483c:	bf48      	it	mi
 800483e:	b2ad      	uxthmi	r5, r5
 8004840:	2f6f      	cmp	r7, #111	@ 0x6f
 8004842:	4852      	ldr	r0, [pc, #328]	@ (800498c <_printf_i+0x234>)
 8004844:	6033      	str	r3, [r6, #0]
 8004846:	bf14      	ite	ne
 8004848:	230a      	movne	r3, #10
 800484a:	2308      	moveq	r3, #8
 800484c:	2100      	movs	r1, #0
 800484e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004852:	6866      	ldr	r6, [r4, #4]
 8004854:	60a6      	str	r6, [r4, #8]
 8004856:	2e00      	cmp	r6, #0
 8004858:	db05      	blt.n	8004866 <_printf_i+0x10e>
 800485a:	6821      	ldr	r1, [r4, #0]
 800485c:	432e      	orrs	r6, r5
 800485e:	f021 0104 	bic.w	r1, r1, #4
 8004862:	6021      	str	r1, [r4, #0]
 8004864:	d04b      	beq.n	80048fe <_printf_i+0x1a6>
 8004866:	4616      	mov	r6, r2
 8004868:	fbb5 f1f3 	udiv	r1, r5, r3
 800486c:	fb03 5711 	mls	r7, r3, r1, r5
 8004870:	5dc7      	ldrb	r7, [r0, r7]
 8004872:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004876:	462f      	mov	r7, r5
 8004878:	42bb      	cmp	r3, r7
 800487a:	460d      	mov	r5, r1
 800487c:	d9f4      	bls.n	8004868 <_printf_i+0x110>
 800487e:	2b08      	cmp	r3, #8
 8004880:	d10b      	bne.n	800489a <_printf_i+0x142>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	07df      	lsls	r7, r3, #31
 8004886:	d508      	bpl.n	800489a <_printf_i+0x142>
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	6861      	ldr	r1, [r4, #4]
 800488c:	4299      	cmp	r1, r3
 800488e:	bfde      	ittt	le
 8004890:	2330      	movle	r3, #48	@ 0x30
 8004892:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004896:	f106 36ff 	addle.w	r6, r6, #4294967295
 800489a:	1b92      	subs	r2, r2, r6
 800489c:	6122      	str	r2, [r4, #16]
 800489e:	f8cd a000 	str.w	sl, [sp]
 80048a2:	464b      	mov	r3, r9
 80048a4:	aa03      	add	r2, sp, #12
 80048a6:	4621      	mov	r1, r4
 80048a8:	4640      	mov	r0, r8
 80048aa:	f7ff fee7 	bl	800467c <_printf_common>
 80048ae:	3001      	adds	r0, #1
 80048b0:	d14a      	bne.n	8004948 <_printf_i+0x1f0>
 80048b2:	f04f 30ff 	mov.w	r0, #4294967295
 80048b6:	b004      	add	sp, #16
 80048b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	f043 0320 	orr.w	r3, r3, #32
 80048c2:	6023      	str	r3, [r4, #0]
 80048c4:	4832      	ldr	r0, [pc, #200]	@ (8004990 <_printf_i+0x238>)
 80048c6:	2778      	movs	r7, #120	@ 0x78
 80048c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	6831      	ldr	r1, [r6, #0]
 80048d0:	061f      	lsls	r7, r3, #24
 80048d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80048d6:	d402      	bmi.n	80048de <_printf_i+0x186>
 80048d8:	065f      	lsls	r7, r3, #25
 80048da:	bf48      	it	mi
 80048dc:	b2ad      	uxthmi	r5, r5
 80048de:	6031      	str	r1, [r6, #0]
 80048e0:	07d9      	lsls	r1, r3, #31
 80048e2:	bf44      	itt	mi
 80048e4:	f043 0320 	orrmi.w	r3, r3, #32
 80048e8:	6023      	strmi	r3, [r4, #0]
 80048ea:	b11d      	cbz	r5, 80048f4 <_printf_i+0x19c>
 80048ec:	2310      	movs	r3, #16
 80048ee:	e7ad      	b.n	800484c <_printf_i+0xf4>
 80048f0:	4826      	ldr	r0, [pc, #152]	@ (800498c <_printf_i+0x234>)
 80048f2:	e7e9      	b.n	80048c8 <_printf_i+0x170>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	f023 0320 	bic.w	r3, r3, #32
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	e7f6      	b.n	80048ec <_printf_i+0x194>
 80048fe:	4616      	mov	r6, r2
 8004900:	e7bd      	b.n	800487e <_printf_i+0x126>
 8004902:	6833      	ldr	r3, [r6, #0]
 8004904:	6825      	ldr	r5, [r4, #0]
 8004906:	6961      	ldr	r1, [r4, #20]
 8004908:	1d18      	adds	r0, r3, #4
 800490a:	6030      	str	r0, [r6, #0]
 800490c:	062e      	lsls	r6, r5, #24
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	d501      	bpl.n	8004916 <_printf_i+0x1be>
 8004912:	6019      	str	r1, [r3, #0]
 8004914:	e002      	b.n	800491c <_printf_i+0x1c4>
 8004916:	0668      	lsls	r0, r5, #25
 8004918:	d5fb      	bpl.n	8004912 <_printf_i+0x1ba>
 800491a:	8019      	strh	r1, [r3, #0]
 800491c:	2300      	movs	r3, #0
 800491e:	6123      	str	r3, [r4, #16]
 8004920:	4616      	mov	r6, r2
 8004922:	e7bc      	b.n	800489e <_printf_i+0x146>
 8004924:	6833      	ldr	r3, [r6, #0]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	6032      	str	r2, [r6, #0]
 800492a:	681e      	ldr	r6, [r3, #0]
 800492c:	6862      	ldr	r2, [r4, #4]
 800492e:	2100      	movs	r1, #0
 8004930:	4630      	mov	r0, r6
 8004932:	f7fb fc4d 	bl	80001d0 <memchr>
 8004936:	b108      	cbz	r0, 800493c <_printf_i+0x1e4>
 8004938:	1b80      	subs	r0, r0, r6
 800493a:	6060      	str	r0, [r4, #4]
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	2300      	movs	r3, #0
 8004942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004946:	e7aa      	b.n	800489e <_printf_i+0x146>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	4632      	mov	r2, r6
 800494c:	4649      	mov	r1, r9
 800494e:	4640      	mov	r0, r8
 8004950:	47d0      	blx	sl
 8004952:	3001      	adds	r0, #1
 8004954:	d0ad      	beq.n	80048b2 <_printf_i+0x15a>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	079b      	lsls	r3, r3, #30
 800495a:	d413      	bmi.n	8004984 <_printf_i+0x22c>
 800495c:	68e0      	ldr	r0, [r4, #12]
 800495e:	9b03      	ldr	r3, [sp, #12]
 8004960:	4298      	cmp	r0, r3
 8004962:	bfb8      	it	lt
 8004964:	4618      	movlt	r0, r3
 8004966:	e7a6      	b.n	80048b6 <_printf_i+0x15e>
 8004968:	2301      	movs	r3, #1
 800496a:	4632      	mov	r2, r6
 800496c:	4649      	mov	r1, r9
 800496e:	4640      	mov	r0, r8
 8004970:	47d0      	blx	sl
 8004972:	3001      	adds	r0, #1
 8004974:	d09d      	beq.n	80048b2 <_printf_i+0x15a>
 8004976:	3501      	adds	r5, #1
 8004978:	68e3      	ldr	r3, [r4, #12]
 800497a:	9903      	ldr	r1, [sp, #12]
 800497c:	1a5b      	subs	r3, r3, r1
 800497e:	42ab      	cmp	r3, r5
 8004980:	dcf2      	bgt.n	8004968 <_printf_i+0x210>
 8004982:	e7eb      	b.n	800495c <_printf_i+0x204>
 8004984:	2500      	movs	r5, #0
 8004986:	f104 0619 	add.w	r6, r4, #25
 800498a:	e7f5      	b.n	8004978 <_printf_i+0x220>
 800498c:	08004af9 	.word	0x08004af9
 8004990:	08004b0a 	.word	0x08004b0a

08004994 <memmove>:
 8004994:	4288      	cmp	r0, r1
 8004996:	b510      	push	{r4, lr}
 8004998:	eb01 0402 	add.w	r4, r1, r2
 800499c:	d902      	bls.n	80049a4 <memmove+0x10>
 800499e:	4284      	cmp	r4, r0
 80049a0:	4623      	mov	r3, r4
 80049a2:	d807      	bhi.n	80049b4 <memmove+0x20>
 80049a4:	1e43      	subs	r3, r0, #1
 80049a6:	42a1      	cmp	r1, r4
 80049a8:	d008      	beq.n	80049bc <memmove+0x28>
 80049aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049b2:	e7f8      	b.n	80049a6 <memmove+0x12>
 80049b4:	4402      	add	r2, r0
 80049b6:	4601      	mov	r1, r0
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d100      	bne.n	80049be <memmove+0x2a>
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049c6:	e7f7      	b.n	80049b8 <memmove+0x24>

080049c8 <_sbrk_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d06      	ldr	r5, [pc, #24]	@ (80049e4 <_sbrk_r+0x1c>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	602b      	str	r3, [r5, #0]
 80049d4:	f7fc f92a 	bl	8000c2c <_sbrk>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_sbrk_r+0x1a>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_sbrk_r+0x1a>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	200002e0 	.word	0x200002e0

080049e8 <memcpy>:
 80049e8:	440a      	add	r2, r1
 80049ea:	4291      	cmp	r1, r2
 80049ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f0:	d100      	bne.n	80049f4 <memcpy+0xc>
 80049f2:	4770      	bx	lr
 80049f4:	b510      	push	{r4, lr}
 80049f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fe:	4291      	cmp	r1, r2
 8004a00:	d1f9      	bne.n	80049f6 <memcpy+0xe>
 8004a02:	bd10      	pop	{r4, pc}

08004a04 <_realloc_r>:
 8004a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a08:	4607      	mov	r7, r0
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	460d      	mov	r5, r1
 8004a0e:	b921      	cbnz	r1, 8004a1a <_realloc_r+0x16>
 8004a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4611      	mov	r1, r2
 8004a16:	f7ff bc4d 	b.w	80042b4 <_malloc_r>
 8004a1a:	b92a      	cbnz	r2, 8004a28 <_realloc_r+0x24>
 8004a1c:	f7ff fbde 	bl	80041dc <_free_r>
 8004a20:	4625      	mov	r5, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	f000 f81a 	bl	8004a60 <_malloc_usable_size_r>
 8004a2c:	4284      	cmp	r4, r0
 8004a2e:	4606      	mov	r6, r0
 8004a30:	d802      	bhi.n	8004a38 <_realloc_r+0x34>
 8004a32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a36:	d8f4      	bhi.n	8004a22 <_realloc_r+0x1e>
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f7ff fc3a 	bl	80042b4 <_malloc_r>
 8004a40:	4680      	mov	r8, r0
 8004a42:	b908      	cbnz	r0, 8004a48 <_realloc_r+0x44>
 8004a44:	4645      	mov	r5, r8
 8004a46:	e7ec      	b.n	8004a22 <_realloc_r+0x1e>
 8004a48:	42b4      	cmp	r4, r6
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	bf28      	it	cs
 8004a50:	4632      	movcs	r2, r6
 8004a52:	f7ff ffc9 	bl	80049e8 <memcpy>
 8004a56:	4629      	mov	r1, r5
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f7ff fbbf 	bl	80041dc <_free_r>
 8004a5e:	e7f1      	b.n	8004a44 <_realloc_r+0x40>

08004a60 <_malloc_usable_size_r>:
 8004a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a64:	1f18      	subs	r0, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfbc      	itt	lt
 8004a6a:	580b      	ldrlt	r3, [r1, r0]
 8004a6c:	18c0      	addlt	r0, r0, r3
 8004a6e:	4770      	bx	lr

08004a70 <_init>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	bf00      	nop
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr

08004a7c <_fini>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr
