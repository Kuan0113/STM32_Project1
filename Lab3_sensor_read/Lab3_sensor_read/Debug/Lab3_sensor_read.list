
Lab3_sensor_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007adc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007c6c  08007c6c  00008c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d44  08007d44  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d44  08007d44  00008d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d4c  08007d4c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d50  08007d50  00008d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bec  20000060  08007db4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c4c  08007db4  00009c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb93  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a48  00000000  00000000  00025c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00029670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013fc  00000000  00000000  0002b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004542  00000000  00000000  0002c3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb8b  00000000  00000000  0003093e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100369  00000000  00000000  0004f4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e8  00000000  00000000  0014f878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00156a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c54 	.word	0x08007c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007c54 	.word	0x08007c54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fc52 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f81c 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8dc 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f8aa 	bl	8000704 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b0:	f000 f868 	bl	8000684 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ISL29125_Init();
 80005b4:	f000 f980 	bl	80008b8 <ISL29125_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b8:	f004 f91a 	bl	80047f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadRGB */
  ReadRGBHandle = osThreadNew(StartReadRGB, NULL, &ReadRGB_attributes);
 80005bc:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <main+0x38>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <main+0x3c>)
 80005c2:	f004 f95f 	bl	8004884 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <main+0x40>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f004 f934 	bl	8004838 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x34>
 80005d4:	08007ca4 	.word	0x08007ca4
 80005d8:	080009c9 	.word	0x080009c9
 80005dc:	20000158 	.word	0x20000158

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	@ 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f006 feb2 	bl	8007358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000606:	f001 fcf9 	bl	8001ffc <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 fa20 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062e:	230a      	movs	r3, #10
 8000630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fd30 	bl	80020a8 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064e:	f000 fa01 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f8f8 	bl	8002860 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 f9ed 	bl	8000a54 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	@ 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C1_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C1_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006c0:	f000 fea6 	bl	8001410 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 f9c3 	bl	8000a54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006d2:	f001 fbed 	bl	8001eb0 <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 f9ba 	bl	8000a54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006e4:	f001 fc2f 	bl	8001f46 <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 f9b1 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	40005400 	.word	0x40005400
 8000700:	10d19ce4 	.word	0x10d19ce4

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_USART2_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	@ (8000760 <MX_USART2_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_USART2_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART2_UART_Init+0x58>)
 8000748:	f003 fa62 	bl	8003c10 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f97f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000d0 	.word	0x200000d0
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a2a      	ldr	r2, [pc, #168]	@ (8000828 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a24      	ldr	r2, [pc, #144]	@ (8000828 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000828 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_GPIO_Init+0xc4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e2:	f000 fdfd 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <MX_GPIO_Init+0xc8>)
 80007fe:	f000 fc45 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000802:	2320      	movs	r3, #32
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081c:	f000 fc36 	bl	800108c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	48000800 	.word	0x48000800

08000830 <ISL29125_WriteRegister>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef ISL29125_WriteRegister(uint8_t reg, uint8_t value) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg, value};
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	733b      	strb	r3, [r7, #12]
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, buf, 2, HAL_MAX_DELAY);
 8000848:	f107 020c 	add.w	r2, r7, #12
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2302      	movs	r3, #2
 8000854:	2188      	movs	r1, #136	@ 0x88
 8000856:	4804      	ldr	r0, [pc, #16]	@ (8000868 <ISL29125_WriteRegister+0x38>)
 8000858:	f000 fe76 	bl	8001548 <HAL_I2C_Master_Transmit>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000007c 	.word	0x2000007c

0800086c <ISL29125_ReadRegister>:

HAL_StatusTypeDef ISL29125_ReadRegister(uint8_t reg, uint8_t *value) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef ret;
    ret = HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000878:	1dfa      	adds	r2, r7, #7
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	2188      	movs	r1, #136	@ 0x88
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <ISL29125_ReadRegister+0x48>)
 8000886:	f000 fe5f 	bl	8001548 <HAL_I2C_Master_Transmit>
 800088a:	4603      	mov	r3, r0
 800088c:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) return ret;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <ISL29125_ReadRegister+0x2c>
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	e009      	b.n	80008ac <ISL29125_ReadRegister+0x40>
    return HAL_I2C_Master_Receive(&hi2c1, ISL29125_ADDR, value, 1, HAL_MAX_DELAY);
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2301      	movs	r3, #1
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	2188      	movs	r1, #136	@ 0x88
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <ISL29125_ReadRegister+0x48>)
 80008a6:	f000 ff67 	bl	8001778 <HAL_I2C_Master_Receive>
 80008aa:	4603      	mov	r3, r0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000007c 	.word	0x2000007c

080008b8 <ISL29125_Init>:

HAL_StatusTypeDef ISL29125_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
//    uint8_t device_id;

    //  Configure sensor for RGB mode, 16-bit ADC, 375 lux
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG1, CONFIG1_MODE_RGB_16BIT);
 80008be:	2105      	movs	r1, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ffb5 	bl	8000830 <ISL29125_WriteRegister>
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <ISL29125_Init+0x1c>
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	e000      	b.n	80008d6 <ISL29125_Init+0x1e>

    // Sensor initialized successfully
    return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <ISL29125_ReadRGBPercent>:


HAL_StatusTypeDef ISL29125_ReadRGBPercent(int *r_perc, int *g_perc, int *b_perc) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
    uint8_t lo, hi;
    uint16_t r_raw, g_raw, b_raw;

    // Read Green
    ISL29125_ReadRegister(ISL29125_REG_GREEN_L, &lo);
 80008ec:	f107 0311 	add.w	r3, r7, #17
 80008f0:	4619      	mov	r1, r3
 80008f2:	2009      	movs	r0, #9
 80008f4:	f7ff ffba 	bl	800086c <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_GREEN_H, &hi);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	200a      	movs	r0, #10
 8000900:	f7ff ffb4 	bl	800086c <ISL29125_ReadRegister>
    g_raw = (hi << 8) | lo;
 8000904:	7c3b      	ldrb	r3, [r7, #16]
 8000906:	b21b      	sxth	r3, r3
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7c7b      	ldrb	r3, [r7, #17]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21b      	sxth	r3, r3
 8000914:	82fb      	strh	r3, [r7, #22]

    // Read Red
    ISL29125_ReadRegister(ISL29125_REG_RED_L, &lo);
 8000916:	f107 0311 	add.w	r3, r7, #17
 800091a:	4619      	mov	r1, r3
 800091c:	200b      	movs	r0, #11
 800091e:	f7ff ffa5 	bl	800086c <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_RED_H, &hi);
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4619      	mov	r1, r3
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff ff9f 	bl	800086c <ISL29125_ReadRegister>
    r_raw = (hi << 8) | lo;
 800092e:	7c3b      	ldrb	r3, [r7, #16]
 8000930:	b21b      	sxth	r3, r3
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7c7b      	ldrb	r3, [r7, #17]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	82bb      	strh	r3, [r7, #20]

    // Read Blue
    ISL29125_ReadRegister(ISL29125_REG_BLUE_L, &lo);
 8000940:	f107 0311 	add.w	r3, r7, #17
 8000944:	4619      	mov	r1, r3
 8000946:	200d      	movs	r0, #13
 8000948:	f7ff ff90 	bl	800086c <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_BLUE_H, &hi);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	200e      	movs	r0, #14
 8000954:	f7ff ff8a 	bl	800086c <ISL29125_ReadRegister>
    b_raw = (hi << 8) | lo;
 8000958:	7c3b      	ldrb	r3, [r7, #16]
 800095a:	b21b      	sxth	r3, r3
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b21a      	sxth	r2, r3
 8000960:	7c7b      	ldrb	r3, [r7, #17]
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21b      	sxth	r3, r3
 8000968:	827b      	strh	r3, [r7, #18]

    // Convert to percentage of sensor range (0–65535)
    *r_perc = (r_raw * 100) / 65535;
 800096a:	8abb      	ldrh	r3, [r7, #20]
 800096c:	2264      	movs	r2, #100	@ 0x64
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <ISL29125_ReadRGBPercent+0xe4>)
 8000974:	fb82 1203 	smull	r1, r2, r2, r3
 8000978:	441a      	add	r2, r3
 800097a:	13d2      	asrs	r2, r2, #15
 800097c:	17db      	asrs	r3, r3, #31
 800097e:	1ad2      	subs	r2, r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	601a      	str	r2, [r3, #0]
    *g_perc = (g_raw * 100) / 65535;
 8000984:	8afb      	ldrh	r3, [r7, #22]
 8000986:	2264      	movs	r2, #100	@ 0x64
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <ISL29125_ReadRGBPercent+0xe4>)
 800098e:	fb82 1203 	smull	r1, r2, r2, r3
 8000992:	441a      	add	r2, r3
 8000994:	13d2      	asrs	r2, r2, #15
 8000996:	17db      	asrs	r3, r3, #31
 8000998:	1ad2      	subs	r2, r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	601a      	str	r2, [r3, #0]
    *b_perc = (b_raw * 100) / 65535;
 800099e:	8a7b      	ldrh	r3, [r7, #18]
 80009a0:	2264      	movs	r2, #100	@ 0x64
 80009a2:	fb02 f303 	mul.w	r3, r2, r3
 80009a6:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <ISL29125_ReadRGBPercent+0xe4>)
 80009a8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ac:	441a      	add	r2, r3
 80009ae:	13d2      	asrs	r2, r2, #15
 80009b0:	17db      	asrs	r3, r3, #31
 80009b2:	1ad2      	subs	r2, r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	80008001 	.word	0x80008001

080009c8 <StartReadRGB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadRGB */
void StartReadRGB(void *argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

      if (ISL29125_ReadRGBPercent(&r, &g, &b) == HAL_OK) {
 80009d0:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <StartReadRGB+0x50>)
 80009d2:	4912      	ldr	r1, [pc, #72]	@ (8000a1c <StartReadRGB+0x54>)
 80009d4:	4812      	ldr	r0, [pc, #72]	@ (8000a20 <StartReadRGB+0x58>)
 80009d6:	f7ff ff83 	bl	80008e0 <ISL29125_ReadRGBPercent>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d116      	bne.n	8000a0e <StartReadRGB+0x46>
          int len = snprintf(msg, sizeof(msg), "R=%d%% G=%d%% B=%d%%\r\n", r, g, b);
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <StartReadRGB+0x58>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <StartReadRGB+0x54>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <StartReadRGB+0x50>)
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	9201      	str	r2, [sp, #4]
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	460b      	mov	r3, r1
 80009f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a24 <StartReadRGB+0x5c>)
 80009f4:	2140      	movs	r1, #64	@ 0x40
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <StartReadRGB+0x60>)
 80009f8:	f006 fc78 	bl	80072ec <sniprintf>
 80009fc:	60f8      	str	r0, [r7, #12]
          HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	4908      	ldr	r1, [pc, #32]	@ (8000a28 <StartReadRGB+0x60>)
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <StartReadRGB+0x64>)
 8000a0a:	f003 f94f 	bl	8003cac <HAL_UART_Transmit>
      }
      osDelay(500);
 8000a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a12:	f003 ffc9 	bl	80049a8 <osDelay>
      if (ISL29125_ReadRGBPercent(&r, &g, &b) == HAL_OK) {
 8000a16:	e7db      	b.n	80009d0 <StartReadRGB+0x8>
 8000a18:	200001a4 	.word	0x200001a4
 8000a1c:	200001a0 	.word	0x200001a0
 8000a20:	2000019c 	.word	0x2000019c
 8000a24:	08007c74 	.word	0x08007c74
 8000a28:	2000015c 	.word	0x2000015c
 8000a2c:	200000d0 	.word	0x200000d0

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a42:	f000 fa21 	bl	8000e88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40001000 	.word	0x40001000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	f06f 0001 	mvn.w	r0, #1
 8000a9e:	f000 facb 	bl	8001038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2288      	movs	r2, #136	@ 0x88
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f006 fc41 	bl	8007358 <memset>
  if(hi2c->Instance==I2C1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a21      	ldr	r2, [pc, #132]	@ (8000b60 <HAL_I2C_MspInit+0xb0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d13b      	bne.n	8000b58 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ae0:	2340      	movs	r3, #64	@ 0x40
 8000ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 f90d 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000af8:	f7ff ffac 	bl	8000a54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_I2C_MspInit+0xb4>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	4a18      	ldr	r2, [pc, #96]	@ (8000b64 <HAL_I2C_MspInit+0xb4>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b08:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_I2C_MspInit+0xb4>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1c:	2312      	movs	r3, #18
 8000b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480b      	ldr	r0, [pc, #44]	@ (8000b68 <HAL_I2C_MspInit+0xb8>)
 8000b3c:	f000 faa6 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_I2C_MspInit+0xb4>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_I2C_MspInit+0xb4>)
 8000b46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_I2C_MspInit+0xb4>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b58:	bf00      	nop
 8000b5a:	37b0      	adds	r7, #176	@ 0xb0
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000400 	.word	0x48000400

08000b6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2288      	movs	r2, #136	@ 0x88
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f006 fbe3 	bl	8007358 <memset>
  if(huart->Instance==USART2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <HAL_UART_MspInit+0xb0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d13b      	bne.n	8000c14 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 f8af 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb4:	f7ff ff4e 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bbc:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd4:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_UART_MspInit+0xb4>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be8:	230c      	movs	r3, #12
 8000bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c00:	2307      	movs	r3, #7
 8000c02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c10:	f000 fa3c 	bl	800108c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c14:	bf00      	nop
 8000c16:	37b0      	adds	r7, #176	@ 0xb0
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	@ 0x38
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c32:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <HAL_InitTick+0xe0>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c36:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <HAL_InitTick+0xe0>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <HAL_InitTick+0xe0>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c4a:	f107 0210 	add.w	r2, r7, #16
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 ffc7 	bl	8002be8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c64:	f001 ff94 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 8000c68:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c6a:	e004      	b.n	8000c76 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c6c:	f001 ff90 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 8000c70:	4603      	mov	r3, r0
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c78:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <HAL_InitTick+0xe4>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c9b      	lsrs	r3, r3, #18
 8000c80:	3b01      	subs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c84:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c86:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <HAL_InitTick+0xec>)
 8000c88:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c8a:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c90:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c92:	4a1e      	ldr	r2, [pc, #120]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c96:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000caa:	4818      	ldr	r0, [pc, #96]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000cac:	f002 fcea 	bl	8003684 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d11b      	bne.n	8000cf6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cbe:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000cc0:	f002 fd42 	bl	8003748 <HAL_TIM_Base_Start_IT>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d111      	bne.n	8000cf6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd2:	2036      	movs	r0, #54	@ 0x36
 8000cd4:	f000 f9cc 	bl	8001070 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	d808      	bhi.n	8000cf0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	2036      	movs	r0, #54	@ 0x36
 8000ce4:	f000 f9a8 	bl	8001038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_InitTick+0xf0>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e002      	b.n	8000cf6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cf6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3738      	adds	r7, #56	@ 0x38
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	200001a8 	.word	0x200001a8
 8000d10:	40001000 	.word	0x40001000
 8000d14:	20000004 	.word	0x20000004

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM6_DAC_IRQHandler+0x10>)
 8000d56:	f002 fd67 	bl	8003828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001a8 	.word	0x200001a8

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f006 fae8 	bl	8007368 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20018000 	.word	0x20018000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	200001f4 	.word	0x200001f4
 8000dcc:	20001c50 	.word	0x20001c50

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df8:	f7ff ffea 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f006 faa7 	bl	8007374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e26:	f7ff fbb9 	bl	800059c <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e38:	08007d54 	.word	0x08007d54
  ldr r2, =_sbss
 8000e3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e40:	20001c4c 	.word	0x20001c4c

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <HAL_Init+0x3c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <HAL_Init+0x3c>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 f8df 	bl	8001022 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e64:	200f      	movs	r0, #15
 8000e66:	f7ff fedd 	bl	8000c24 <HAL_InitTick>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	e001      	b.n	8000e7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e76:	f7ff fdf3 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	200001f8 	.word	0x200001f8

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200001f8 	.word	0x200001f8

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff4c 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800104a:	f7ff ff61 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800104e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f7ff ffb1 	bl	8000fbc <NVIC_EncodePriority>
 800105a:	4602      	mov	r2, r0
 800105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff80 	bl	8000f68 <__NVIC_SetPriority>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff54 	bl	8000f2c <__NVIC_EnableIRQ>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e17f      	b.n	800139c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8171 	beq.w	8001396 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 0201 	and.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b03      	cmp	r3, #3
 8001138:	d118      	bne.n	800116c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	08db      	lsrs	r3, r3, #3
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80ac 	beq.w	8001396 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b5f      	ldr	r3, [pc, #380]	@ (80013bc <HAL_GPIO_Init+0x330>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001242:	4a5e      	ldr	r2, [pc, #376]	@ (80013bc <HAL_GPIO_Init+0x330>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	@ 0x60
 800124a:	4b5c      	ldr	r3, [pc, #368]	@ (80013bc <HAL_GPIO_Init+0x330>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001256:	4a5a      	ldr	r2, [pc, #360]	@ (80013c0 <HAL_GPIO_Init+0x334>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x242>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	@ (80013c4 <HAL_GPIO_Init+0x338>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4e      	ldr	r2, [pc, #312]	@ (80013c8 <HAL_GPIO_Init+0x33c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4d      	ldr	r2, [pc, #308]	@ (80013cc <HAL_GPIO_Init+0x340>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4c      	ldr	r2, [pc, #304]	@ (80013d0 <HAL_GPIO_Init+0x344>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	@ (80013d4 <HAL_GPIO_Init+0x348>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4a      	ldr	r2, [pc, #296]	@ (80013d8 <HAL_GPIO_Init+0x34c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x22a>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00c      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e00a      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ce:	2300      	movs	r3, #0
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e0:	4937      	ldr	r1, [pc, #220]	@ (80013c0 <HAL_GPIO_Init+0x334>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	@ (80013dc <HAL_GPIO_Init+0x350>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001312:	4a32      	ldr	r2, [pc, #200]	@ (80013dc <HAL_GPIO_Init+0x350>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001318:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <HAL_GPIO_Init+0x350>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800133c:	4a27      	ldr	r2, [pc, #156]	@ (80013dc <HAL_GPIO_Init+0x350>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <HAL_GPIO_Init+0x350>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001366:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <HAL_GPIO_Init+0x350>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <HAL_GPIO_Init+0x350>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <HAL_GPIO_Init+0x350>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa22 f303 	lsr.w	r3, r2, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f47f ae78 	bne.w	800109c <HAL_GPIO_Init+0x10>
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	48001000 	.word	0x48001000
 80013d4:	48001400 	.word	0x48001400
 80013d8:	48001800 	.word	0x48001800
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e08d      	b.n	800153e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fb3a 	bl	8000ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2224      	movs	r2, #36	@ 0x24
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001460:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001470:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d107      	bne.n	800148a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	e006      	b.n	8001498 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001496:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d108      	bne.n	80014b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	e007      	b.n	80014c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69d9      	ldr	r1, [r3, #28]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1a      	ldr	r2, [r3, #32]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	461a      	mov	r2, r3
 8001554:	460b      	mov	r3, r1
 8001556:	817b      	strh	r3, [r7, #10]
 8001558:	4613      	mov	r3, r2
 800155a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b20      	cmp	r3, #32
 8001566:	f040 80fd 	bne.w	8001764 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_I2C_Master_Transmit+0x30>
 8001574:	2302      	movs	r3, #2
 8001576:	e0f6      	b.n	8001766 <HAL_I2C_Master_Transmit+0x21e>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001580:	f7ff fc96 	bl	8000eb0 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2319      	movs	r3, #25
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fa0a 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0e1      	b.n	8001766 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2221      	movs	r2, #33	@ 0x21
 80015a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2210      	movs	r2, #16
 80015ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	893a      	ldrh	r2, [r7, #8]
 80015c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2bff      	cmp	r3, #255	@ 0xff
 80015d2:	d906      	bls.n	80015e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	22ff      	movs	r2, #255	@ 0xff
 80015d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80015da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e007      	b.n	80015f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d024      	beq.n	8001644 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001614:	b29b      	uxth	r3, r3
 8001616:	3b01      	subs	r3, #1
 8001618:	b29a      	uxth	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001622:	3b01      	subs	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	b2da      	uxtb	r2, r3
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	4b4e      	ldr	r3, [pc, #312]	@ (8001770 <HAL_I2C_Master_Transmit+0x228>)
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fc05 	bl	8001e4c <I2C_TransferConfig>
 8001642:	e066      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001648:	b2da      	uxtb	r2, r3
 800164a:	8979      	ldrh	r1, [r7, #10]
 800164c:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <HAL_I2C_Master_Transmit+0x228>)
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fbfa 	bl	8001e4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001658:	e05b      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f9fd 	bl	8001a5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07b      	b.n	8001766 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d034      	beq.n	8001712 <HAL_I2C_Master_Transmit+0x1ca>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d130      	bne.n	8001712 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	2200      	movs	r2, #0
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f976 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e04d      	b.n	8001766 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d90e      	bls.n	80016f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	22ff      	movs	r2, #255	@ 0xff
 80016d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	8979      	ldrh	r1, [r7, #10]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 fbae 	bl	8001e4c <I2C_TransferConfig>
 80016f0:	e00f      	b.n	8001712 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001700:	b2da      	uxtb	r2, r3
 8001702:	8979      	ldrh	r1, [r7, #10]
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fb9d 	bl	8001e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d19e      	bne.n	800165a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f9e3 	bl	8001aec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e01a      	b.n	8001766 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2220      	movs	r2, #32
 8001736:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6859      	ldr	r1, [r3, #4]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <HAL_I2C_Master_Transmit+0x22c>)
 8001744:	400b      	ands	r3, r1
 8001746:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2220      	movs	r2, #32
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001764:	2302      	movs	r3, #2
  }
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	80002000 	.word	0x80002000
 8001774:	fe00e800 	.word	0xfe00e800

08001778 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	460b      	mov	r3, r1
 8001786:	817b      	strh	r3, [r7, #10]
 8001788:	4613      	mov	r3, r2
 800178a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b20      	cmp	r3, #32
 8001796:	f040 80db 	bne.w	8001950 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_I2C_Master_Receive+0x30>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e0d4      	b.n	8001952 <HAL_I2C_Master_Receive+0x1da>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b0:	f7ff fb7e 	bl	8000eb0 <HAL_GetTick>
 80017b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2319      	movs	r3, #25
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f8f2 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0bf      	b.n	8001952 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2222      	movs	r2, #34	@ 0x22
 80017d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2210      	movs	r2, #16
 80017de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	893a      	ldrh	r2, [r7, #8]
 80017f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	2bff      	cmp	r3, #255	@ 0xff
 8001802:	d90e      	bls.n	8001822 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180e:	b2da      	uxtb	r2, r3
 8001810:	8979      	ldrh	r1, [r7, #10]
 8001812:	4b52      	ldr	r3, [pc, #328]	@ (800195c <HAL_I2C_Master_Receive+0x1e4>)
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fb16 	bl	8001e4c <I2C_TransferConfig>
 8001820:	e06d      	b.n	80018fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001830:	b2da      	uxtb	r2, r3
 8001832:	8979      	ldrh	r1, [r7, #10]
 8001834:	4b49      	ldr	r3, [pc, #292]	@ (800195c <HAL_I2C_Master_Receive+0x1e4>)
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 fb05 	bl	8001e4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001842:	e05c      	b.n	80018fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	6a39      	ldr	r1, [r7, #32]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f993 	bl	8001b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e07c      	b.n	8001952 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001880:	b29b      	uxth	r3, r3
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d034      	beq.n	80018fe <HAL_I2C_Master_Receive+0x186>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d130      	bne.n	80018fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2200      	movs	r2, #0
 80018a4:	2180      	movs	r1, #128	@ 0x80
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f880 	bl	80019ac <I2C_WaitOnFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e04d      	b.n	8001952 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	2bff      	cmp	r3, #255	@ 0xff
 80018be:	d90e      	bls.n	80018de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	22ff      	movs	r2, #255	@ 0xff
 80018c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	8979      	ldrh	r1, [r7, #10]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fab8 	bl	8001e4c <I2C_TransferConfig>
 80018dc:	e00f      	b.n	80018fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	8979      	ldrh	r1, [r7, #10]
 80018f0:	2300      	movs	r3, #0
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 faa7 	bl	8001e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001902:	b29b      	uxth	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d19d      	bne.n	8001844 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	6a39      	ldr	r1, [r7, #32]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f8ed 	bl	8001aec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e01a      	b.n	8001952 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2220      	movs	r2, #32
 8001922:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6859      	ldr	r1, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_I2C_Master_Receive+0x1e8>)
 8001930:	400b      	ands	r3, r1
 8001932:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	e000      	b.n	8001952 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001950:	2302      	movs	r3, #2
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	80002400 	.word	0x80002400
 8001960:	fe00e800 	.word	0xfe00e800

08001964 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d103      	bne.n	8001982 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d007      	beq.n	80019a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	619a      	str	r2, [r3, #24]
  }
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019bc:	e03b      	b.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f962 	bl	8001c8c <I2C_IsErrorOccurred>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e041      	b.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d02d      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7ff fa69 	bl	8000eb0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d122      	bne.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	4013      	ands	r3, r2
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d113      	bne.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f043 0220 	orr.w	r2, r3, #32
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d0b4      	beq.n	80019be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a6a:	e033      	b.n	8001ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f90b 	bl	8001c8c <I2C_IsErrorOccurred>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e031      	b.n	8001ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a86:	d025      	beq.n	8001ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a88:	f7ff fa12 	bl	8000eb0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d302      	bcc.n	8001a9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d11a      	bne.n	8001ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d013      	beq.n	8001ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e007      	b.n	8001ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d1c4      	bne.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af8:	e02f      	b.n	8001b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f8c4 	bl	8001c8c <I2C_IsErrorOccurred>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e02d      	b.n	8001b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0e:	f7ff f9cf 	bl	8000eb0 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d302      	bcc.n	8001b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11a      	bne.n	8001b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d013      	beq.n	8001b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f043 0220 	orr.w	r2, r3, #32
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e007      	b.n	8001b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	d1c8      	bne.n	8001afa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001b84:	e071      	b.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f87e 	bl	8001c8c <I2C_IsErrorOccurred>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d13b      	bne.n	8001c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d138      	bne.n	8001c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d105      	bne.n	8001bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d121      	bne.n	8001c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2210      	movs	r2, #16
 8001bdc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2204      	movs	r2, #4
 8001be2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2220      	movs	r2, #32
 8001bea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	75fb      	strb	r3, [r7, #23]
 8001c18:	e002      	b.n	8001c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001c20:	f7ff f946 	bl	8000eb0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d302      	bcc.n	8001c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d119      	bne.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d116      	bne.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d00f      	beq.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d002      	beq.n	8001c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d083      	beq.n	8001b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	fe00e800 	.word	0xfe00e800

08001c8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	@ 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d068      	beq.n	8001d8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cc0:	e049      	b.n	8001d56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d045      	beq.n	8001d56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cca:	f7ff f8f1 	bl	8000eb0 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <I2C_IsErrorOccurred+0x54>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d13a      	bne.n	8001d56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d02:	d121      	bne.n	8001d48 <I2C_IsErrorOccurred+0xbc>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d0a:	d01d      	beq.n	8001d48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d01a      	beq.n	8001d48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d22:	f7ff f8c5 	bl	8000eb0 <HAL_GetTick>
 8001d26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d28:	e00e      	b.n	8001d48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d2a:	f7ff f8c1 	bl	8000eb0 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b19      	cmp	r3, #25
 8001d36:	d907      	bls.n	8001d48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f043 0320 	orr.w	r3, r3, #32
 8001d3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d46:	e006      	b.n	8001d56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d1e9      	bne.n	8001d2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d003      	beq.n	8001d6c <I2C_IsErrorOccurred+0xe0>
 8001d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0aa      	beq.n	8001cc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00b      	beq.n	8001df8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01c      	beq.n	8001e3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7ff fdaf 	bl	8001964 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <I2C_IsErrorOccurred+0x1bc>)
 8001e12:	400b      	ands	r3, r1
 8001e14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3728      	adds	r7, #40	@ 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	fe00e800 	.word	0xfe00e800

08001e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	817b      	strh	r3, [r7, #10]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e64:	7a7b      	ldrb	r3, [r7, #9]
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	0d5b      	lsrs	r3, r3, #21
 8001e86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <I2C_TransferConfig+0x60>)
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	ea02 0103 	and.w	r1, r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	03ff63ff 	.word	0x03ff63ff

08001eb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d138      	bne.n	8001f38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e032      	b.n	8001f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	@ 0x24
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d139      	bne.n	8001fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e033      	b.n	8001fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2224      	movs	r2, #36	@ 0x24
 8001f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800200a:	d130      	bne.n	800206e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800200c:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002018:	d038      	beq.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002022:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800202a:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2232      	movs	r2, #50	@ 0x32
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	3301      	adds	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002040:	e002      	b.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b01      	subs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002048:	4b14      	ldr	r3, [pc, #80]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002054:	d102      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f2      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002068:	d110      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e00f      	b.n	800208e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207a:	d007      	beq.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002084:	4a05      	ldr	r2, [pc, #20]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800208a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000
 80020a0:	20000000 	.word	0x20000000
 80020a4:	431bde83 	.word	0x431bde83

080020a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e3ca      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ba:	4b97      	ldr	r3, [pc, #604]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c4:	4b94      	ldr	r3, [pc, #592]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80e4 	beq.w	80022a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <HAL_RCC_OscConfig+0x4a>
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	f040 808b 	bne.w	8002200 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	f040 8087 	bne.w	8002200 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f2:	4b89      	ldr	r3, [pc, #548]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e3a2      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	4b82      	ldr	r3, [pc, #520]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_RCC_OscConfig+0x7c>
 800211a:	4b7f      	ldr	r3, [pc, #508]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002122:	e005      	b.n	8002130 <HAL_RCC_OscConfig+0x88>
 8002124:	4b7c      	ldr	r3, [pc, #496]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002130:	4293      	cmp	r3, r2
 8002132:	d223      	bcs.n	800217c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fd87 	bl	8002c4c <RCC_SetFlashLatencyFromMSIRange>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e383      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002148:	4b73      	ldr	r3, [pc, #460]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a72      	ldr	r2, [pc, #456]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b70      	ldr	r3, [pc, #448]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	496d      	ldr	r1, [pc, #436]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002166:	4b6c      	ldr	r3, [pc, #432]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	4968      	ldr	r1, [pc, #416]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
 800217a:	e025      	b.n	80021c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217c:	4b66      	ldr	r3, [pc, #408]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a65      	ldr	r2, [pc, #404]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b63      	ldr	r3, [pc, #396]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4960      	ldr	r1, [pc, #384]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219a:	4b5f      	ldr	r3, [pc, #380]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	495b      	ldr	r1, [pc, #364]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fd47 	bl	8002c4c <RCC_SetFlashLatencyFromMSIRange>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e343      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c8:	f000 fc4a 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b52      	ldr	r3, [pc, #328]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	4950      	ldr	r1, [pc, #320]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002320 <HAL_RCC_OscConfig+0x278>)
 80021e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002324 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fd19 	bl	8000c24 <HAL_InitTick>
 80021f2:	4603      	mov	r3, r0
 80021f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d052      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	e327      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d032      	beq.n	800226e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002208:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a42      	ldr	r2, [pc, #264]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002214:	f7fe fe4c 	bl	8000eb0 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221c:	f7fe fe48 	bl	8000eb0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e310      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800222e:	4b3a      	ldr	r3, [pc, #232]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223a:	4b37      	ldr	r3, [pc, #220]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a36      	ldr	r2, [pc, #216]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4931      	ldr	r1, [pc, #196]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002258:	4b2f      	ldr	r3, [pc, #188]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	492c      	ldr	r1, [pc, #176]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e01a      	b.n	80022a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800226e:	4b2a      	ldr	r3, [pc, #168]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800227a:	f7fe fe19 	bl	8000eb0 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002282:	f7fe fe15 	bl	8000eb0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e2dd      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x1da>
 80022a0:	e000      	b.n	80022a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d074      	beq.n	800239a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x21a>
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d10e      	bne.n	80022da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d10b      	bne.n	80022da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d064      	beq.n	8002398 <HAL_RCC_OscConfig+0x2f0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d160      	bne.n	8002398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e2ba      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x24a>
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	e026      	b.n	8002340 <HAL_RCC_OscConfig+0x298>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022fa:	d115      	bne.n	8002328 <HAL_RCC_OscConfig+0x280>
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002302:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a02      	ldr	r2, [pc, #8]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x298>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	08007cc8 	.word	0x08007cc8
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004
 8002328:	4ba0      	ldr	r3, [pc, #640]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a9f      	ldr	r2, [pc, #636]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b9d      	ldr	r3, [pc, #628]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a9c      	ldr	r2, [pc, #624]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fdb2 	bl	8000eb0 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fdae 	bl	8000eb0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e276      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	4b92      	ldr	r3, [pc, #584]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x2a8>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fd9e 	bl	8000eb0 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fd9a 	bl	8000eb0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e262      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238a:	4b88      	ldr	r3, [pc, #544]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x2d0>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d060      	beq.n	8002468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_OscConfig+0x310>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d119      	bne.n	80023e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d116      	bne.n	80023e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	4b7c      	ldr	r3, [pc, #496]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x328>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e23f      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b76      	ldr	r3, [pc, #472]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	4973      	ldr	r1, [pc, #460]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e4:	e040      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d023      	beq.n	8002436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ee:	4b6f      	ldr	r3, [pc, #444]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6e      	ldr	r2, [pc, #440]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fd59 	bl	8000eb0 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002402:	f7fe fd55 	bl	8000eb0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e21d      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002414:	4b65      	ldr	r3, [pc, #404]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002420:	4b62      	ldr	r3, [pc, #392]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	495f      	ldr	r1, [pc, #380]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e018      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002436:	4b5d      	ldr	r3, [pc, #372]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5c      	ldr	r2, [pc, #368]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800243c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7fe fd35 	bl	8000eb0 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244a:	f7fe fd31 	bl	8000eb0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1f9      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245c:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03c      	beq.n	80024ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247c:	4b4b      	ldr	r3, [pc, #300]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002482:	4a4a      	ldr	r2, [pc, #296]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7fe fd10 	bl	8000eb0 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7fe fd0c 	bl	8000eb0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1d4      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80024a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ef      	beq.n	8002494 <HAL_RCC_OscConfig+0x3ec>
 80024b4:	e01b      	b.n	80024ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024bc:	4a3b      	ldr	r2, [pc, #236]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fcf3 	bl	8000eb0 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ce:	f7fe fcef 	bl	8000eb0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e1b7      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e0:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ef      	bne.n	80024ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80a6 	beq.w	8002648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002500:	4b2a      	ldr	r3, [pc, #168]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a26      	ldr	r2, [pc, #152]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
 8002518:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002524:	2301      	movs	r3, #1
 8002526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002528:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <HAL_RCC_OscConfig+0x508>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d118      	bne.n	8002566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002534:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <HAL_RCC_OscConfig+0x508>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <HAL_RCC_OscConfig+0x508>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002540:	f7fe fcb6 	bl	8000eb0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002548:	f7fe fcb2 	bl	8000eb0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e17a      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <HAL_RCC_OscConfig+0x508>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d108      	bne.n	8002580 <HAL_RCC_OscConfig+0x4d8>
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800257e:	e029      	b.n	80025d4 <HAL_RCC_OscConfig+0x52c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d115      	bne.n	80025b4 <HAL_RCC_OscConfig+0x50c>
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	4a07      	ldr	r2, [pc, #28]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	4a03      	ldr	r2, [pc, #12]	@ (80025ac <HAL_RCC_OscConfig+0x504>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_OscConfig+0x52c>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a9b      	ldr	r2, [pc, #620]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c4:	4b98      	ldr	r3, [pc, #608]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	4a97      	ldr	r2, [pc, #604]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d016      	beq.n	800260a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fc68 	bl	8000eb0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe fc64 	bl	8000eb0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e12a      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ed      	beq.n	80025e4 <HAL_RCC_OscConfig+0x53c>
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fc51 	bl	8000eb0 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fc4d 	bl	8000eb0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e113      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002628:	4b7f      	ldr	r3, [pc, #508]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ed      	bne.n	8002612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002636:	7ffb      	ldrb	r3, [r7, #31]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b7a      	ldr	r3, [pc, #488]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	4a79      	ldr	r2, [pc, #484]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80fe 	beq.w	800284e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	2b02      	cmp	r3, #2
 8002658:	f040 80d0 	bne.w	80027fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800265c:	4b72      	ldr	r3, [pc, #456]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 0203 	and.w	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	429a      	cmp	r2, r3
 800266e:	d130      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	3b01      	subs	r3, #1
 800267c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d127      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d11f      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800269c:	2a07      	cmp	r2, #7
 800269e:	bf14      	ite	ne
 80026a0:	2201      	movne	r2, #1
 80026a2:	2200      	moveq	r2, #0
 80026a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d113      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d06e      	beq.n	80027b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	d069      	beq.n	80027ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026d8:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026e4:	4b50      	ldr	r3, [pc, #320]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ad      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80026fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002700:	f7fe fbd6 	bl	8000eb0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fbd2 	bl	8000eb0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e09a      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271a:	4b43      	ldr	r3, [pc, #268]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002726:	4b40      	ldr	r3, [pc, #256]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b40      	ldr	r3, [pc, #256]	@ (800282c <HAL_RCC_OscConfig+0x784>)
 800272c:	4013      	ands	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002736:	3a01      	subs	r2, #1
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	4311      	orrs	r1, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002740:	0212      	lsls	r2, r2, #8
 8002742:	4311      	orrs	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002748:	0852      	lsrs	r2, r2, #1
 800274a:	3a01      	subs	r2, #1
 800274c:	0552      	lsls	r2, r2, #21
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002754:	0852      	lsrs	r2, r2, #1
 8002756:	3a01      	subs	r2, #1
 8002758:	0652      	lsls	r2, r2, #25
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002760:	0912      	lsrs	r2, r2, #4
 8002762:	0452      	lsls	r2, r2, #17
 8002764:	430a      	orrs	r2, r1
 8002766:	4930      	ldr	r1, [pc, #192]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800276c:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2d      	ldr	r2, [pc, #180]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002778:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a2a      	ldr	r2, [pc, #168]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002784:	f7fe fb94 	bl	8000eb0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe fb90 	bl	8000eb0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e058      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027aa:	e050      	b.n	800284e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e04f      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d148      	bne.n	800284e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c8:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a16      	ldr	r2, [pc, #88]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027d4:	f7fe fb6c 	bl	8000eb0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe fb68 	bl	8000eb0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e030      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x734>
 80027fa:	e028      	b.n	800284e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d023      	beq.n	800284a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <HAL_RCC_OscConfig+0x780>)
 8002808:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800280c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7fe fb4f 	bl	8000eb0 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002814:	e00c      	b.n	8002830 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe fb4b 	bl	8000eb0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d905      	bls.n	8002830 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e013      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
 8002828:	40021000 	.word	0x40021000
 800282c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_OscConfig+0x7b0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ec      	bne.n	8002816 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_RCC_OscConfig+0x7b0>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	4905      	ldr	r1, [pc, #20]	@ (8002858 <HAL_RCC_OscConfig+0x7b0>)
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_OscConfig+0x7b4>)
 8002844:	4013      	ands	r3, r2
 8002846:	60cb      	str	r3, [r1, #12]
 8002848:	e001      	b.n	800284e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	feeefffc 	.word	0xfeeefffc

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0e7      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b75      	ldr	r3, [pc, #468]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d910      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b72      	ldr	r3, [pc, #456]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 0207 	bic.w	r2, r3, #7
 800288a:	4970      	ldr	r1, [pc, #448]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b6e      	ldr	r3, [pc, #440]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0cf      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d010      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	4b66      	ldr	r3, [pc, #408]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028bc:	429a      	cmp	r2, r3
 80028be:	d908      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b63      	ldr	r3, [pc, #396]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4960      	ldr	r1, [pc, #384]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04c      	beq.n	8002978 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d121      	bne.n	8002936 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0a6      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fe:	4b54      	ldr	r3, [pc, #336]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d115      	bne.n	8002936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e09a      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002916:	4b4e      	ldr	r3, [pc, #312]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e08e      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002926:	4b4a      	ldr	r3, [pc, #296]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e086      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b46      	ldr	r3, [pc, #280]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4943      	ldr	r1, [pc, #268]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002948:	f7fe fab2 	bl	8000eb0 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fe faae 	bl	8000eb0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e06e      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b3a      	ldr	r3, [pc, #232]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002990:	429a      	cmp	r2, r3
 8002992:	d208      	bcs.n	80029a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b2e      	ldr	r3, [pc, #184]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	492b      	ldr	r1, [pc, #172]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a6:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d210      	bcs.n	80029d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b4:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 0207 	bic.w	r2, r3, #7
 80029bc:	4923      	ldr	r1, [pc, #140]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c4:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <HAL_RCC_ClockConfig+0x1ec>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e036      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4918      	ldr	r1, [pc, #96]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4910      	ldr	r1, [pc, #64]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a14:	f000 f824 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	490b      	ldr	r1, [pc, #44]	@ (8002a54 <HAL_RCC_ClockConfig+0x1f4>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a30:	4a09      	ldr	r2, [pc, #36]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 8002a32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_RCC_ClockConfig+0x1fc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f8f3 	bl	8000c24 <HAL_InitTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a42:	7afb      	ldrb	r3, [r7, #11]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08007cc8 	.word	0x08007cc8
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	@ 0x24
 8002a64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	4b3b      	ldr	r3, [pc, #236]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x34>
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d121      	bne.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d11e      	bne.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a94:	4b34      	ldr	r3, [pc, #208]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aa0:	4b31      	ldr	r3, [pc, #196]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	e005      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002abc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d102      	bne.n	8002ade <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	e004      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ae4:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ae6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d134      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aee:	4b1e      	ldr	r3, [pc, #120]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d003      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0xac>
 8002b04:	e005      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b08:	617b      	str	r3, [r7, #20]
      break;
 8002b0a:	e005      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b0e:	617b      	str	r3, [r7, #20]
      break;
 8002b10:	e002      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	617b      	str	r3, [r7, #20]
      break;
 8002b16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	3301      	adds	r3, #1
 8002b24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	fb03 f202 	mul.w	r2, r3, r2
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	0e5b      	lsrs	r3, r3, #25
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b58:	69bb      	ldr	r3, [r7, #24]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	@ 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08007ce0 	.word	0x08007ce0
 8002b70:	00f42400 	.word	0x00f42400
 8002b74:	007a1200 	.word	0x007a1200

08002b78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	@ (8002b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000000 	.word	0x20000000

08002b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b94:	f7ff fff0 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4904      	ldr	r1, [pc, #16]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08007cd8 	.word	0x08007cd8

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bc0:	f7ff ffda 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0adb      	lsrs	r3, r3, #11
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4904      	ldr	r1, [pc, #16]	@ (8002be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	08007cd8 	.word	0x08007cd8

08002be8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0203 	and.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c04:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <HAL_RCC_GetClockConfig+0x5c>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_RCC_GetClockConfig+0x5c>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_GetClockConfig+0x5c>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	08db      	lsrs	r3, r3, #3
 8002c22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c2a:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <HAL_RCC_GetClockConfig+0x60>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0207 	and.w	r2, r3, #7
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40022000 	.word	0x40022000

08002c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c58:	4b2a      	ldr	r3, [pc, #168]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c64:	f7ff f9bc 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002c68:	6178      	str	r0, [r7, #20]
 8002c6a:	e014      	b.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	4a24      	ldr	r2, [pc, #144]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c78:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c84:	f7ff f9ac 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c9c:	d10b      	bne.n	8002cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b80      	cmp	r3, #128	@ 0x80
 8002ca2:	d919      	bls.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ca8:	d902      	bls.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002caa:	2302      	movs	r3, #2
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	e013      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	e010      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b80      	cmp	r3, #128	@ 0x80
 8002cba:	d902      	bls.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	e00a      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b80      	cmp	r3, #128	@ 0x80
 8002cc6:	d102      	bne.n	8002cce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cc8:	2302      	movs	r3, #2
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	e004      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b70      	cmp	r3, #112	@ 0x70
 8002cd2:	d101      	bne.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 0207 	bic.w	r2, r3, #7
 8002ce0:	4909      	ldr	r1, [pc, #36]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ce8:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d001      	beq.n	8002cfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40022000 	.word	0x40022000

08002d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d14:	2300      	movs	r3, #0
 8002d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d041      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d30:	d02a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d36:	d824      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d42:	d81e      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d50:	4b86      	ldr	r3, [pc, #536]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a85      	ldr	r2, [pc, #532]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d5c:	e015      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fabb 	bl	80032e0 <RCCEx_PLLSAI1_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d6e:	e00c      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3320      	adds	r3, #32
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fba6 	bl	80034c8 <RCCEx_PLLSAI2_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d80:	e003      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	74fb      	strb	r3, [r7, #19]
      break;
 8002d86:	e000      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d90:	4b76      	ldr	r3, [pc, #472]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d9e:	4973      	ldr	r1, [pc, #460]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002da6:	e001      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d041      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dc0:	d02a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dc6:	d824      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dd2:	d81e      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dde:	e018      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de0:	4b62      	ldr	r3, [pc, #392]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a61      	ldr	r2, [pc, #388]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dec:	e015      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa73 	bl	80032e0 <RCCEx_PLLSAI1_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3320      	adds	r3, #32
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fb5e 	bl	80034c8 <RCCEx_PLLSAI2_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e10:	e003      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	74fb      	strb	r3, [r7, #19]
      break;
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e20:	4b52      	ldr	r3, [pc, #328]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e2e:	494f      	ldr	r1, [pc, #316]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a0 	beq.w	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e4e:	4b47      	ldr	r3, [pc, #284]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b41      	ldr	r3, [pc, #260]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	4a40      	ldr	r2, [pc, #256]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e70:	4b3e      	ldr	r3, [pc, #248]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e80:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3a      	ldr	r2, [pc, #232]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe f810 	bl	8000eb0 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e92:	e009      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7fe f80c 	bl	8000eb0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d902      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ea8:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d15c      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eba:	4b2c      	ldr	r3, [pc, #176]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01f      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ed8:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eea:	4a20      	ldr	r2, [pc, #128]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f04:	4a19      	ldr	r2, [pc, #100]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fd ffcb 	bl	8000eb0 <HAL_GetTick>
 8002f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1c:	e00b      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fd ffc7 	bl	8000eb0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d902      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	74fb      	strb	r3, [r7, #19]
            break;
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ec      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f5a:	4904      	ldr	r1, [pc, #16]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f62:	e009      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
 8002f68:	e006      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f78:	7c7b      	ldrb	r3, [r7, #17]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b9e      	ldr	r3, [pc, #632]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	4a9d      	ldr	r2, [pc, #628]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f96:	4b98      	ldr	r3, [pc, #608]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f023 0203 	bic.w	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	4994      	ldr	r1, [pc, #592]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f023 020c 	bic.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc6:	498c      	ldr	r1, [pc, #560]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fda:	4b87      	ldr	r3, [pc, #540]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	4983      	ldr	r1, [pc, #524]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	497b      	ldr	r1, [pc, #492]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800301e:	4b76      	ldr	r3, [pc, #472]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800302c:	4972      	ldr	r1, [pc, #456]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003040:	4b6d      	ldr	r3, [pc, #436]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304e:	496a      	ldr	r1, [pc, #424]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003062:	4b65      	ldr	r3, [pc, #404]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003068:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	4961      	ldr	r1, [pc, #388]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003084:	4b5c      	ldr	r3, [pc, #368]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003092:	4959      	ldr	r1, [pc, #356]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a6:	4b54      	ldr	r3, [pc, #336]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b4:	4950      	ldr	r1, [pc, #320]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030c8:	4b4b      	ldr	r3, [pc, #300]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	4948      	ldr	r1, [pc, #288]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ea:	4b43      	ldr	r3, [pc, #268]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f8:	493f      	ldr	r1, [pc, #252]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d028      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800310c:	4b3a      	ldr	r3, [pc, #232]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800311a:	4937      	ldr	r1, [pc, #220]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800312a:	d106      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312c:	4b32      	ldr	r3, [pc, #200]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a31      	ldr	r2, [pc, #196]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003136:	60d3      	str	r3, [r2, #12]
 8003138:	e011      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800313e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003142:	d10c      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f8c8 	bl	80032e0 <RCCEx_PLLSAI1_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d028      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800316a:	4b23      	ldr	r3, [pc, #140]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003170:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	491f      	ldr	r1, [pc, #124]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003188:	d106      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003194:	60d3      	str	r3, [r2, #12]
 8003196:	e011      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031a0:	d10c      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f899 	bl	80032e0 <RCCEx_PLLSAI1_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d02b      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d6:	4908      	ldr	r1, [pc, #32]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031e6:	d109      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e8:	4b03      	ldr	r3, [pc, #12]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a02      	ldr	r2, [pc, #8]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031f2:	60d3      	str	r3, [r2, #12]
 80031f4:	e014      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003204:	d10c      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f867 	bl	80032e0 <RCCEx_PLLSAI1_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02f      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800322c:	4b2b      	ldr	r3, [pc, #172]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003232:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800323a:	4928      	ldr	r1, [pc, #160]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800324a:	d10d      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f844 	bl	80032e0 <RCCEx_PLLSAI1_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d014      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	74bb      	strb	r3, [r7, #18]
 8003266:	e011      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800326c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003270:	d10c      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3320      	adds	r3, #32
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f925 	bl	80034c8 <RCCEx_PLLSAI2_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003298:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032a6:	490d      	ldr	r1, [pc, #52]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ba:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ca:	4904      	ldr	r1, [pc, #16]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000

080032e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ee:	4b75      	ldr	r3, [pc, #468]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d018      	beq.n	800332c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032fa:	4b72      	ldr	r3, [pc, #456]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d10d      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
       ||
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003312:	4b6c      	ldr	r3, [pc, #432]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
       ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d047      	beq.n	80033b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e044      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d018      	beq.n	8003366 <RCCEx_PLLSAI1_Config+0x86>
 8003334:	2b03      	cmp	r3, #3
 8003336:	d825      	bhi.n	8003384 <RCCEx_PLLSAI1_Config+0xa4>
 8003338:	2b01      	cmp	r3, #1
 800333a:	d002      	beq.n	8003342 <RCCEx_PLLSAI1_Config+0x62>
 800333c:	2b02      	cmp	r3, #2
 800333e:	d009      	beq.n	8003354 <RCCEx_PLLSAI1_Config+0x74>
 8003340:	e020      	b.n	8003384 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003342:	4b60      	ldr	r3, [pc, #384]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11d      	bne.n	800338a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003352:	e01a      	b.n	800338a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003354:	4b5b      	ldr	r3, [pc, #364]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d116      	bne.n	800338e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003364:	e013      	b.n	800338e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003366:	4b57      	ldr	r3, [pc, #348]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003372:	4b54      	ldr	r3, [pc, #336]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003382:	e006      	b.n	8003392 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      break;
 8003388:	e004      	b.n	8003394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003392:	bf00      	nop
    }

    if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800339a:	4b4a      	ldr	r3, [pc, #296]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	430b      	orrs	r3, r1
 80033b0:	4944      	ldr	r1, [pc, #272]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d17d      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033bc:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a40      	ldr	r2, [pc, #256]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fd fd72 	bl	8000eb0 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ce:	e009      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d0:	f7fd fd6e 	bl	8000eb0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d902      	bls.n	80033e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	73fb      	strb	r3, [r7, #15]
        break;
 80033e2:	e005      	b.n	80033f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e4:	4b37      	ldr	r3, [pc, #220]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ef      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d160      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d111      	bne.n	8003420 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033fc:	4b31      	ldr	r3, [pc, #196]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	0211      	lsls	r1, r2, #8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68d2      	ldr	r2, [r2, #12]
 8003412:	0912      	lsrs	r2, r2, #4
 8003414:	0452      	lsls	r2, r2, #17
 8003416:	430a      	orrs	r2, r1
 8003418:	492a      	ldr	r1, [pc, #168]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	610b      	str	r3, [r1, #16]
 800341e:	e027      	b.n	8003470 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d112      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003426:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800342e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	0211      	lsls	r1, r2, #8
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6912      	ldr	r2, [r2, #16]
 800343c:	0852      	lsrs	r2, r2, #1
 800343e:	3a01      	subs	r2, #1
 8003440:	0552      	lsls	r2, r2, #21
 8003442:	430a      	orrs	r2, r1
 8003444:	491f      	ldr	r1, [pc, #124]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	610b      	str	r3, [r1, #16]
 800344a:	e011      	b.n	8003470 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800344c:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003454:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	0211      	lsls	r1, r2, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6952      	ldr	r2, [r2, #20]
 8003462:	0852      	lsrs	r2, r2, #1
 8003464:	3a01      	subs	r2, #1
 8003466:	0652      	lsls	r2, r2, #25
 8003468:	430a      	orrs	r2, r1
 800346a:	4916      	ldr	r1, [pc, #88]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003470:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a13      	ldr	r2, [pc, #76]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800347a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fd fd18 	bl	8000eb0 <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003482:	e009      	b.n	8003498 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003484:	f7fd fd14 	bl	8000eb0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d902      	bls.n	8003498 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	73fb      	strb	r3, [r7, #15]
          break;
 8003496:	e005      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003498:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	4904      	ldr	r1, [pc, #16]	@ (80034c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000

080034c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034e2:	4b67      	ldr	r3, [pc, #412]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0203 	and.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d10d      	bne.n	800350e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
       ||
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034fa:	4b61      	ldr	r3, [pc, #388]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
       ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d047      	beq.n	800359e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e044      	b.n	800359e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d018      	beq.n	800354e <RCCEx_PLLSAI2_Config+0x86>
 800351c:	2b03      	cmp	r3, #3
 800351e:	d825      	bhi.n	800356c <RCCEx_PLLSAI2_Config+0xa4>
 8003520:	2b01      	cmp	r3, #1
 8003522:	d002      	beq.n	800352a <RCCEx_PLLSAI2_Config+0x62>
 8003524:	2b02      	cmp	r3, #2
 8003526:	d009      	beq.n	800353c <RCCEx_PLLSAI2_Config+0x74>
 8003528:	e020      	b.n	800356c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800352a:	4b55      	ldr	r3, [pc, #340]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d11d      	bne.n	8003572 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353a:	e01a      	b.n	8003572 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800353c:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d116      	bne.n	8003576 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354c:	e013      	b.n	8003576 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800354e:	4b4c      	ldr	r3, [pc, #304]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800355a:	4b49      	ldr	r3, [pc, #292]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800356a:	e006      	b.n	800357a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      break;
 8003570:	e004      	b.n	800357c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357a:	bf00      	nop
    }

    if(status == HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003582:	4b3f      	ldr	r3, [pc, #252]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	430b      	orrs	r3, r1
 8003598:	4939      	ldr	r1, [pc, #228]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d167      	bne.n	8003674 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035a4:	4b36      	ldr	r3, [pc, #216]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a35      	ldr	r2, [pc, #212]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b0:	f7fd fc7e 	bl	8000eb0 <HAL_GetTick>
 80035b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035b6:	e009      	b.n	80035cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035b8:	f7fd fc7a 	bl	8000eb0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d902      	bls.n	80035cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	73fb      	strb	r3, [r7, #15]
        break;
 80035ca:	e005      	b.n	80035d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ef      	bne.n	80035b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d14a      	bne.n	8003674 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035e4:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80035ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6892      	ldr	r2, [r2, #8]
 80035f4:	0211      	lsls	r1, r2, #8
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68d2      	ldr	r2, [r2, #12]
 80035fa:	0912      	lsrs	r2, r2, #4
 80035fc:	0452      	lsls	r2, r2, #17
 80035fe:	430a      	orrs	r2, r1
 8003600:	491f      	ldr	r1, [pc, #124]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	4313      	orrs	r3, r2
 8003604:	614b      	str	r3, [r1, #20]
 8003606:	e011      	b.n	800362c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003608:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003610:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6892      	ldr	r2, [r2, #8]
 8003618:	0211      	lsls	r1, r2, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6912      	ldr	r2, [r2, #16]
 800361e:	0852      	lsrs	r2, r2, #1
 8003620:	3a01      	subs	r2, #1
 8003622:	0652      	lsls	r2, r2, #25
 8003624:	430a      	orrs	r2, r1
 8003626:	4916      	ldr	r1, [pc, #88]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003628:	4313      	orrs	r3, r2
 800362a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800362c:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd fc3a 	bl	8000eb0 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003640:	f7fd fc36 	bl	8000eb0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
          break;
 8003652:	e005      	b.n	8003660 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	4904      	ldr	r1, [pc, #16]	@ (8003680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e049      	b.n	800372a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f841 	bl	8003732 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f000 f9e0 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d001      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e04f      	b.n	8003800 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a23      	ldr	r2, [pc, #140]	@ (800380c <HAL_TIM_Base_Start_IT+0xc4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01d      	beq.n	80037be <HAL_TIM_Base_Start_IT+0x76>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378a:	d018      	beq.n	80037be <HAL_TIM_Base_Start_IT+0x76>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <HAL_TIM_Base_Start_IT+0xc8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_TIM_Base_Start_IT+0x76>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1e      	ldr	r2, [pc, #120]	@ (8003814 <HAL_TIM_Base_Start_IT+0xcc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00e      	beq.n	80037be <HAL_TIM_Base_Start_IT+0x76>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <HAL_TIM_Base_Start_IT+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d009      	beq.n	80037be <HAL_TIM_Base_Start_IT+0x76>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1b      	ldr	r2, [pc, #108]	@ (800381c <HAL_TIM_Base_Start_IT+0xd4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_TIM_Base_Start_IT+0x76>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a19      	ldr	r2, [pc, #100]	@ (8003820 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d115      	bne.n	80037ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	4b17      	ldr	r3, [pc, #92]	@ (8003824 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d015      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0xb4>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d6:	d011      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	e008      	b.n	80037fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e000      	b.n	80037fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	00010007 	.word	0x00010007

08003828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d020      	beq.n	800388c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0202 	mvn.w	r2, #2
 800385c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8e9 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8db 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8ec 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0204 	mvn.w	r2, #4
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8c3 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8b5 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8c6 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0208 	mvn.w	r2, #8
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f89d 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f88f 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8a0 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d020      	beq.n	8003970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01b      	beq.n	8003970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0210 	mvn.w	r2, #16
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2208      	movs	r2, #8
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f877 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f869 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f87a 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0201 	mvn.w	r2, #1
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd f84e 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00c      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80039ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f913 	bl	8003be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00c      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f90b 	bl	8003bfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f834 	bl	8003a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0220 	mvn.w	r2, #32
 8003a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8d3 	bl	8003bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a46      	ldr	r2, [pc, #280]	@ (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa6:	d00f      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a43      	ldr	r2, [pc, #268]	@ (8003bb8 <TIM_Base_SetConfig+0x130>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a42      	ldr	r2, [pc, #264]	@ (8003bbc <TIM_Base_SetConfig+0x134>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a41      	ldr	r2, [pc, #260]	@ (8003bc0 <TIM_Base_SetConfig+0x138>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a40      	ldr	r2, [pc, #256]	@ (8003bc4 <TIM_Base_SetConfig+0x13c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a35      	ldr	r2, [pc, #212]	@ (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01f      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d01b      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a32      	ldr	r2, [pc, #200]	@ (8003bb8 <TIM_Base_SetConfig+0x130>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d017      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a31      	ldr	r2, [pc, #196]	@ (8003bbc <TIM_Base_SetConfig+0x134>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a30      	ldr	r2, [pc, #192]	@ (8003bc0 <TIM_Base_SetConfig+0x138>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00f      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc4 <TIM_Base_SetConfig+0x13c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <TIM_Base_SetConfig+0x140>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2d      	ldr	r2, [pc, #180]	@ (8003bcc <TIM_Base_SetConfig+0x144>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd0 <TIM_Base_SetConfig+0x148>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a16      	ldr	r2, [pc, #88]	@ (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00f      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <TIM_Base_SetConfig+0x13c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <TIM_Base_SetConfig+0x140>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <TIM_Base_SetConfig+0x144>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a15      	ldr	r2, [pc, #84]	@ (8003bd0 <TIM_Base_SetConfig+0x148>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d103      	bne.n	8003b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f023 0201 	bic.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800

08003bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e040      	b.n	8003ca4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc ff9a 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2224      	movs	r2, #36	@ 0x24
 8003c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fb6a 	bl	8004330 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8af 	bl	8003dc0 <UART_SetConfig>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e01b      	b.n	8003ca4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fbe9 	bl	8004474 <UART_CheckIdleState>
 8003ca2:	4603      	mov	r3, r0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	@ 0x28
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d177      	bne.n	8003db4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_UART_Transmit+0x24>
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e070      	b.n	8003db6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2221      	movs	r2, #33	@ 0x21
 8003ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce2:	f7fd f8e5 	bl	8000eb0 <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d00:	d108      	bne.n	8003d14 <HAL_UART_Transmit+0x68>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e003      	b.n	8003d1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d1c:	e02f      	b.n	8003d7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2180      	movs	r1, #128	@ 0x80
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fc4b 	bl	80045c4 <UART_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e03b      	b.n	8003db6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	881a      	ldrh	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d50:	b292      	uxth	r2, r2
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	3302      	adds	r3, #2
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e007      	b.n	8003d6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1c9      	bne.n	8003d1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2140      	movs	r1, #64	@ 0x40
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fc15 	bl	80045c4 <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e005      	b.n	8003db6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b08a      	sub	sp, #40	@ 0x28
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4ba4      	ldr	r3, [pc, #656]	@ (8004080 <UART_SetConfig+0x2c0>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a99      	ldr	r2, [pc, #612]	@ (8004084 <UART_SetConfig+0x2c4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a90      	ldr	r2, [pc, #576]	@ (8004088 <UART_SetConfig+0x2c8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d126      	bne.n	8003e98 <UART_SetConfig+0xd8>
 8003e4a:	4b90      	ldr	r3, [pc, #576]	@ (800408c <UART_SetConfig+0x2cc>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d81b      	bhi.n	8003e90 <UART_SetConfig+0xd0>
 8003e58:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <UART_SetConfig+0xa0>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e81 	.word	0x08003e81
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e89 	.word	0x08003e89
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e116      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e112      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e10e      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e10a      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e106      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8004090 <UART_SetConfig+0x2d0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d138      	bne.n	8003f14 <UART_SetConfig+0x154>
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800408c <UART_SetConfig+0x2cc>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d82d      	bhi.n	8003f0c <UART_SetConfig+0x14c>
 8003eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <UART_SetConfig+0xf8>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003f0d 	.word	0x08003f0d
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003ef5 	.word	0x08003ef5
 8003edc:	08003f0d 	.word	0x08003f0d
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f05 	.word	0x08003f05
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef2:	e0d8      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efa:	e0d4      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e0d0      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e0cc      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f12:	e0c8      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5e      	ldr	r2, [pc, #376]	@ (8004094 <UART_SetConfig+0x2d4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d125      	bne.n	8003f6a <UART_SetConfig+0x1aa>
 8003f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800408c <UART_SetConfig+0x2cc>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f28:	2b30      	cmp	r3, #48	@ 0x30
 8003f2a:	d016      	beq.n	8003f5a <UART_SetConfig+0x19a>
 8003f2c:	2b30      	cmp	r3, #48	@ 0x30
 8003f2e:	d818      	bhi.n	8003f62 <UART_SetConfig+0x1a2>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d00a      	beq.n	8003f4a <UART_SetConfig+0x18a>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d814      	bhi.n	8003f62 <UART_SetConfig+0x1a2>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <UART_SetConfig+0x182>
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d008      	beq.n	8003f52 <UART_SetConfig+0x192>
 8003f40:	e00f      	b.n	8003f62 <UART_SetConfig+0x1a2>
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f48:	e0ad      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f50:	e0a9      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f52:	2304      	movs	r3, #4
 8003f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f58:	e0a5      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f60:	e0a1      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f62:	2310      	movs	r3, #16
 8003f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f68:	e09d      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004098 <UART_SetConfig+0x2d8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d125      	bne.n	8003fc0 <UART_SetConfig+0x200>
 8003f74:	4b45      	ldr	r3, [pc, #276]	@ (800408c <UART_SetConfig+0x2cc>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f80:	d016      	beq.n	8003fb0 <UART_SetConfig+0x1f0>
 8003f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f84:	d818      	bhi.n	8003fb8 <UART_SetConfig+0x1f8>
 8003f86:	2b80      	cmp	r3, #128	@ 0x80
 8003f88:	d00a      	beq.n	8003fa0 <UART_SetConfig+0x1e0>
 8003f8a:	2b80      	cmp	r3, #128	@ 0x80
 8003f8c:	d814      	bhi.n	8003fb8 <UART_SetConfig+0x1f8>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <UART_SetConfig+0x1d8>
 8003f92:	2b40      	cmp	r3, #64	@ 0x40
 8003f94:	d008      	beq.n	8003fa8 <UART_SetConfig+0x1e8>
 8003f96:	e00f      	b.n	8003fb8 <UART_SetConfig+0x1f8>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e082      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e07e      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fae:	e07a      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb6:	e076      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e072      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a35      	ldr	r2, [pc, #212]	@ (800409c <UART_SetConfig+0x2dc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d12a      	bne.n	8004020 <UART_SetConfig+0x260>
 8003fca:	4b30      	ldr	r3, [pc, #192]	@ (800408c <UART_SetConfig+0x2cc>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd8:	d01a      	beq.n	8004010 <UART_SetConfig+0x250>
 8003fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fde:	d81b      	bhi.n	8004018 <UART_SetConfig+0x258>
 8003fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fe4:	d00c      	beq.n	8004000 <UART_SetConfig+0x240>
 8003fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fea:	d815      	bhi.n	8004018 <UART_SetConfig+0x258>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <UART_SetConfig+0x238>
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff4:	d008      	beq.n	8004008 <UART_SetConfig+0x248>
 8003ff6:	e00f      	b.n	8004018 <UART_SetConfig+0x258>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e052      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004000:	2302      	movs	r3, #2
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e04e      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004008:	2304      	movs	r3, #4
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e04a      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004010:	2308      	movs	r3, #8
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e046      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004018:	2310      	movs	r3, #16
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e042      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a17      	ldr	r2, [pc, #92]	@ (8004084 <UART_SetConfig+0x2c4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d13a      	bne.n	80040a0 <UART_SetConfig+0x2e0>
 800402a:	4b18      	ldr	r3, [pc, #96]	@ (800408c <UART_SetConfig+0x2cc>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004038:	d01a      	beq.n	8004070 <UART_SetConfig+0x2b0>
 800403a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800403e:	d81b      	bhi.n	8004078 <UART_SetConfig+0x2b8>
 8004040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004044:	d00c      	beq.n	8004060 <UART_SetConfig+0x2a0>
 8004046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800404a:	d815      	bhi.n	8004078 <UART_SetConfig+0x2b8>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <UART_SetConfig+0x298>
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004054:	d008      	beq.n	8004068 <UART_SetConfig+0x2a8>
 8004056:	e00f      	b.n	8004078 <UART_SetConfig+0x2b8>
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405e:	e022      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004060:	2302      	movs	r3, #2
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004066:	e01e      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004068:	2304      	movs	r3, #4
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406e:	e01a      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004070:	2308      	movs	r3, #8
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004076:	e016      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004078:	2310      	movs	r3, #16
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407e:	e012      	b.n	80040a6 <UART_SetConfig+0x2e6>
 8004080:	efff69f3 	.word	0xefff69f3
 8004084:	40008000 	.word	0x40008000
 8004088:	40013800 	.word	0x40013800
 800408c:	40021000 	.word	0x40021000
 8004090:	40004400 	.word	0x40004400
 8004094:	40004800 	.word	0x40004800
 8004098:	40004c00 	.word	0x40004c00
 800409c:	40005000 	.word	0x40005000
 80040a0:	2310      	movs	r3, #16
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a9f      	ldr	r2, [pc, #636]	@ (8004328 <UART_SetConfig+0x568>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d17a      	bne.n	80041a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d824      	bhi.n	8004102 <UART_SetConfig+0x342>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <UART_SetConfig+0x300>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	08004103 	.word	0x08004103
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	08004103 	.word	0x08004103
 80040d0:	080040f3 	.word	0x080040f3
 80040d4:	08004103 	.word	0x08004103
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004103 	.word	0x08004103
 80040e0:	080040fb 	.word	0x080040fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fe fd54 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 80040e8:	61f8      	str	r0, [r7, #28]
        break;
 80040ea:	e010      	b.n	800410e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ec:	4b8f      	ldr	r3, [pc, #572]	@ (800432c <UART_SetConfig+0x56c>)
 80040ee:	61fb      	str	r3, [r7, #28]
        break;
 80040f0:	e00d      	b.n	800410e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f2:	f7fe fcb5 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80040f6:	61f8      	str	r0, [r7, #28]
        break;
 80040f8:	e009      	b.n	800410e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040fe:	61fb      	str	r3, [r7, #28]
        break;
 8004100:	e005      	b.n	800410e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800410c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80fb 	beq.w	800430c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	429a      	cmp	r2, r3
 8004124:	d305      	bcc.n	8004132 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	429a      	cmp	r2, r3
 8004130:	d903      	bls.n	800413a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004138:	e0e8      	b.n	800430c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2200      	movs	r2, #0
 800413e:	461c      	mov	r4, r3
 8004140:	4615      	mov	r5, r2
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	022b      	lsls	r3, r5, #8
 800414c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004150:	0222      	lsls	r2, r4, #8
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	6849      	ldr	r1, [r1, #4]
 8004156:	0849      	lsrs	r1, r1, #1
 8004158:	2000      	movs	r0, #0
 800415a:	4688      	mov	r8, r1
 800415c:	4681      	mov	r9, r0
 800415e:	eb12 0a08 	adds.w	sl, r2, r8
 8004162:	eb43 0b09 	adc.w	fp, r3, r9
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004174:	4650      	mov	r0, sl
 8004176:	4659      	mov	r1, fp
 8004178:	f7fc f87a 	bl	8000270 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800418a:	d308      	bcc.n	800419e <UART_SetConfig+0x3de>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004192:	d204      	bcs.n	800419e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	60da      	str	r2, [r3, #12]
 800419c:	e0b6      	b.n	800430c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041a4:	e0b2      	b.n	800430c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ae:	d15e      	bne.n	800426e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d828      	bhi.n	800420a <UART_SetConfig+0x44a>
 80041b8:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <UART_SetConfig+0x400>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	080041f5 	.word	0x080041f5
 80041cc:	0800420b 	.word	0x0800420b
 80041d0:	080041fb 	.word	0x080041fb
 80041d4:	0800420b 	.word	0x0800420b
 80041d8:	0800420b 	.word	0x0800420b
 80041dc:	0800420b 	.word	0x0800420b
 80041e0:	08004203 	.word	0x08004203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7fe fcd4 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 80041e8:	61f8      	str	r0, [r7, #28]
        break;
 80041ea:	e014      	b.n	8004216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ec:	f7fe fce6 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 80041f0:	61f8      	str	r0, [r7, #28]
        break;
 80041f2:	e010      	b.n	8004216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f4:	4b4d      	ldr	r3, [pc, #308]	@ (800432c <UART_SetConfig+0x56c>)
 80041f6:	61fb      	str	r3, [r7, #28]
        break;
 80041f8:	e00d      	b.n	8004216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fa:	f7fe fc31 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80041fe:	61f8      	str	r0, [r7, #28]
        break;
 8004200:	e009      	b.n	8004216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004206:	61fb      	str	r3, [r7, #28]
        break;
 8004208:	e005      	b.n	8004216 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004214:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d077      	beq.n	800430c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005a      	lsls	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b0f      	cmp	r3, #15
 8004236:	d916      	bls.n	8004266 <UART_SetConfig+0x4a6>
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423e:	d212      	bcs.n	8004266 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f023 030f 	bic.w	r3, r3, #15
 8004248:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	b29b      	uxth	r3, r3
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	b29a      	uxth	r2, r3
 8004256:	8afb      	ldrh	r3, [r7, #22]
 8004258:	4313      	orrs	r3, r2
 800425a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	8afa      	ldrh	r2, [r7, #22]
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	e052      	b.n	800430c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800426c:	e04e      	b.n	800430c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800426e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004272:	2b08      	cmp	r3, #8
 8004274:	d827      	bhi.n	80042c6 <UART_SetConfig+0x506>
 8004276:	a201      	add	r2, pc, #4	@ (adr r2, 800427c <UART_SetConfig+0x4bc>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042c7 	.word	0x080042c7
 800428c:	080042b7 	.word	0x080042b7
 8004290:	080042c7 	.word	0x080042c7
 8004294:	080042c7 	.word	0x080042c7
 8004298:	080042c7 	.word	0x080042c7
 800429c:	080042bf 	.word	0x080042bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a0:	f7fe fc76 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 80042a4:	61f8      	str	r0, [r7, #28]
        break;
 80042a6:	e014      	b.n	80042d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a8:	f7fe fc88 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 80042ac:	61f8      	str	r0, [r7, #28]
        break;
 80042ae:	e010      	b.n	80042d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b0:	4b1e      	ldr	r3, [pc, #120]	@ (800432c <UART_SetConfig+0x56c>)
 80042b2:	61fb      	str	r3, [r7, #28]
        break;
 80042b4:	e00d      	b.n	80042d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b6:	f7fe fbd3 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80042ba:	61f8      	str	r0, [r7, #28]
        break;
 80042bc:	e009      	b.n	80042d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042c2:	61fb      	str	r3, [r7, #28]
        break;
 80042c4:	e005      	b.n	80042d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042d0:	bf00      	nop
    }

    if (pclk != 0U)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d019      	beq.n	800430c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	085a      	lsrs	r2, r3, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	441a      	add	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d909      	bls.n	8004306 <UART_SetConfig+0x546>
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f8:	d205      	bcs.n	8004306 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e002      	b.n	800430c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004318:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	@ 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004326:	bf00      	nop
 8004328:	40008000 	.word	0x40008000
 800432c:	00f42400 	.word	0x00f42400

08004330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01a      	beq.n	8004446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800442e:	d10a      	bne.n	8004446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b098      	sub	sp, #96	@ 0x60
 8004478:	af02      	add	r7, sp, #8
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004484:	f7fc fd14 	bl	8000eb0 <HAL_GetTick>
 8004488:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b08      	cmp	r3, #8
 8004496:	d12e      	bne.n	80044f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004498:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a0:	2200      	movs	r2, #0
 80044a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f88c 	bl	80045c4 <UART_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d021      	beq.n	80044f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e062      	b.n	80045bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d149      	bne.n	8004598 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450c:	2200      	movs	r2, #0
 800450e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f856 	bl	80045c4 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d03c      	beq.n	8004598 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	623b      	str	r3, [r7, #32]
   return(result);
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800453c:	633b      	str	r3, [r7, #48]	@ 0x30
 800453e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e6      	bne.n	800451e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004570:	61fa      	str	r2, [r7, #28]
 8004572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	617b      	str	r3, [r7, #20]
   return(result);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e011      	b.n	80045bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3758      	adds	r7, #88	@ 0x58
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d4:	e04f      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d04b      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fc fc67 	bl	8000eb0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e04e      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d037      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b80      	cmp	r3, #128	@ 0x80
 800460a:	d034      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xb2>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b40      	cmp	r3, #64	@ 0x40
 8004610:	d031      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b08      	cmp	r3, #8
 800461e:	d110      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2208      	movs	r2, #8
 8004626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f838 	bl	800469e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2208      	movs	r2, #8
 8004632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e029      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004650:	d111      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800465a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f81e 	bl	800469e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e00f      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d0a0      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800469e:	b480      	push	{r7}
 80046a0:	b095      	sub	sp, #84	@ 0x54
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004710:	2b01      	cmp	r3, #1
 8004712:	d118      	bne.n	8004746 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	60bb      	str	r3, [r7, #8]
   return(result);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f023 0310 	bic.w	r3, r3, #16
 8004728:	647b      	str	r3, [r7, #68]	@ 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6979      	ldr	r1, [r7, #20]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	613b      	str	r3, [r7, #16]
   return(result);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e6      	bne.n	8004714 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800475a:	bf00      	nop
 800475c:	3754      	adds	r7, #84	@ 0x54
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <__NVIC_SetPriority>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	6039      	str	r1, [r7, #0]
 8004772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004778:	2b00      	cmp	r3, #0
 800477a:	db0a      	blt.n	8004792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	b2da      	uxtb	r2, r3
 8004780:	490c      	ldr	r1, [pc, #48]	@ (80047b4 <__NVIC_SetPriority+0x4c>)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	0112      	lsls	r2, r2, #4
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	440b      	add	r3, r1
 800478c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004790:	e00a      	b.n	80047a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4908      	ldr	r1, [pc, #32]	@ (80047b8 <__NVIC_SetPriority+0x50>)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	3b04      	subs	r3, #4
 80047a0:	0112      	lsls	r2, r2, #4
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	440b      	add	r3, r1
 80047a6:	761a      	strb	r2, [r3, #24]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000e100 	.word	0xe000e100
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <SysTick_Handler+0x1c>)
 80047c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047c4:	f002 f956 	bl	8006a74 <xTaskGetSchedulerState>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d001      	beq.n	80047d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80047ce:	f000 fd9b 	bl	8005308 <xPortSysTickHandler>
  }
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000e010 	.word	0xe000e010

080047dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047e0:	2100      	movs	r1, #0
 80047e2:	f06f 0004 	mvn.w	r0, #4
 80047e6:	f7ff ffbf 	bl	8004768 <__NVIC_SetPriority>
#endif
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f6:	f3ef 8305 	mrs	r3, IPSR
 80047fa:	603b      	str	r3, [r7, #0]
  return(result);
 80047fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004802:	f06f 0305 	mvn.w	r3, #5
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	e00c      	b.n	8004824 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800480a:	4b0a      	ldr	r3, [pc, #40]	@ (8004834 <osKernelInitialize+0x44>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004812:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <osKernelInitialize+0x44>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004818:	2300      	movs	r3, #0
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e002      	b.n	8004824 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004824:	687b      	ldr	r3, [r7, #4]
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	200001fc 	.word	0x200001fc

08004838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483e:	f3ef 8305 	mrs	r3, IPSR
 8004842:	603b      	str	r3, [r7, #0]
  return(result);
 8004844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <osKernelStart+0x1a>
    stat = osErrorISR;
 800484a:	f06f 0305 	mvn.w	r3, #5
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e010      	b.n	8004874 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <osKernelStart+0x48>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d109      	bne.n	800486e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800485a:	f7ff ffbf 	bl	80047dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800485e:	4b08      	ldr	r3, [pc, #32]	@ (8004880 <osKernelStart+0x48>)
 8004860:	2202      	movs	r2, #2
 8004862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004864:	f001 fcb8 	bl	80061d8 <vTaskStartScheduler>
      stat = osOK;
 8004868:	2300      	movs	r3, #0
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	e002      	b.n	8004874 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004874:	687b      	ldr	r3, [r7, #4]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200001fc 	.word	0x200001fc

08004884 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	@ 0x38
 8004888:	af04      	add	r7, sp, #16
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004894:	f3ef 8305 	mrs	r3, IPSR
 8004898:	617b      	str	r3, [r7, #20]
  return(result);
 800489a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800489c:	2b00      	cmp	r3, #0
 800489e:	d17e      	bne.n	800499e <osThreadNew+0x11a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d07b      	beq.n	800499e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048aa:	2318      	movs	r3, #24
 80048ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d045      	beq.n	800494a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <osThreadNew+0x48>
        name = attr->name;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <osThreadNew+0x6e>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b38      	cmp	r3, #56	@ 0x38
 80048e4:	d805      	bhi.n	80048f2 <osThreadNew+0x6e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <osThreadNew+0x72>
        return (NULL);
 80048f2:	2300      	movs	r3, #0
 80048f4:	e054      	b.n	80049a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00e      	beq.n	800492c <osThreadNew+0xa8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b5b      	cmp	r3, #91	@ 0x5b
 8004914:	d90a      	bls.n	800492c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <osThreadNew+0xa8>
        mem = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e010      	b.n	800494e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10c      	bne.n	800494e <osThreadNew+0xca>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d108      	bne.n	800494e <osThreadNew+0xca>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <osThreadNew+0xca>
          mem = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e001      	b.n	800494e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d110      	bne.n	8004976 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800495c:	9202      	str	r2, [sp, #8]
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6a3a      	ldr	r2, [r7, #32]
 8004968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f001 fa58 	bl	8005e20 <xTaskCreateStatic>
 8004970:	4603      	mov	r3, r0
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e013      	b.n	800499e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d110      	bne.n	800499e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	b29a      	uxth	r2, r3
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f001 faa6 	bl	8005ee0 <xTaskCreate>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <osThreadNew+0x11a>
            hTask = NULL;
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800499e:	693b      	ldr	r3, [r7, #16]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	@ 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b0:	f3ef 8305 	mrs	r3, IPSR
 80049b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <osDelay+0x1c>
    stat = osErrorISR;
 80049bc:	f06f 0305 	mvn.w	r3, #5
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	e007      	b.n	80049d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fbcc 	bl	800616c <vTaskDelay>
    }
  }

  return (stat);
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a07      	ldr	r2, [pc, #28]	@ (8004a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80049f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4a06      	ldr	r2, [pc, #24]	@ (8004a10 <vApplicationGetIdleTaskMemory+0x30>)
 80049f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2280      	movs	r2, #128	@ 0x80
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000200 	.word	0x20000200
 8004a10:	2000025c 	.word	0x2000025c

08004a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a07      	ldr	r2, [pc, #28]	@ (8004a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a06      	ldr	r2, [pc, #24]	@ (8004a44 <vApplicationGetTimerTaskMemory+0x30>)
 8004a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	2000045c 	.word	0x2000045c
 8004a44:	200004b8 	.word	0x200004b8

08004a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	@ 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a54:	f001 fc28 	bl	80062a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a58:	4b5c      	ldr	r3, [pc, #368]	@ (8004bcc <pvPortMalloc+0x184>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a60:	f000 f924 	bl	8004cac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a64:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd0 <pvPortMalloc+0x188>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 8095 	bne.w	8004b9c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01e      	beq.n	8004ab6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a78:	2208      	movs	r2, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d015      	beq.n	8004ab6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	3308      	adds	r3, #8
 8004a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d06f      	beq.n	8004b9c <pvPortMalloc+0x154>
 8004abc:	4b45      	ldr	r3, [pc, #276]	@ (8004bd4 <pvPortMalloc+0x18c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d86a      	bhi.n	8004b9c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ac6:	4b44      	ldr	r3, [pc, #272]	@ (8004bd8 <pvPortMalloc+0x190>)
 8004ac8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004aca:	4b43      	ldr	r3, [pc, #268]	@ (8004bd8 <pvPortMalloc+0x190>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ad0:	e004      	b.n	8004adc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d903      	bls.n	8004aee <pvPortMalloc+0xa6>
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f1      	bne.n	8004ad2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aee:	4b37      	ldr	r3, [pc, #220]	@ (8004bcc <pvPortMalloc+0x184>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d051      	beq.n	8004b9c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2208      	movs	r2, #8
 8004afe:	4413      	add	r3, r2
 8004b00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	1ad2      	subs	r2, r2, r3
 8004b12:	2308      	movs	r3, #8
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d920      	bls.n	8004b5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <pvPortMalloc+0xfc>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	613b      	str	r3, [r7, #16]
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	1ad2      	subs	r2, r2, r3
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b56:	69b8      	ldr	r0, [r7, #24]
 8004b58:	f000 f90a 	bl	8004d70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <pvPortMalloc+0x18c>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd4 <pvPortMalloc+0x18c>)
 8004b68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <pvPortMalloc+0x18c>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <pvPortMalloc+0x194>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d203      	bcs.n	8004b7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b76:	4b17      	ldr	r3, [pc, #92]	@ (8004bd4 <pvPortMalloc+0x18c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a18      	ldr	r2, [pc, #96]	@ (8004bdc <pvPortMalloc+0x194>)
 8004b7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	4b13      	ldr	r3, [pc, #76]	@ (8004bd0 <pvPortMalloc+0x188>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b92:	4b13      	ldr	r3, [pc, #76]	@ (8004be0 <pvPortMalloc+0x198>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	4a11      	ldr	r2, [pc, #68]	@ (8004be0 <pvPortMalloc+0x198>)
 8004b9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b9c:	f001 fb92 	bl	80062c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <pvPortMalloc+0x17a>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60fb      	str	r3, [r7, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	e7fd      	b.n	8004bbe <pvPortMalloc+0x176>
	return pvReturn;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3728      	adds	r7, #40	@ 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20001478 	.word	0x20001478
 8004bd0:	2000148c 	.word	0x2000148c
 8004bd4:	2000147c 	.word	0x2000147c
 8004bd8:	20001470 	.word	0x20001470
 8004bdc:	20001480 	.word	0x20001480
 8004be0:	20001484 	.word	0x20001484

08004be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04f      	beq.n	8004c96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	4b25      	ldr	r3, [pc, #148]	@ (8004ca0 <vPortFree+0xbc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <vPortFree+0x46>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60fb      	str	r3, [r7, #12]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <vPortFree+0x66>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60bb      	str	r3, [r7, #8]
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	e7fd      	b.n	8004c46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <vPortFree+0xbc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01e      	beq.n	8004c96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11a      	bne.n	8004c96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca0 <vPortFree+0xbc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c70:	f001 fb1a 	bl	80062a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca4 <vPortFree+0xc0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <vPortFree+0xc0>)
 8004c80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c82:	6938      	ldr	r0, [r7, #16]
 8004c84:	f000 f874 	bl	8004d70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c88:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <vPortFree+0xc4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	4a06      	ldr	r2, [pc, #24]	@ (8004ca8 <vPortFree+0xc4>)
 8004c90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c92:	f001 fb17 	bl	80062c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000148c 	.word	0x2000148c
 8004ca4:	2000147c 	.word	0x2000147c
 8004ca8:	20001488 	.word	0x20001488

08004cac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cb2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004cb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb8:	4b27      	ldr	r3, [pc, #156]	@ (8004d58 <prvHeapInit+0xac>)
 8004cba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3307      	adds	r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <prvHeapInit+0xac>)
 8004cdc:	4413      	add	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d5c <prvHeapInit+0xb0>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cea:	4b1c      	ldr	r3, [pc, #112]	@ (8004d5c <prvHeapInit+0xb0>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0307 	bic.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <prvHeapInit+0xb4>)
 8004d0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d0e:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <prvHeapInit+0xb4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d16:	4b12      	ldr	r3, [pc, #72]	@ (8004d60 <prvHeapInit+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	1ad2      	subs	r2, r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <prvHeapInit+0xb4>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a0a      	ldr	r2, [pc, #40]	@ (8004d64 <prvHeapInit+0xb8>)
 8004d3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a09      	ldr	r2, [pc, #36]	@ (8004d68 <prvHeapInit+0xbc>)
 8004d42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d44:	4b09      	ldr	r3, [pc, #36]	@ (8004d6c <prvHeapInit+0xc0>)
 8004d46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d4a:	601a      	str	r2, [r3, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	200008b8 	.word	0x200008b8
 8004d5c:	20001470 	.word	0x20001470
 8004d60:	20001478 	.word	0x20001478
 8004d64:	20001480 	.word	0x20001480
 8004d68:	2000147c 	.word	0x2000147c
 8004d6c:	2000148c 	.word	0x2000148c

08004d70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d78:	4b28      	ldr	r3, [pc, #160]	@ (8004e1c <prvInsertBlockIntoFreeList+0xac>)
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e002      	b.n	8004d84 <prvInsertBlockIntoFreeList+0x14>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d8f7      	bhi.n	8004d7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d108      	bne.n	8004db2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	441a      	add	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d118      	bne.n	8004df8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <prvInsertBlockIntoFreeList+0xb0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d00d      	beq.n	8004dee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	441a      	add	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e008      	b.n	8004e00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dee:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <prvInsertBlockIntoFreeList+0xb0>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e003      	b.n	8004e00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d002      	beq.n	8004e0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20001470 	.word	0x20001470
 8004e20:	20001478 	.word	0x20001478

08004e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f103 0208 	add.w	r2, r3, #8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f103 0208 	add.w	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f103 0208 	add.w	r2, r3, #8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d103      	bne.n	8004ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e00c      	b.n	8004f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3308      	adds	r3, #8
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e002      	b.n	8004ef4 <vListInsert+0x2e>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d2f6      	bcs.n	8004eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	601a      	str	r2, [r3, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6892      	ldr	r2, [r2, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6852      	ldr	r2, [r2, #4]
 8004f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d103      	bne.n	8004f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	1e5a      	subs	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3b04      	subs	r3, #4
 8004fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8004ff0 <pxPortInitialiseStack+0x64>)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3b14      	subs	r3, #20
 8004fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3b04      	subs	r3, #4
 8004fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f06f 0202 	mvn.w	r2, #2
 8004fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3b20      	subs	r3, #32
 8004fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	08004ff5 	.word	0x08004ff5

08004ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ffe:	4b13      	ldr	r3, [pc, #76]	@ (800504c <prvTaskExitError+0x58>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d00b      	beq.n	8005020 <prvTaskExitError+0x2c>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60fb      	str	r3, [r7, #12]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <prvTaskExitError+0x28>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60bb      	str	r3, [r7, #8]
}
 8005032:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005034:	bf00      	nop
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0fc      	beq.n	8005036 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	2000000c 	.word	0x2000000c

08005050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005050:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <pxCurrentTCBConst2>)
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	6808      	ldr	r0, [r1, #0]
 8005056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	f380 8809 	msr	PSP, r0
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8811 	msr	BASEPRI, r0
 800506a:	4770      	bx	lr
 800506c:	f3af 8000 	nop.w

08005070 <pxCurrentTCBConst2>:
 8005070:	200014d8 	.word	0x200014d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005078:	4808      	ldr	r0, [pc, #32]	@ (800509c <prvPortStartFirstTask+0x24>)
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f380 8808 	msr	MSP, r0
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f380 8814 	msr	CONTROL, r0
 800508a:	b662      	cpsie	i
 800508c:	b661      	cpsie	f
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	df00      	svc	0
 8005098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800509a:	bf00      	nop
 800509c:	e000ed08 	.word	0xe000ed08

080050a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050a6:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <xPortStartScheduler+0x124>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a47      	ldr	r2, [pc, #284]	@ (80051c8 <xPortStartScheduler+0x128>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10b      	bne.n	80050c8 <xPortStartScheduler+0x28>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60fb      	str	r3, [r7, #12]
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050c8:	4b3e      	ldr	r3, [pc, #248]	@ (80051c4 <xPortStartScheduler+0x124>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3f      	ldr	r2, [pc, #252]	@ (80051cc <xPortStartScheduler+0x12c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10b      	bne.n	80050ea <xPortStartScheduler+0x4a>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	613b      	str	r3, [r7, #16]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ea:	4b39      	ldr	r3, [pc, #228]	@ (80051d0 <xPortStartScheduler+0x130>)
 80050ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	22ff      	movs	r2, #255	@ 0xff
 80050fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800510c:	b2da      	uxtb	r2, r3
 800510e:	4b31      	ldr	r3, [pc, #196]	@ (80051d4 <xPortStartScheduler+0x134>)
 8005110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005112:	4b31      	ldr	r3, [pc, #196]	@ (80051d8 <xPortStartScheduler+0x138>)
 8005114:	2207      	movs	r2, #7
 8005116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005118:	e009      	b.n	800512e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800511a:	4b2f      	ldr	r3, [pc, #188]	@ (80051d8 <xPortStartScheduler+0x138>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3b01      	subs	r3, #1
 8005120:	4a2d      	ldr	r2, [pc, #180]	@ (80051d8 <xPortStartScheduler+0x138>)
 8005122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005136:	2b80      	cmp	r3, #128	@ 0x80
 8005138:	d0ef      	beq.n	800511a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800513a:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <xPortStartScheduler+0x138>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1c3 0307 	rsb	r3, r3, #7
 8005142:	2b04      	cmp	r3, #4
 8005144:	d00b      	beq.n	800515e <xPortStartScheduler+0xbe>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800515e:	4b1e      	ldr	r3, [pc, #120]	@ (80051d8 <xPortStartScheduler+0x138>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	4a1c      	ldr	r2, [pc, #112]	@ (80051d8 <xPortStartScheduler+0x138>)
 8005166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <xPortStartScheduler+0x138>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005170:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <xPortStartScheduler+0x138>)
 8005172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800517c:	4b17      	ldr	r3, [pc, #92]	@ (80051dc <xPortStartScheduler+0x13c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a16      	ldr	r2, [pc, #88]	@ (80051dc <xPortStartScheduler+0x13c>)
 8005182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005188:	4b14      	ldr	r3, [pc, #80]	@ (80051dc <xPortStartScheduler+0x13c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a13      	ldr	r2, [pc, #76]	@ (80051dc <xPortStartScheduler+0x13c>)
 800518e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005194:	f000 f8da 	bl	800534c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005198:	4b11      	ldr	r3, [pc, #68]	@ (80051e0 <xPortStartScheduler+0x140>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800519e:	f000 f8f9 	bl	8005394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051a2:	4b10      	ldr	r3, [pc, #64]	@ (80051e4 <xPortStartScheduler+0x144>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a0f      	ldr	r2, [pc, #60]	@ (80051e4 <xPortStartScheduler+0x144>)
 80051a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051ae:	f7ff ff63 	bl	8005078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051b2:	f001 f9ef 	bl	8006594 <vTaskSwitchContext>
	prvTaskExitError();
 80051b6:	f7ff ff1d 	bl	8004ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	e000ed00 	.word	0xe000ed00
 80051c8:	410fc271 	.word	0x410fc271
 80051cc:	410fc270 	.word	0x410fc270
 80051d0:	e000e400 	.word	0xe000e400
 80051d4:	20001490 	.word	0x20001490
 80051d8:	20001494 	.word	0x20001494
 80051dc:	e000ed20 	.word	0xe000ed20
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	e000ef34 	.word	0xe000ef34

080051e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	607b      	str	r3, [r7, #4]
}
 8005200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005202:	4b10      	ldr	r3, [pc, #64]	@ (8005244 <vPortEnterCritical+0x5c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3301      	adds	r3, #1
 8005208:	4a0e      	ldr	r2, [pc, #56]	@ (8005244 <vPortEnterCritical+0x5c>)
 800520a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800520c:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <vPortEnterCritical+0x5c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d110      	bne.n	8005236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005214:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <vPortEnterCritical+0x60>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <vPortEnterCritical+0x4e>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	603b      	str	r3, [r7, #0]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <vPortEnterCritical+0x4a>
	}
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	2000000c 	.word	0x2000000c
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005252:	4b12      	ldr	r3, [pc, #72]	@ (800529c <vPortExitCritical+0x50>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <vPortExitCritical+0x26>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005272:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <vPortExitCritical+0x50>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	4a08      	ldr	r2, [pc, #32]	@ (800529c <vPortExitCritical+0x50>)
 800527a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800527c:	4b07      	ldr	r3, [pc, #28]	@ (800529c <vPortExitCritical+0x50>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <vPortExitCritical+0x44>
 8005284:	2300      	movs	r3, #0
 8005286:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800528e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	2000000c 	.word	0x2000000c

080052a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052a0:	f3ef 8009 	mrs	r0, PSP
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4b15      	ldr	r3, [pc, #84]	@ (8005300 <pxCurrentTCBConst>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f01e 0f10 	tst.w	lr, #16
 80052b0:	bf08      	it	eq
 80052b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	6010      	str	r0, [r2, #0]
 80052bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052c4:	f380 8811 	msr	BASEPRI, r0
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f001 f960 	bl	8006594 <vTaskSwitchContext>
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f380 8811 	msr	BASEPRI, r0
 80052dc:	bc09      	pop	{r0, r3}
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	6808      	ldr	r0, [r1, #0]
 80052e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e6:	f01e 0f10 	tst.w	lr, #16
 80052ea:	bf08      	it	eq
 80052ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052f0:	f380 8809 	msr	PSP, r0
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	f3af 8000 	nop.w

08005300 <pxCurrentTCBConst>:
 8005300:	200014d8 	.word	0x200014d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005322:	f001 f87d 	bl	8006420 <xTaskIncrementTick>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800532c:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <xPortSysTickHandler+0x40>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f383 8811 	msr	BASEPRI, r3
}
 800533e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005350:	4b0b      	ldr	r3, [pc, #44]	@ (8005380 <vPortSetupTimerInterrupt+0x34>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005356:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <vPortSetupTimerInterrupt+0x38>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800535c:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <vPortSetupTimerInterrupt+0x3c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0a      	ldr	r2, [pc, #40]	@ (800538c <vPortSetupTimerInterrupt+0x40>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	4a09      	ldr	r2, [pc, #36]	@ (8005390 <vPortSetupTimerInterrupt+0x44>)
 800536a:	3b01      	subs	r3, #1
 800536c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800536e:	4b04      	ldr	r3, [pc, #16]	@ (8005380 <vPortSetupTimerInterrupt+0x34>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	e000e010 	.word	0xe000e010
 8005384:	e000e018 	.word	0xe000e018
 8005388:	20000000 	.word	0x20000000
 800538c:	10624dd3 	.word	0x10624dd3
 8005390:	e000e014 	.word	0xe000e014

08005394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053a4 <vPortEnableVFP+0x10>
 8005398:	6801      	ldr	r1, [r0, #0]
 800539a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800539e:	6001      	str	r1, [r0, #0]
 80053a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053a2:	bf00      	nop
 80053a4:	e000ed88 	.word	0xe000ed88

080053a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053ae:	f3ef 8305 	mrs	r3, IPSR
 80053b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d915      	bls.n	80053e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ba:	4a18      	ldr	r2, [pc, #96]	@ (800541c <vPortValidateInterruptPriority+0x74>)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053c4:	4b16      	ldr	r3, [pc, #88]	@ (8005420 <vPortValidateInterruptPriority+0x78>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	7afa      	ldrb	r2, [r7, #11]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d20b      	bcs.n	80053e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	e7fd      	b.n	80053e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <vPortValidateInterruptPriority+0x7c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <vPortValidateInterruptPriority+0x80>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d90b      	bls.n	800540e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	603b      	str	r3, [r7, #0]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <vPortValidateInterruptPriority+0x62>
	}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	e000e3f0 	.word	0xe000e3f0
 8005420:	20001490 	.word	0x20001490
 8005424:	e000ed0c 	.word	0xe000ed0c
 8005428:	20001494 	.word	0x20001494

0800542c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10b      	bne.n	8005458 <xQueueGenericReset+0x2c>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60bb      	str	r3, [r7, #8]
}
 8005452:	bf00      	nop
 8005454:	bf00      	nop
 8005456:	e7fd      	b.n	8005454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005458:	f7ff fec6 	bl	80051e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	441a      	add	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005488:	3b01      	subs	r3, #1
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	441a      	add	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	22ff      	movs	r2, #255	@ 0xff
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	22ff      	movs	r2, #255	@ 0xff
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d114      	bne.n	80054d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01a      	beq.n	80054ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3310      	adds	r3, #16
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 f91a 	bl	80066f4 <xTaskRemoveFromEventList>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d012      	beq.n	80054ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <xQueueGenericReset+0xd0>)
 80054c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	e009      	b.n	80054ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fca1 	bl	8004e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3324      	adds	r3, #36	@ 0x24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fc9c 	bl	8004e24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054ec:	f7ff feae 	bl	800524c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054f0:	2301      	movs	r3, #1
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08e      	sub	sp, #56	@ 0x38
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10b      	bne.n	800554a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	e7fd      	b.n	8005546 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <xQueueGenericCreateStatic+0x56>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <xQueueGenericCreateStatic+0x5a>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <xQueueGenericCreateStatic+0x5c>
 800555a:	2300      	movs	r3, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	623b      	str	r3, [r7, #32]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <xQueueGenericCreateStatic+0x84>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <xQueueGenericCreateStatic+0x88>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <xQueueGenericCreateStatic+0x8a>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61fb      	str	r3, [r7, #28]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055a6:	2350      	movs	r3, #80	@ 0x50
 80055a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b50      	cmp	r3, #80	@ 0x50
 80055ae:	d00b      	beq.n	80055c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	61bb      	str	r3, [r7, #24]
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80055e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f805 	bl	80055fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3730      	adds	r7, #48	@ 0x30
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
 8005606:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e002      	b.n	800561c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005628:	2101      	movs	r1, #1
 800562a:	69b8      	ldr	r0, [r7, #24]
 800562c:	f7ff fefe 	bl	800542c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	@ 0x38
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <xQueueGenericSend+0x34>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <xQueueGenericSend+0x42>
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <xQueueGenericSend+0x46>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <xQueueGenericSend+0x48>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <xQueueGenericSend+0x64>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d103      	bne.n	80056b2 <xQueueGenericSend+0x72>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericSend+0x76>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericSend+0x78>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <xQueueGenericSend+0x94>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	623b      	str	r3, [r7, #32]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056d4:	f001 f9ce 	bl	8006a74 <xTaskGetSchedulerState>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <xQueueGenericSend+0xa4>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <xQueueGenericSend+0xa8>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <xQueueGenericSend+0xaa>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <xQueueGenericSend+0xc6>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	61fb      	str	r3, [r7, #28]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005706:	f7ff fd6f 	bl	80051e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <xQueueGenericSend+0xdc>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d129      	bne.n	8005770 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005722:	f000 fa0f 	bl	8005b44 <prvCopyDataToQueue>
 8005726:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d010      	beq.n	8005752 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005732:	3324      	adds	r3, #36	@ 0x24
 8005734:	4618      	mov	r0, r3
 8005736:	f000 ffdd 	bl	80066f4 <xTaskRemoveFromEventList>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d013      	beq.n	8005768 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005740:	4b3f      	ldr	r3, [pc, #252]	@ (8005840 <xQueueGenericSend+0x200>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	e00a      	b.n	8005768 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005758:	4b39      	ldr	r3, [pc, #228]	@ (8005840 <xQueueGenericSend+0x200>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005768:	f7ff fd70 	bl	800524c <vPortExitCritical>
				return pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	e063      	b.n	8005838 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005776:	f7ff fd69 	bl	800524c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800577a:	2300      	movs	r3, #0
 800577c:	e05c      	b.n	8005838 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800577e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4618      	mov	r0, r3
 800578a:	f001 f817 	bl	80067bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005792:	f7ff fd5b 	bl	800524c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005796:	f000 fd87 	bl	80062a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800579a:	f7ff fd25 	bl	80051e8 <vPortEnterCritical>
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d103      	bne.n	80057b4 <xQueueGenericSend+0x174>
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d103      	bne.n	80057ca <xQueueGenericSend+0x18a>
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057ca:	f7ff fd3f 	bl	800524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057ce:	1d3a      	adds	r2, r7, #4
 80057d0:	f107 0314 	add.w	r3, r7, #20
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 f806 	bl	80067e8 <xTaskCheckForTimeOut>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d124      	bne.n	800582c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057e4:	f000 faa6 	bl	8005d34 <prvIsQueueFull>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d018      	beq.n	8005820 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	3310      	adds	r3, #16
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 ff2a 	bl	8006650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057fe:	f000 fa31 	bl	8005c64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005802:	f000 fd5f 	bl	80062c4 <xTaskResumeAll>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	f47f af7c 	bne.w	8005706 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800580e:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <xQueueGenericSend+0x200>)
 8005810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	e772      	b.n	8005706 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005822:	f000 fa1f 	bl	8005c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005826:	f000 fd4d 	bl	80062c4 <xTaskResumeAll>
 800582a:	e76c      	b.n	8005706 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800582c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800582e:	f000 fa19 	bl	8005c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005832:	f000 fd47 	bl	80062c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005836:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005838:	4618      	mov	r0, r3
 800583a:	3738      	adds	r7, #56	@ 0x38
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b090      	sub	sp, #64	@ 0x40
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800586e:	bf00      	nop
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <xQueueGenericSendFromISR+0x3e>
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <xQueueGenericSendFromISR+0x42>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <xQueueGenericSendFromISR+0x44>
 8005886:	2300      	movs	r3, #0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d103      	bne.n	80058b2 <xQueueGenericSendFromISR+0x6e>
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <xQueueGenericSendFromISR+0x72>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <xQueueGenericSendFromISR+0x74>
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	623b      	str	r3, [r7, #32]
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058d4:	f7ff fd68 	bl	80053a8 <vPortValidateInterruptPriority>
	__asm volatile
 80058d8:	f3ef 8211 	mrs	r2, BASEPRI
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	61fa      	str	r2, [r7, #28]
 80058ee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80058f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d302      	bcc.n	8005906 <xQueueGenericSendFromISR+0xc2>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d12f      	bne.n	8005966 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800590c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005914:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800591c:	f000 f912 	bl	8005b44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005920:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d112      	bne.n	8005950 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	3324      	adds	r3, #36	@ 0x24
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fedc 	bl	80066f4 <xTaskRemoveFromEventList>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e007      	b.n	8005960 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005950:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005954:	3301      	adds	r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	b25a      	sxtb	r2, r3
 800595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005960:	2301      	movs	r3, #1
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005964:	e001      	b.n	800596a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005966:	2300      	movs	r3, #0
 8005968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800596a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f383 8811 	msr	BASEPRI, r3
}
 8005974:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005978:	4618      	mov	r0, r3
 800597a:	3740      	adds	r7, #64	@ 0x40
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08c      	sub	sp, #48	@ 0x30
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <xQueueReceive+0x32>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	623b      	str	r3, [r7, #32]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <xQueueReceive+0x40>
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <xQueueReceive+0x44>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <xQueueReceive+0x46>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <xQueueReceive+0x62>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	61fb      	str	r3, [r7, #28]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e2:	f001 f847 	bl	8006a74 <xTaskGetSchedulerState>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <xQueueReceive+0x72>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueReceive+0x76>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueReceive+0x78>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10b      	bne.n	8005a14 <xQueueReceive+0x94>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	61bb      	str	r3, [r7, #24]
}
 8005a0e:	bf00      	nop
 8005a10:	bf00      	nop
 8005a12:	e7fd      	b.n	8005a10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a14:	f7ff fbe8 	bl	80051e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01f      	beq.n	8005a64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a28:	f000 f8f6 	bl	8005c18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	1e5a      	subs	r2, r3, #1
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00f      	beq.n	8005a5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	3310      	adds	r3, #16
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fe57 	bl	80066f4 <xTaskRemoveFromEventList>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b40 <xQueueReceive+0x1c0>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a5c:	f7ff fbf6 	bl	800524c <vPortExitCritical>
				return pdPASS;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e069      	b.n	8005b38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a6a:	f7ff fbef 	bl	800524c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e062      	b.n	8005b38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a78:	f107 0310 	add.w	r3, r7, #16
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fe9d 	bl	80067bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a86:	f7ff fbe1 	bl	800524c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a8a:	f000 fc0d 	bl	80062a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a8e:	f7ff fbab 	bl	80051e8 <vPortEnterCritical>
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a98:	b25b      	sxtb	r3, r3
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d103      	bne.n	8005aa8 <xQueueReceive+0x128>
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <xQueueReceive+0x13e>
 8005ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005abe:	f7ff fbc5 	bl	800524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac2:	1d3a      	adds	r2, r7, #4
 8005ac4:	f107 0310 	add.w	r3, r7, #16
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fe8c 	bl	80067e8 <xTaskCheckForTimeOut>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d123      	bne.n	8005b1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ad8:	f000 f916 	bl	8005d08 <prvIsQueueEmpty>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d017      	beq.n	8005b12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	3324      	adds	r3, #36	@ 0x24
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fdb0 	bl	8006650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af2:	f000 f8b7 	bl	8005c64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005af6:	f000 fbe5 	bl	80062c4 <xTaskResumeAll>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d189      	bne.n	8005a14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b00:	4b0f      	ldr	r3, [pc, #60]	@ (8005b40 <xQueueReceive+0x1c0>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	e780      	b.n	8005a14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b14:	f000 f8a6 	bl	8005c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b18:	f000 fbd4 	bl	80062c4 <xTaskResumeAll>
 8005b1c:	e77a      	b.n	8005a14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b20:	f000 f8a0 	bl	8005c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b24:	f000 fbce 	bl	80062c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b2a:	f000 f8ed 	bl	8005d08 <prvIsQueueEmpty>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f43f af6f 	beq.w	8005a14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3730      	adds	r7, #48	@ 0x30
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10d      	bne.n	8005b7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d14d      	bne.n	8005c06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 ff9e 	bl	8006ab0 <xTaskPriorityDisinherit>
 8005b74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	e043      	b.n	8005c06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d119      	bne.n	8005bb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6858      	ldr	r0, [r3, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	f001 fc16 	bl	80073c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9c:	441a      	add	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d32b      	bcc.n	8005c06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	e026      	b.n	8005c06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68d8      	ldr	r0, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	f001 fbfc 	bl	80073c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd0:	425b      	negs	r3, r3
 8005bd2:	441a      	add	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d207      	bcs.n	8005bf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	425b      	negs	r3, r3
 8005bee:	441a      	add	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d105      	bne.n	8005c06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c0e:	697b      	ldr	r3, [r7, #20]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d018      	beq.n	8005c5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	441a      	add	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d303      	bcc.n	8005c4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68d9      	ldr	r1, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	461a      	mov	r2, r3
 8005c56:	6838      	ldr	r0, [r7, #0]
 8005c58:	f001 fbb2 	bl	80073c0 <memcpy>
	}
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c6c:	f7ff fabc 	bl	80051e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c78:	e011      	b.n	8005c9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d012      	beq.n	8005ca8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3324      	adds	r3, #36	@ 0x24
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fd34 	bl	80066f4 <xTaskRemoveFromEventList>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c92:	f000 fe0d 	bl	80068b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dce9      	bgt.n	8005c7a <prvUnlockQueue+0x16>
 8005ca6:	e000      	b.n	8005caa <prvUnlockQueue+0x46>
					break;
 8005ca8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	22ff      	movs	r2, #255	@ 0xff
 8005cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005cb2:	f7ff facb 	bl	800524c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cb6:	f7ff fa97 	bl	80051e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc2:	e011      	b.n	8005ce8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d012      	beq.n	8005cf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3310      	adds	r3, #16
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fd0f 	bl	80066f4 <xTaskRemoveFromEventList>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cdc:	f000 fde8 	bl	80068b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dce9      	bgt.n	8005cc4 <prvUnlockQueue+0x60>
 8005cf0:	e000      	b.n	8005cf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	22ff      	movs	r2, #255	@ 0xff
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cfc:	f7ff faa6 	bl	800524c <vPortExitCritical>
}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d10:	f7ff fa6a 	bl	80051e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e001      	b.n	8005d26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d26:	f7ff fa91 	bl	800524c <vPortExitCritical>

	return xReturn;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d3c:	f7ff fa54 	bl	80051e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d102      	bne.n	8005d52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e001      	b.n	8005d56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d56:	f7ff fa79 	bl	800524c <vPortExitCritical>

	return xReturn;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e014      	b.n	8005d9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d74:	4a0f      	ldr	r2, [pc, #60]	@ (8005db4 <vQueueAddToRegistry+0x50>)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d80:	490c      	ldr	r1, [pc, #48]	@ (8005db4 <vQueueAddToRegistry+0x50>)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <vQueueAddToRegistry+0x50>)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4413      	add	r3, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d96:	e006      	b.n	8005da6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b07      	cmp	r3, #7
 8005da2:	d9e7      	bls.n	8005d74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20001498 	.word	0x20001498

08005db8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005dc8:	f7ff fa0e 	bl	80051e8 <vPortEnterCritical>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d103      	bne.n	8005de2 <vQueueWaitForMessageRestricted+0x2a>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005de8:	b25b      	sxtb	r3, r3
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d103      	bne.n	8005df8 <vQueueWaitForMessageRestricted+0x40>
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005df8:	f7ff fa28 	bl	800524c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	3324      	adds	r3, #36	@ 0x24
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fc45 	bl	800669c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f7ff ff26 	bl	8005c64 <prvUnlockQueue>
	}
 8005e18:	bf00      	nop
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08e      	sub	sp, #56	@ 0x38
 8005e24:	af04      	add	r7, sp, #16
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	623b      	str	r3, [r7, #32]
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	61fb      	str	r3, [r7, #28]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e6a:	235c      	movs	r3, #92	@ 0x5c
 8005e6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e72:	d00b      	beq.n	8005e8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61bb      	str	r3, [r7, #24]
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01e      	beq.n	8005ed2 <xTaskCreateStatic+0xb2>
 8005e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01b      	beq.n	8005ed2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ea2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eac:	2300      	movs	r3, #0
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	9302      	str	r3, [sp, #8]
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f850 	bl	8005f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ecc:	f000 f8de 	bl	800608c <prvAddNewTaskToReadyList>
 8005ed0:	e001      	b.n	8005ed6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ed6:	697b      	ldr	r3, [r7, #20]
	}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3728      	adds	r7, #40	@ 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	@ 0x30
 8005ee4:	af04      	add	r7, sp, #16
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe fda7 	bl	8004a48 <pvPortMalloc>
 8005efa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f02:	205c      	movs	r0, #92	@ 0x5c
 8005f04:	f7fe fda0 	bl	8004a48 <pvPortMalloc>
 8005f08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f16:	e005      	b.n	8005f24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f18:	6978      	ldr	r0, [r7, #20]
 8005f1a:	f7fe fe63 	bl	8004be4 <vPortFree>
 8005f1e:	e001      	b.n	8005f24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	2300      	movs	r3, #0
 8005f36:	9303      	str	r3, [sp, #12]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	9302      	str	r3, [sp, #8]
 8005f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f80e 	bl	8005f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f4e:	69f8      	ldr	r0, [r7, #28]
 8005f50:	f000 f89c 	bl	800608c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f54:	2301      	movs	r3, #1
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e002      	b.n	8005f60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f60:	69bb      	ldr	r3, [r7, #24]
	}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b088      	sub	sp, #32
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	461a      	mov	r2, r3
 8005f82:	21a5      	movs	r1, #165	@ 0xa5
 8005f84:	f001 f9e8 	bl	8007358 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f92:	3b01      	subs	r3, #1
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f023 0307 	bic.w	r3, r3, #7
 8005fa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	617b      	str	r3, [r7, #20]
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01f      	beq.n	800600a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e012      	b.n	8005ff6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	7819      	ldrb	r1, [r3, #0]
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	3334      	adds	r3, #52	@ 0x34
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b0f      	cmp	r3, #15
 8005ffa:	d9e9      	bls.n	8005fd0 <prvInitialiseNewTask+0x66>
 8005ffc:	e000      	b.n	8006000 <prvInitialiseNewTask+0x96>
			{
				break;
 8005ffe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006008:	e003      	b.n	8006012 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006014:	2b37      	cmp	r3, #55	@ 0x37
 8006016:	d901      	bls.n	800601c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006018:	2337      	movs	r3, #55	@ 0x37
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006020:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006026:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	2200      	movs	r2, #0
 800602c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe ff16 	bl	8004e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	3318      	adds	r3, #24
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe ff11 	bl	8004e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006056:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	2200      	movs	r2, #0
 800605c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	69b8      	ldr	r0, [r7, #24]
 800606c:	f7fe ff8e 	bl	8004f8c <pxPortInitialiseStack>
 8006070:	4602      	mov	r2, r0
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800607c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006082:	bf00      	nop
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006094:	f7ff f8a8 	bl	80051e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006098:	4b2d      	ldr	r3, [pc, #180]	@ (8006150 <prvAddNewTaskToReadyList+0xc4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	4a2c      	ldr	r2, [pc, #176]	@ (8006150 <prvAddNewTaskToReadyList+0xc4>)
 80060a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006154 <prvAddNewTaskToReadyList+0xc8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006154 <prvAddNewTaskToReadyList+0xc8>)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b0:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <prvAddNewTaskToReadyList+0xc4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d110      	bne.n	80060da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060b8:	f000 fc1e 	bl	80068f8 <prvInitialiseTaskLists>
 80060bc:	e00d      	b.n	80060da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060be:	4b26      	ldr	r3, [pc, #152]	@ (8006158 <prvAddNewTaskToReadyList+0xcc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060c6:	4b23      	ldr	r3, [pc, #140]	@ (8006154 <prvAddNewTaskToReadyList+0xc8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d802      	bhi.n	80060da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006154 <prvAddNewTaskToReadyList+0xc8>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060da:	4b20      	ldr	r3, [pc, #128]	@ (800615c <prvAddNewTaskToReadyList+0xd0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3301      	adds	r3, #1
 80060e0:	4a1e      	ldr	r2, [pc, #120]	@ (800615c <prvAddNewTaskToReadyList+0xd0>)
 80060e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060e4:	4b1d      	ldr	r3, [pc, #116]	@ (800615c <prvAddNewTaskToReadyList+0xd0>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <prvAddNewTaskToReadyList+0xd4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d903      	bls.n	8006100 <prvAddNewTaskToReadyList+0x74>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	4a18      	ldr	r2, [pc, #96]	@ (8006160 <prvAddNewTaskToReadyList+0xd4>)
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <prvAddNewTaskToReadyList+0xd8>)
 800610e:	441a      	add	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7fe feb1 	bl	8004e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800611c:	f7ff f896 	bl	800524c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006120:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <prvAddNewTaskToReadyList+0xcc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00e      	beq.n	8006146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006128:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <prvAddNewTaskToReadyList+0xc8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	429a      	cmp	r2, r3
 8006134:	d207      	bcs.n	8006146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006136:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <prvAddNewTaskToReadyList+0xdc>)
 8006138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200019ac 	.word	0x200019ac
 8006154:	200014d8 	.word	0x200014d8
 8006158:	200019b8 	.word	0x200019b8
 800615c:	200019c8 	.word	0x200019c8
 8006160:	200019b4 	.word	0x200019b4
 8006164:	200014dc 	.word	0x200014dc
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800617e:	4b14      	ldr	r3, [pc, #80]	@ (80061d0 <vTaskDelay+0x64>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <vTaskDelay+0x32>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	60bb      	str	r3, [r7, #8]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800619e:	f000 f883 	bl	80062a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061a2:	2100      	movs	r1, #0
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fcf3 	bl	8006b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061aa:	f000 f88b 	bl	80062c4 <xTaskResumeAll>
 80061ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d107      	bne.n	80061c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80061b6:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <vTaskDelay+0x68>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200019d4 	.word	0x200019d4
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	@ 0x28
 80061dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061e6:	463a      	mov	r2, r7
 80061e8:	1d39      	adds	r1, r7, #4
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fbf6 	bl	80049e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	9202      	str	r2, [sp, #8]
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	2300      	movs	r3, #0
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	2300      	movs	r3, #0
 8006204:	460a      	mov	r2, r1
 8006206:	4922      	ldr	r1, [pc, #136]	@ (8006290 <vTaskStartScheduler+0xb8>)
 8006208:	4822      	ldr	r0, [pc, #136]	@ (8006294 <vTaskStartScheduler+0xbc>)
 800620a:	f7ff fe09 	bl	8005e20 <xTaskCreateStatic>
 800620e:	4603      	mov	r3, r0
 8006210:	4a21      	ldr	r2, [pc, #132]	@ (8006298 <vTaskStartScheduler+0xc0>)
 8006212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006214:	4b20      	ldr	r3, [pc, #128]	@ (8006298 <vTaskStartScheduler+0xc0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e001      	b.n	8006226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800622c:	f000 fd04 	bl	8006c38 <xTimerCreateTimerTask>
 8006230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d116      	bne.n	8006266 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	613b      	str	r3, [r7, #16]
}
 800624a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800624c:	4b13      	ldr	r3, [pc, #76]	@ (800629c <vTaskStartScheduler+0xc4>)
 800624e:	f04f 32ff 	mov.w	r2, #4294967295
 8006252:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006254:	4b12      	ldr	r3, [pc, #72]	@ (80062a0 <vTaskStartScheduler+0xc8>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800625a:	4b12      	ldr	r3, [pc, #72]	@ (80062a4 <vTaskStartScheduler+0xcc>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006260:	f7fe ff1e 	bl	80050a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006264:	e00f      	b.n	8006286 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d10b      	bne.n	8006286 <vTaskStartScheduler+0xae>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60fb      	str	r3, [r7, #12]
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	e7fd      	b.n	8006282 <vTaskStartScheduler+0xaa>
}
 8006286:	bf00      	nop
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	08007c8c 	.word	0x08007c8c
 8006294:	080068c9 	.word	0x080068c9
 8006298:	200019d0 	.word	0x200019d0
 800629c:	200019cc 	.word	0x200019cc
 80062a0:	200019b8 	.word	0x200019b8
 80062a4:	200019b0 	.word	0x200019b0

080062a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062ac:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <vTaskSuspendAll+0x18>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	4a03      	ldr	r2, [pc, #12]	@ (80062c0 <vTaskSuspendAll+0x18>)
 80062b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062b6:	bf00      	nop
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	200019d4 	.word	0x200019d4

080062c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062d2:	4b42      	ldr	r3, [pc, #264]	@ (80063dc <xTaskResumeAll+0x118>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	603b      	str	r3, [r7, #0]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062f2:	f7fe ff79 	bl	80051e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062f6:	4b39      	ldr	r3, [pc, #228]	@ (80063dc <xTaskResumeAll+0x118>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	4a37      	ldr	r2, [pc, #220]	@ (80063dc <xTaskResumeAll+0x118>)
 80062fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006300:	4b36      	ldr	r3, [pc, #216]	@ (80063dc <xTaskResumeAll+0x118>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d162      	bne.n	80063ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006308:	4b35      	ldr	r3, [pc, #212]	@ (80063e0 <xTaskResumeAll+0x11c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d05e      	beq.n	80063ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006310:	e02f      	b.n	8006372 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006312:	4b34      	ldr	r3, [pc, #208]	@ (80063e4 <xTaskResumeAll+0x120>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3318      	adds	r3, #24
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fe0a 	bl	8004f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3304      	adds	r3, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe fe05 	bl	8004f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006332:	4b2d      	ldr	r3, [pc, #180]	@ (80063e8 <xTaskResumeAll+0x124>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d903      	bls.n	8006342 <xTaskResumeAll+0x7e>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	4a2a      	ldr	r2, [pc, #168]	@ (80063e8 <xTaskResumeAll+0x124>)
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4a27      	ldr	r2, [pc, #156]	@ (80063ec <xTaskResumeAll+0x128>)
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7fe fd90 	bl	8004e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006362:	4b23      	ldr	r3, [pc, #140]	@ (80063f0 <xTaskResumeAll+0x12c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	429a      	cmp	r2, r3
 800636a:	d302      	bcc.n	8006372 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800636c:	4b21      	ldr	r3, [pc, #132]	@ (80063f4 <xTaskResumeAll+0x130>)
 800636e:	2201      	movs	r2, #1
 8006370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006372:	4b1c      	ldr	r3, [pc, #112]	@ (80063e4 <xTaskResumeAll+0x120>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1cb      	bne.n	8006312 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006380:	f000 fb58 	bl	8006a34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006384:	4b1c      	ldr	r3, [pc, #112]	@ (80063f8 <xTaskResumeAll+0x134>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d010      	beq.n	80063b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006390:	f000 f846 	bl	8006420 <xTaskIncrementTick>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800639a:	4b16      	ldr	r3, [pc, #88]	@ (80063f4 <xTaskResumeAll+0x130>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1f1      	bne.n	8006390 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80063ac:	4b12      	ldr	r3, [pc, #72]	@ (80063f8 <xTaskResumeAll+0x134>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063b2:	4b10      	ldr	r3, [pc, #64]	@ (80063f4 <xTaskResumeAll+0x130>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063be:	4b0f      	ldr	r3, [pc, #60]	@ (80063fc <xTaskResumeAll+0x138>)
 80063c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063ce:	f7fe ff3d 	bl	800524c <vPortExitCritical>

	return xAlreadyYielded;
 80063d2:	68bb      	ldr	r3, [r7, #8]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	200019d4 	.word	0x200019d4
 80063e0:	200019ac 	.word	0x200019ac
 80063e4:	2000196c 	.word	0x2000196c
 80063e8:	200019b4 	.word	0x200019b4
 80063ec:	200014dc 	.word	0x200014dc
 80063f0:	200014d8 	.word	0x200014d8
 80063f4:	200019c0 	.word	0x200019c0
 80063f8:	200019bc 	.word	0x200019bc
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006406:	4b05      	ldr	r3, [pc, #20]	@ (800641c <xTaskGetTickCount+0x1c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800640c:	687b      	ldr	r3, [r7, #4]
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	200019b0 	.word	0x200019b0

08006420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800642a:	4b4f      	ldr	r3, [pc, #316]	@ (8006568 <xTaskIncrementTick+0x148>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 8090 	bne.w	8006554 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006434:	4b4d      	ldr	r3, [pc, #308]	@ (800656c <xTaskIncrementTick+0x14c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3301      	adds	r3, #1
 800643a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800643c:	4a4b      	ldr	r2, [pc, #300]	@ (800656c <xTaskIncrementTick+0x14c>)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d121      	bne.n	800648c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006448:	4b49      	ldr	r3, [pc, #292]	@ (8006570 <xTaskIncrementTick+0x150>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	603b      	str	r3, [r7, #0]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <xTaskIncrementTick+0x46>
 800646a:	4b41      	ldr	r3, [pc, #260]	@ (8006570 <xTaskIncrementTick+0x150>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	4b40      	ldr	r3, [pc, #256]	@ (8006574 <xTaskIncrementTick+0x154>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a3e      	ldr	r2, [pc, #248]	@ (8006570 <xTaskIncrementTick+0x150>)
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	4a3e      	ldr	r2, [pc, #248]	@ (8006574 <xTaskIncrementTick+0x154>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	4b3e      	ldr	r3, [pc, #248]	@ (8006578 <xTaskIncrementTick+0x158>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a3c      	ldr	r2, [pc, #240]	@ (8006578 <xTaskIncrementTick+0x158>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	f000 fad4 	bl	8006a34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800648c:	4b3b      	ldr	r3, [pc, #236]	@ (800657c <xTaskIncrementTick+0x15c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	429a      	cmp	r2, r3
 8006494:	d349      	bcc.n	800652a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006496:	4b36      	ldr	r3, [pc, #216]	@ (8006570 <xTaskIncrementTick+0x150>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a0:	4b36      	ldr	r3, [pc, #216]	@ (800657c <xTaskIncrementTick+0x15c>)
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295
 80064a6:	601a      	str	r2, [r3, #0]
					break;
 80064a8:	e03f      	b.n	800652a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064aa:	4b31      	ldr	r3, [pc, #196]	@ (8006570 <xTaskIncrementTick+0x150>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d203      	bcs.n	80064ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064c2:	4a2e      	ldr	r2, [pc, #184]	@ (800657c <xTaskIncrementTick+0x15c>)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064c8:	e02f      	b.n	800652a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fd32 	bl	8004f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	3318      	adds	r3, #24
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fd29 	bl	8004f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ea:	4b25      	ldr	r3, [pc, #148]	@ (8006580 <xTaskIncrementTick+0x160>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d903      	bls.n	80064fa <xTaskIncrementTick+0xda>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	4a22      	ldr	r2, [pc, #136]	@ (8006580 <xTaskIncrementTick+0x160>)
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4a1f      	ldr	r2, [pc, #124]	@ (8006584 <xTaskIncrementTick+0x164>)
 8006508:	441a      	add	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe fcb4 	bl	8004e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651a:	4b1b      	ldr	r3, [pc, #108]	@ (8006588 <xTaskIncrementTick+0x168>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006520:	429a      	cmp	r2, r3
 8006522:	d3b8      	bcc.n	8006496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006524:	2301      	movs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006528:	e7b5      	b.n	8006496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800652a:	4b17      	ldr	r3, [pc, #92]	@ (8006588 <xTaskIncrementTick+0x168>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006530:	4914      	ldr	r1, [pc, #80]	@ (8006584 <xTaskIncrementTick+0x164>)
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d901      	bls.n	8006546 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006546:	4b11      	ldr	r3, [pc, #68]	@ (800658c <xTaskIncrementTick+0x16c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800654e:	2301      	movs	r3, #1
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e004      	b.n	800655e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006554:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <xTaskIncrementTick+0x170>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3301      	adds	r3, #1
 800655a:	4a0d      	ldr	r2, [pc, #52]	@ (8006590 <xTaskIncrementTick+0x170>)
 800655c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800655e:	697b      	ldr	r3, [r7, #20]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	200019d4 	.word	0x200019d4
 800656c:	200019b0 	.word	0x200019b0
 8006570:	20001964 	.word	0x20001964
 8006574:	20001968 	.word	0x20001968
 8006578:	200019c4 	.word	0x200019c4
 800657c:	200019cc 	.word	0x200019cc
 8006580:	200019b4 	.word	0x200019b4
 8006584:	200014dc 	.word	0x200014dc
 8006588:	200014d8 	.word	0x200014d8
 800658c:	200019c0 	.word	0x200019c0
 8006590:	200019bc 	.word	0x200019bc

08006594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800659a:	4b28      	ldr	r3, [pc, #160]	@ (800663c <vTaskSwitchContext+0xa8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065a2:	4b27      	ldr	r3, [pc, #156]	@ (8006640 <vTaskSwitchContext+0xac>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065a8:	e042      	b.n	8006630 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80065aa:	4b25      	ldr	r3, [pc, #148]	@ (8006640 <vTaskSwitchContext+0xac>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b0:	4b24      	ldr	r3, [pc, #144]	@ (8006644 <vTaskSwitchContext+0xb0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	e011      	b.n	80065dc <vTaskSwitchContext+0x48>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <vTaskSwitchContext+0x3e>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b01      	subs	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	491a      	ldr	r1, [pc, #104]	@ (8006648 <vTaskSwitchContext+0xb4>)
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0e3      	beq.n	80065b8 <vTaskSwitchContext+0x24>
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4a13      	ldr	r2, [pc, #76]	@ (8006648 <vTaskSwitchContext+0xb4>)
 80065fc:	4413      	add	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	3308      	adds	r3, #8
 8006612:	429a      	cmp	r2, r3
 8006614:	d104      	bne.n	8006620 <vTaskSwitchContext+0x8c>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	4a09      	ldr	r2, [pc, #36]	@ (800664c <vTaskSwitchContext+0xb8>)
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4a06      	ldr	r2, [pc, #24]	@ (8006644 <vTaskSwitchContext+0xb0>)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	200019d4 	.word	0x200019d4
 8006640:	200019c0 	.word	0x200019c0
 8006644:	200019b4 	.word	0x200019b4
 8006648:	200014dc 	.word	0x200014dc
 800664c:	200014d8 	.word	0x200014d8

08006650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006678:	4b07      	ldr	r3, [pc, #28]	@ (8006698 <vTaskPlaceOnEventList+0x48>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3318      	adds	r3, #24
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fe fc20 	bl	8004ec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006686:	2101      	movs	r1, #1
 8006688:	6838      	ldr	r0, [r7, #0]
 800668a:	f000 fa81 	bl	8006b90 <prvAddCurrentTaskToDelayedList>
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	200014d8 	.word	0x200014d8

0800669c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	617b      	str	r3, [r7, #20]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066c6:	4b0a      	ldr	r3, [pc, #40]	@ (80066f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3318      	adds	r3, #24
 80066cc:	4619      	mov	r1, r3
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7fe fbd5 	bl	8004e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80066da:	f04f 33ff 	mov.w	r3, #4294967295
 80066de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	f000 fa54 	bl	8006b90 <prvAddCurrentTaskToDelayedList>
	}
 80066e8:	bf00      	nop
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	200014d8 	.word	0x200014d8

080066f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60fb      	str	r3, [r7, #12]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	3318      	adds	r3, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fc06 	bl	8004f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672c:	4b1d      	ldr	r3, [pc, #116]	@ (80067a4 <xTaskRemoveFromEventList+0xb0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11d      	bne.n	8006770 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3304      	adds	r3, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fbfd 	bl	8004f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006742:	4b19      	ldr	r3, [pc, #100]	@ (80067a8 <xTaskRemoveFromEventList+0xb4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d903      	bls.n	8006752 <xTaskRemoveFromEventList+0x5e>
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	4a16      	ldr	r2, [pc, #88]	@ (80067a8 <xTaskRemoveFromEventList+0xb4>)
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4a13      	ldr	r2, [pc, #76]	@ (80067ac <xTaskRemoveFromEventList+0xb8>)
 8006760:	441a      	add	r2, r3
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	3304      	adds	r3, #4
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f7fe fb88 	bl	8004e7e <vListInsertEnd>
 800676e:	e005      	b.n	800677c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	3318      	adds	r3, #24
 8006774:	4619      	mov	r1, r3
 8006776:	480e      	ldr	r0, [pc, #56]	@ (80067b0 <xTaskRemoveFromEventList+0xbc>)
 8006778:	f7fe fb81 	bl	8004e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006780:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <xTaskRemoveFromEventList+0xc0>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	429a      	cmp	r2, r3
 8006788:	d905      	bls.n	8006796 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800678e:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <xTaskRemoveFromEventList+0xc4>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	e001      	b.n	800679a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800679a:	697b      	ldr	r3, [r7, #20]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	200019d4 	.word	0x200019d4
 80067a8:	200019b4 	.word	0x200019b4
 80067ac:	200014dc 	.word	0x200014dc
 80067b0:	2000196c 	.word	0x2000196c
 80067b4:	200014d8 	.word	0x200014d8
 80067b8:	200019c0 	.word	0x200019c0

080067bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067c4:	4b06      	ldr	r3, [pc, #24]	@ (80067e0 <vTaskInternalSetTimeOutState+0x24>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067cc:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <vTaskInternalSetTimeOutState+0x28>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	605a      	str	r2, [r3, #4]
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	200019c4 	.word	0x200019c4
 80067e4:	200019b0 	.word	0x200019b0

080067e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	613b      	str	r3, [r7, #16]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10b      	bne.n	800682e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60fb      	str	r3, [r7, #12]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800682e:	f7fe fcdb 	bl	80051e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006832:	4b1d      	ldr	r3, [pc, #116]	@ (80068a8 <xTaskCheckForTimeOut+0xc0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d102      	bne.n	8006852 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	e023      	b.n	800689a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b15      	ldr	r3, [pc, #84]	@ (80068ac <xTaskCheckForTimeOut+0xc4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d007      	beq.n	800686e <xTaskCheckForTimeOut+0x86>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e015      	b.n	800689a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	429a      	cmp	r2, r3
 8006876:	d20b      	bcs.n	8006890 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ff99 	bl	80067bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	e004      	b.n	800689a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006896:	2301      	movs	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800689a:	f7fe fcd7 	bl	800524c <vPortExitCritical>

	return xReturn;
 800689e:	69fb      	ldr	r3, [r7, #28]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	200019b0 	.word	0x200019b0
 80068ac:	200019c4 	.word	0x200019c4

080068b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068b4:	4b03      	ldr	r3, [pc, #12]	@ (80068c4 <vTaskMissedYield+0x14>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
}
 80068ba:	bf00      	nop
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	200019c0 	.word	0x200019c0

080068c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d0:	f000 f852 	bl	8006978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068d4:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <prvIdleTask+0x28>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d9f9      	bls.n	80068d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068dc:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <prvIdleTask+0x2c>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068ec:	e7f0      	b.n	80068d0 <prvIdleTask+0x8>
 80068ee:	bf00      	nop
 80068f0:	200014dc 	.word	0x200014dc
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068fe:	2300      	movs	r3, #0
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	e00c      	b.n	800691e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4a12      	ldr	r2, [pc, #72]	@ (8006958 <prvInitialiseTaskLists+0x60>)
 8006910:	4413      	add	r3, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fa86 	bl	8004e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3301      	adds	r3, #1
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b37      	cmp	r3, #55	@ 0x37
 8006922:	d9ef      	bls.n	8006904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006924:	480d      	ldr	r0, [pc, #52]	@ (800695c <prvInitialiseTaskLists+0x64>)
 8006926:	f7fe fa7d 	bl	8004e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800692a:	480d      	ldr	r0, [pc, #52]	@ (8006960 <prvInitialiseTaskLists+0x68>)
 800692c:	f7fe fa7a 	bl	8004e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006930:	480c      	ldr	r0, [pc, #48]	@ (8006964 <prvInitialiseTaskLists+0x6c>)
 8006932:	f7fe fa77 	bl	8004e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006936:	480c      	ldr	r0, [pc, #48]	@ (8006968 <prvInitialiseTaskLists+0x70>)
 8006938:	f7fe fa74 	bl	8004e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800693c:	480b      	ldr	r0, [pc, #44]	@ (800696c <prvInitialiseTaskLists+0x74>)
 800693e:	f7fe fa71 	bl	8004e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006942:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <prvInitialiseTaskLists+0x78>)
 8006944:	4a05      	ldr	r2, [pc, #20]	@ (800695c <prvInitialiseTaskLists+0x64>)
 8006946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006948:	4b0a      	ldr	r3, [pc, #40]	@ (8006974 <prvInitialiseTaskLists+0x7c>)
 800694a:	4a05      	ldr	r2, [pc, #20]	@ (8006960 <prvInitialiseTaskLists+0x68>)
 800694c:	601a      	str	r2, [r3, #0]
}
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	200014dc 	.word	0x200014dc
 800695c:	2000193c 	.word	0x2000193c
 8006960:	20001950 	.word	0x20001950
 8006964:	2000196c 	.word	0x2000196c
 8006968:	20001980 	.word	0x20001980
 800696c:	20001998 	.word	0x20001998
 8006970:	20001964 	.word	0x20001964
 8006974:	20001968 	.word	0x20001968

08006978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800697e:	e019      	b.n	80069b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006980:	f7fe fc32 	bl	80051e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006984:	4b10      	ldr	r3, [pc, #64]	@ (80069c8 <prvCheckTasksWaitingTermination+0x50>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fad1 	bl	8004f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006996:	4b0d      	ldr	r3, [pc, #52]	@ (80069cc <prvCheckTasksWaitingTermination+0x54>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a0b      	ldr	r2, [pc, #44]	@ (80069cc <prvCheckTasksWaitingTermination+0x54>)
 800699e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a0:	4b0b      	ldr	r3, [pc, #44]	@ (80069d0 <prvCheckTasksWaitingTermination+0x58>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	4a0a      	ldr	r2, [pc, #40]	@ (80069d0 <prvCheckTasksWaitingTermination+0x58>)
 80069a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069aa:	f7fe fc4f 	bl	800524c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f810 	bl	80069d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069b4:	4b06      	ldr	r3, [pc, #24]	@ (80069d0 <prvCheckTasksWaitingTermination+0x58>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e1      	bne.n	8006980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20001980 	.word	0x20001980
 80069cc:	200019ac 	.word	0x200019ac
 80069d0:	20001994 	.word	0x20001994

080069d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d108      	bne.n	80069f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe f8fa 	bl	8004be4 <vPortFree>
				vPortFree( pxTCB );
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fe f8f7 	bl	8004be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069f6:	e019      	b.n	8006a2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d103      	bne.n	8006a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fe f8ee 	bl	8004be4 <vPortFree>
	}
 8006a08:	e010      	b.n	8006a2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d00b      	beq.n	8006a2c <prvDeleteTCB+0x58>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <prvDeleteTCB+0x54>
	}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <prvResetNextTaskUnblockTime+0x38>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a44:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <prvResetNextTaskUnblockTime+0x3c>)
 8006a46:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a4c:	e008      	b.n	8006a60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a4e:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <prvResetNextTaskUnblockTime+0x38>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	4a04      	ldr	r2, [pc, #16]	@ (8006a70 <prvResetNextTaskUnblockTime+0x3c>)
 8006a5e:	6013      	str	r3, [r2, #0]
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	20001964 	.word	0x20001964
 8006a70:	200019cc 	.word	0x200019cc

08006a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <xTaskGetSchedulerState+0x34>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a82:	2301      	movs	r3, #1
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	e008      	b.n	8006a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a88:	4b08      	ldr	r3, [pc, #32]	@ (8006aac <xTaskGetSchedulerState+0x38>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a90:	2302      	movs	r3, #2
 8006a92:	607b      	str	r3, [r7, #4]
 8006a94:	e001      	b.n	8006a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a96:	2300      	movs	r3, #0
 8006a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a9a:	687b      	ldr	r3, [r7, #4]
	}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	200019b8 	.word	0x200019b8
 8006aac:	200019d4 	.word	0x200019d4

08006ab0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d058      	beq.n	8006b78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b84 <xTaskPriorityDisinherit+0xd4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d00b      	beq.n	8006ae8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60fb      	str	r3, [r7, #12]
}
 8006ae2:	bf00      	nop
 8006ae4:	bf00      	nop
 8006ae6:	e7fd      	b.n	8006ae4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10b      	bne.n	8006b08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60bb      	str	r3, [r7, #8]
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	e7fd      	b.n	8006b04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0c:	1e5a      	subs	r2, r3, #1
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d02c      	beq.n	8006b78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d128      	bne.n	8006b78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fa04 	bl	8004f38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b48:	4b0f      	ldr	r3, [pc, #60]	@ (8006b88 <xTaskPriorityDisinherit+0xd8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d903      	bls.n	8006b58 <xTaskPriorityDisinherit+0xa8>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	4a0c      	ldr	r2, [pc, #48]	@ (8006b88 <xTaskPriorityDisinherit+0xd8>)
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4a09      	ldr	r2, [pc, #36]	@ (8006b8c <xTaskPriorityDisinherit+0xdc>)
 8006b66:	441a      	add	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe f985 	bl	8004e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b78:	697b      	ldr	r3, [r7, #20]
	}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	200014d8 	.word	0x200014d8
 8006b88:	200019b4 	.word	0x200019b4
 8006b8c:	200014dc 	.word	0x200014dc

08006b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b9a:	4b21      	ldr	r3, [pc, #132]	@ (8006c20 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ba0:	4b20      	ldr	r3, [pc, #128]	@ (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe f9c6 	bl	8004f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d10a      	bne.n	8006bca <prvAddCurrentTaskToDelayedList+0x3a>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bba:	4b1a      	ldr	r3, [pc, #104]	@ (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4819      	ldr	r0, [pc, #100]	@ (8006c28 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bc4:	f7fe f95b 	bl	8004e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bc8:	e026      	b.n	8006c18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4413      	add	r3, r2
 8006bd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bd2:	4b14      	ldr	r3, [pc, #80]	@ (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d209      	bcs.n	8006bf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006be2:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f7fe f969 	bl	8004ec6 <vListInsert>
}
 8006bf4:	e010      	b.n	8006c18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe f95f 	bl	8004ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c08:	4b0a      	ldr	r3, [pc, #40]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d202      	bcs.n	8006c18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c12:	4a08      	ldr	r2, [pc, #32]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6013      	str	r3, [r2, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	200019b0 	.word	0x200019b0
 8006c24:	200014d8 	.word	0x200014d8
 8006c28:	20001998 	.word	0x20001998
 8006c2c:	20001968 	.word	0x20001968
 8006c30:	20001964 	.word	0x20001964
 8006c34:	200019cc 	.word	0x200019cc

08006c38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c42:	f000 fb13 	bl	800726c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c46:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <xTimerCreateTimerTask+0x84>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d021      	beq.n	8006c92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c56:	1d3a      	adds	r2, r7, #4
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	f107 030c 	add.w	r3, r7, #12
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fed7 	bl	8004a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	9202      	str	r2, [sp, #8]
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	2302      	movs	r3, #2
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	2300      	movs	r3, #0
 8006c76:	460a      	mov	r2, r1
 8006c78:	4911      	ldr	r1, [pc, #68]	@ (8006cc0 <xTimerCreateTimerTask+0x88>)
 8006c7a:	4812      	ldr	r0, [pc, #72]	@ (8006cc4 <xTimerCreateTimerTask+0x8c>)
 8006c7c:	f7ff f8d0 	bl	8005e20 <xTaskCreateStatic>
 8006c80:	4603      	mov	r3, r0
 8006c82:	4a11      	ldr	r2, [pc, #68]	@ (8006cc8 <xTimerCreateTimerTask+0x90>)
 8006c84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c86:	4b10      	ldr	r3, [pc, #64]	@ (8006cc8 <xTimerCreateTimerTask+0x90>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10b      	bne.n	8006cb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	613b      	str	r3, [r7, #16]
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cb0:	697b      	ldr	r3, [r7, #20]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20001a08 	.word	0x20001a08
 8006cc0:	08007c94 	.word	0x08007c94
 8006cc4:	08006e05 	.word	0x08006e05
 8006cc8:	20001a0c 	.word	0x20001a0c

08006ccc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	@ 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10b      	bne.n	8006cfc <xTimerGenericCommand+0x30>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	623b      	str	r3, [r7, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	bf00      	nop
 8006cfa:	e7fd      	b.n	8006cf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cfc:	4b19      	ldr	r3, [pc, #100]	@ (8006d64 <xTimerGenericCommand+0x98>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d02a      	beq.n	8006d5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b05      	cmp	r3, #5
 8006d14:	dc18      	bgt.n	8006d48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d16:	f7ff fead 	bl	8006a74 <xTaskGetSchedulerState>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d109      	bne.n	8006d34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d20:	4b10      	ldr	r3, [pc, #64]	@ (8006d64 <xTimerGenericCommand+0x98>)
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	f107 0110 	add.w	r1, r7, #16
 8006d28:	2300      	movs	r3, #0
 8006d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2c:	f7fe fc88 	bl	8005640 <xQueueGenericSend>
 8006d30:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d32:	e012      	b.n	8006d5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d34:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <xTimerGenericCommand+0x98>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	f107 0110 	add.w	r1, r7, #16
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f7fe fc7e 	bl	8005640 <xQueueGenericSend>
 8006d44:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d46:	e008      	b.n	8006d5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d48:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <xTimerGenericCommand+0x98>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	f107 0110 	add.w	r1, r7, #16
 8006d50:	2300      	movs	r3, #0
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	f7fe fd76 	bl	8005844 <xQueueGenericSendFromISR>
 8006d58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3728      	adds	r7, #40	@ 0x28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20001a08 	.word	0x20001a08

08006d68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b23      	ldr	r3, [pc, #140]	@ (8006e00 <prvProcessExpiredTimer+0x98>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe f8d9 	bl	8004f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d023      	beq.n	8006ddc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	18d1      	adds	r1, r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	6978      	ldr	r0, [r7, #20]
 8006da2:	f000 f8d5 	bl	8006f50 <prvInsertTimerInActiveList>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d020      	beq.n	8006dee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	6978      	ldr	r0, [r7, #20]
 8006db8:	f7ff ff88 	bl	8006ccc <xTimerGenericCommand>
 8006dbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d114      	bne.n	8006dee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	6978      	ldr	r0, [r7, #20]
 8006df4:	4798      	blx	r3
}
 8006df6:	bf00      	nop
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20001a00 	.word	0x20001a00

08006e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e0c:	f107 0308 	add.w	r3, r7, #8
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 f859 	bl	8006ec8 <prvGetNextExpireTime>
 8006e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f805 	bl	8006e2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e22:	f000 f8d7 	bl	8006fd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e26:	bf00      	nop
 8006e28:	e7f0      	b.n	8006e0c <prvTimerTask+0x8>
	...

08006e2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e36:	f7ff fa37 	bl	80062a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e3a:	f107 0308 	add.w	r3, r7, #8
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f866 	bl	8006f10 <prvSampleTimeNow>
 8006e44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d130      	bne.n	8006eae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <prvProcessTimerOrBlockTask+0x3c>
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d806      	bhi.n	8006e68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e5a:	f7ff fa33 	bl	80062c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff ff81 	bl	8006d68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e66:	e024      	b.n	8006eb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e6e:	4b13      	ldr	r3, [pc, #76]	@ (8006ebc <prvProcessTimerOrBlockTask+0x90>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <prvProcessTimerOrBlockTask+0x50>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <prvProcessTimerOrBlockTask+0x52>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec0 <prvProcessTimerOrBlockTask+0x94>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f7fe ff93 	bl	8005db8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e92:	f7ff fa17 	bl	80062c4 <xTaskResumeAll>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e9c:	4b09      	ldr	r3, [pc, #36]	@ (8006ec4 <prvProcessTimerOrBlockTask+0x98>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
}
 8006eac:	e001      	b.n	8006eb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eae:	f7ff fa09 	bl	80062c4 <xTaskResumeAll>
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20001a04 	.word	0x20001a04
 8006ec0:	20001a08 	.word	0x20001a08
 8006ec4:	e000ed04 	.word	0xe000ed04

08006ec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <prvGetNextExpireTime+0x44>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <prvGetNextExpireTime+0x16>
 8006eda:	2201      	movs	r2, #1
 8006edc:	e000      	b.n	8006ee0 <prvGetNextExpireTime+0x18>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eec:	4b07      	ldr	r3, [pc, #28]	@ (8006f0c <prvGetNextExpireTime+0x44>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e001      	b.n	8006efc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20001a00 	.word	0x20001a00

08006f10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f18:	f7ff fa72 	bl	8006400 <xTaskGetTickCount>
 8006f1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f4c <prvSampleTimeNow+0x3c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d205      	bcs.n	8006f34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f28:	f000 f93a 	bl	80071a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e002      	b.n	8006f3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f3a:	4a04      	ldr	r2, [pc, #16]	@ (8006f4c <prvSampleTimeNow+0x3c>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20001a10 	.word	0x20001a10

08006f50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d812      	bhi.n	8006f9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	1ad2      	subs	r2, r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d302      	bcc.n	8006f8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f84:	2301      	movs	r3, #1
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e01b      	b.n	8006fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f8a:	4b10      	ldr	r3, [pc, #64]	@ (8006fcc <prvInsertTimerInActiveList+0x7c>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3304      	adds	r3, #4
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f7fd ff96 	bl	8004ec6 <vListInsert>
 8006f9a:	e012      	b.n	8006fc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d206      	bcs.n	8006fb2 <prvInsertTimerInActiveList+0x62>
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d302      	bcc.n	8006fb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e007      	b.n	8006fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fb2:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <prvInsertTimerInActiveList+0x80>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f7fd ff82 	bl	8004ec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fc2:	697b      	ldr	r3, [r7, #20]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20001a04 	.word	0x20001a04
 8006fd0:	20001a00 	.word	0x20001a00

08006fd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08e      	sub	sp, #56	@ 0x38
 8006fd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fda:	e0ce      	b.n	800717a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	da19      	bge.n	8007016 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fe2:	1d3b      	adds	r3, r7, #4
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10b      	bne.n	8007006 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	61fb      	str	r3, [r7, #28]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800700c:	6850      	ldr	r0, [r2, #4]
 800700e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007010:	6892      	ldr	r2, [r2, #8]
 8007012:	4611      	mov	r1, r2
 8007014:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f2c0 80ae 	blt.w	800717a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd ff82 	bl	8004f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007034:	463b      	mov	r3, r7
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff ff6a 	bl	8006f10 <prvSampleTimeNow>
 800703c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b09      	cmp	r3, #9
 8007042:	f200 8097 	bhi.w	8007174 <prvProcessReceivedCommands+0x1a0>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <prvProcessReceivedCommands+0x78>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007075 	.word	0x08007075
 8007050:	08007075 	.word	0x08007075
 8007054:	08007075 	.word	0x08007075
 8007058:	080070eb 	.word	0x080070eb
 800705c:	080070ff 	.word	0x080070ff
 8007060:	0800714b 	.word	0x0800714b
 8007064:	08007075 	.word	0x08007075
 8007068:	08007075 	.word	0x08007075
 800706c:	080070eb 	.word	0x080070eb
 8007070:	080070ff 	.word	0x080070ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007082:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	18d1      	adds	r1, r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007094:	f7ff ff5c 	bl	8006f50 <prvInsertTimerInActiveList>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d06c      	beq.n	8007178 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d061      	beq.n	8007178 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	441a      	add	r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070c6:	f7ff fe01 	bl	8006ccc <xTimerGenericCommand>
 80070ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d152      	bne.n	8007178 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	61bb      	str	r3, [r7, #24]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070fc:	e03d      	b.n	800717a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007104:	f043 0301 	orr.w	r3, r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	617b      	str	r3, [r7, #20]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	18d1      	adds	r1, r2, r3
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007144:	f7ff ff04 	bl	8006f50 <prvInsertTimerInActiveList>
					break;
 8007148:	e017      	b.n	800717a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800715a:	f7fd fd43 	bl	8004be4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800715e:	e00c      	b.n	800717a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	b2da      	uxtb	r2, r3
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007172:	e002      	b.n	800717a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007174:	bf00      	nop
 8007176:	e000      	b.n	800717a <prvProcessReceivedCommands+0x1a6>
					break;
 8007178:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800717a:	4b08      	ldr	r3, [pc, #32]	@ (800719c <prvProcessReceivedCommands+0x1c8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	1d39      	adds	r1, r7, #4
 8007180:	2200      	movs	r2, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fbfc 	bl	8005980 <xQueueReceive>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	f47f af26 	bne.w	8006fdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3730      	adds	r7, #48	@ 0x30
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20001a08 	.word	0x20001a08

080071a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071a6:	e049      	b.n	800723c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007264 <prvSwitchTimerLists+0xc4>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007264 <prvSwitchTimerLists+0xc4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fd feb9 	bl	8004f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d02f      	beq.n	800723c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d90e      	bls.n	800720c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007264 <prvSwitchTimerLists+0xc4>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f7fd fe5e 	bl	8004ec6 <vListInsert>
 800720a:	e017      	b.n	800723c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800720c:	2300      	movs	r3, #0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2300      	movs	r3, #0
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	2100      	movs	r1, #0
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fd58 	bl	8006ccc <xTimerGenericCommand>
 800721c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	603b      	str	r3, [r7, #0]
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	e7fd      	b.n	8007238 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800723c:	4b09      	ldr	r3, [pc, #36]	@ (8007264 <prvSwitchTimerLists+0xc4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1b0      	bne.n	80071a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007246:	4b07      	ldr	r3, [pc, #28]	@ (8007264 <prvSwitchTimerLists+0xc4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <prvSwitchTimerLists+0xc8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a04      	ldr	r2, [pc, #16]	@ (8007264 <prvSwitchTimerLists+0xc4>)
 8007252:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007254:	4a04      	ldr	r2, [pc, #16]	@ (8007268 <prvSwitchTimerLists+0xc8>)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6013      	str	r3, [r2, #0]
}
 800725a:	bf00      	nop
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20001a00 	.word	0x20001a00
 8007268:	20001a04 	.word	0x20001a04

0800726c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007272:	f7fd ffb9 	bl	80051e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007276:	4b15      	ldr	r3, [pc, #84]	@ (80072cc <prvCheckForValidListAndQueue+0x60>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d120      	bne.n	80072c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800727e:	4814      	ldr	r0, [pc, #80]	@ (80072d0 <prvCheckForValidListAndQueue+0x64>)
 8007280:	f7fd fdd0 	bl	8004e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007284:	4813      	ldr	r0, [pc, #76]	@ (80072d4 <prvCheckForValidListAndQueue+0x68>)
 8007286:	f7fd fdcd 	bl	8004e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800728a:	4b13      	ldr	r3, [pc, #76]	@ (80072d8 <prvCheckForValidListAndQueue+0x6c>)
 800728c:	4a10      	ldr	r2, [pc, #64]	@ (80072d0 <prvCheckForValidListAndQueue+0x64>)
 800728e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007290:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <prvCheckForValidListAndQueue+0x70>)
 8007292:	4a10      	ldr	r2, [pc, #64]	@ (80072d4 <prvCheckForValidListAndQueue+0x68>)
 8007294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007296:	2300      	movs	r3, #0
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	4b11      	ldr	r3, [pc, #68]	@ (80072e0 <prvCheckForValidListAndQueue+0x74>)
 800729c:	4a11      	ldr	r2, [pc, #68]	@ (80072e4 <prvCheckForValidListAndQueue+0x78>)
 800729e:	2110      	movs	r1, #16
 80072a0:	200a      	movs	r0, #10
 80072a2:	f7fe f92d 	bl	8005500 <xQueueGenericCreateStatic>
 80072a6:	4603      	mov	r3, r0
 80072a8:	4a08      	ldr	r2, [pc, #32]	@ (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072ac:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072b4:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	490b      	ldr	r1, [pc, #44]	@ (80072e8 <prvCheckForValidListAndQueue+0x7c>)
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fd52 	bl	8005d64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c0:	f7fd ffc4 	bl	800524c <vPortExitCritical>
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20001a08 	.word	0x20001a08
 80072d0:	200019d8 	.word	0x200019d8
 80072d4:	200019ec 	.word	0x200019ec
 80072d8:	20001a00 	.word	0x20001a00
 80072dc:	20001a04 	.word	0x20001a04
 80072e0:	20001ab4 	.word	0x20001ab4
 80072e4:	20001a14 	.word	0x20001a14
 80072e8:	08007c9c 	.word	0x08007c9c

080072ec <sniprintf>:
 80072ec:	b40c      	push	{r2, r3}
 80072ee:	b530      	push	{r4, r5, lr}
 80072f0:	4b18      	ldr	r3, [pc, #96]	@ (8007354 <sniprintf+0x68>)
 80072f2:	1e0c      	subs	r4, r1, #0
 80072f4:	681d      	ldr	r5, [r3, #0]
 80072f6:	b09d      	sub	sp, #116	@ 0x74
 80072f8:	da08      	bge.n	800730c <sniprintf+0x20>
 80072fa:	238b      	movs	r3, #139	@ 0x8b
 80072fc:	602b      	str	r3, [r5, #0]
 80072fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007302:	b01d      	add	sp, #116	@ 0x74
 8007304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007308:	b002      	add	sp, #8
 800730a:	4770      	bx	lr
 800730c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007310:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	931b      	str	r3, [sp, #108]	@ 0x6c
 800731a:	bf14      	ite	ne
 800731c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007320:	4623      	moveq	r3, r4
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800732a:	9002      	str	r0, [sp, #8]
 800732c:	9006      	str	r0, [sp, #24]
 800732e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007332:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007334:	ab21      	add	r3, sp, #132	@ 0x84
 8007336:	a902      	add	r1, sp, #8
 8007338:	4628      	mov	r0, r5
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	f000 f9a2 	bl	8007684 <_svfiprintf_r>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	bfbc      	itt	lt
 8007344:	238b      	movlt	r3, #139	@ 0x8b
 8007346:	602b      	strlt	r3, [r5, #0]
 8007348:	2c00      	cmp	r4, #0
 800734a:	d0da      	beq.n	8007302 <sniprintf+0x16>
 800734c:	9b02      	ldr	r3, [sp, #8]
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e7d6      	b.n	8007302 <sniprintf+0x16>
 8007354:	20000010 	.word	0x20000010

08007358 <memset>:
 8007358:	4402      	add	r2, r0
 800735a:	4603      	mov	r3, r0
 800735c:	4293      	cmp	r3, r2
 800735e:	d100      	bne.n	8007362 <memset+0xa>
 8007360:	4770      	bx	lr
 8007362:	f803 1b01 	strb.w	r1, [r3], #1
 8007366:	e7f9      	b.n	800735c <memset+0x4>

08007368 <__errno>:
 8007368:	4b01      	ldr	r3, [pc, #4]	@ (8007370 <__errno+0x8>)
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20000010 	.word	0x20000010

08007374 <__libc_init_array>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	4d0d      	ldr	r5, [pc, #52]	@ (80073ac <__libc_init_array+0x38>)
 8007378:	4c0d      	ldr	r4, [pc, #52]	@ (80073b0 <__libc_init_array+0x3c>)
 800737a:	1b64      	subs	r4, r4, r5
 800737c:	10a4      	asrs	r4, r4, #2
 800737e:	2600      	movs	r6, #0
 8007380:	42a6      	cmp	r6, r4
 8007382:	d109      	bne.n	8007398 <__libc_init_array+0x24>
 8007384:	4d0b      	ldr	r5, [pc, #44]	@ (80073b4 <__libc_init_array+0x40>)
 8007386:	4c0c      	ldr	r4, [pc, #48]	@ (80073b8 <__libc_init_array+0x44>)
 8007388:	f000 fc64 	bl	8007c54 <_init>
 800738c:	1b64      	subs	r4, r4, r5
 800738e:	10a4      	asrs	r4, r4, #2
 8007390:	2600      	movs	r6, #0
 8007392:	42a6      	cmp	r6, r4
 8007394:	d105      	bne.n	80073a2 <__libc_init_array+0x2e>
 8007396:	bd70      	pop	{r4, r5, r6, pc}
 8007398:	f855 3b04 	ldr.w	r3, [r5], #4
 800739c:	4798      	blx	r3
 800739e:	3601      	adds	r6, #1
 80073a0:	e7ee      	b.n	8007380 <__libc_init_array+0xc>
 80073a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a6:	4798      	blx	r3
 80073a8:	3601      	adds	r6, #1
 80073aa:	e7f2      	b.n	8007392 <__libc_init_array+0x1e>
 80073ac:	08007d4c 	.word	0x08007d4c
 80073b0:	08007d4c 	.word	0x08007d4c
 80073b4:	08007d4c 	.word	0x08007d4c
 80073b8:	08007d50 	.word	0x08007d50

080073bc <__retarget_lock_acquire_recursive>:
 80073bc:	4770      	bx	lr

080073be <__retarget_lock_release_recursive>:
 80073be:	4770      	bx	lr

080073c0 <memcpy>:
 80073c0:	440a      	add	r2, r1
 80073c2:	4291      	cmp	r1, r2
 80073c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c8:	d100      	bne.n	80073cc <memcpy+0xc>
 80073ca:	4770      	bx	lr
 80073cc:	b510      	push	{r4, lr}
 80073ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d6:	4291      	cmp	r1, r2
 80073d8:	d1f9      	bne.n	80073ce <memcpy+0xe>
 80073da:	bd10      	pop	{r4, pc}

080073dc <_free_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4605      	mov	r5, r0
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d041      	beq.n	8007468 <_free_r+0x8c>
 80073e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e8:	1f0c      	subs	r4, r1, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfb8      	it	lt
 80073ee:	18e4      	addlt	r4, r4, r3
 80073f0:	f000 f8e0 	bl	80075b4 <__malloc_lock>
 80073f4:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <_free_r+0x90>)
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	b933      	cbnz	r3, 8007408 <_free_r+0x2c>
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	6014      	str	r4, [r2, #0]
 80073fe:	4628      	mov	r0, r5
 8007400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007404:	f000 b8dc 	b.w	80075c0 <__malloc_unlock>
 8007408:	42a3      	cmp	r3, r4
 800740a:	d908      	bls.n	800741e <_free_r+0x42>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	1821      	adds	r1, r4, r0
 8007410:	428b      	cmp	r3, r1
 8007412:	bf01      	itttt	eq
 8007414:	6819      	ldreq	r1, [r3, #0]
 8007416:	685b      	ldreq	r3, [r3, #4]
 8007418:	1809      	addeq	r1, r1, r0
 800741a:	6021      	streq	r1, [r4, #0]
 800741c:	e7ed      	b.n	80073fa <_free_r+0x1e>
 800741e:	461a      	mov	r2, r3
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	b10b      	cbz	r3, 8007428 <_free_r+0x4c>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d9fa      	bls.n	800741e <_free_r+0x42>
 8007428:	6811      	ldr	r1, [r2, #0]
 800742a:	1850      	adds	r0, r2, r1
 800742c:	42a0      	cmp	r0, r4
 800742e:	d10b      	bne.n	8007448 <_free_r+0x6c>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	4401      	add	r1, r0
 8007434:	1850      	adds	r0, r2, r1
 8007436:	4283      	cmp	r3, r0
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	d1e0      	bne.n	80073fe <_free_r+0x22>
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	6053      	str	r3, [r2, #4]
 8007442:	4408      	add	r0, r1
 8007444:	6010      	str	r0, [r2, #0]
 8007446:	e7da      	b.n	80073fe <_free_r+0x22>
 8007448:	d902      	bls.n	8007450 <_free_r+0x74>
 800744a:	230c      	movs	r3, #12
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	e7d6      	b.n	80073fe <_free_r+0x22>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf04      	itt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	bf04      	itt	eq
 8007460:	1809      	addeq	r1, r1, r0
 8007462:	6021      	streq	r1, [r4, #0]
 8007464:	6054      	str	r4, [r2, #4]
 8007466:	e7ca      	b.n	80073fe <_free_r+0x22>
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	20001c48 	.word	0x20001c48

08007470 <sbrk_aligned>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	4e0f      	ldr	r6, [pc, #60]	@ (80074b0 <sbrk_aligned+0x40>)
 8007474:	460c      	mov	r4, r1
 8007476:	6831      	ldr	r1, [r6, #0]
 8007478:	4605      	mov	r5, r0
 800747a:	b911      	cbnz	r1, 8007482 <sbrk_aligned+0x12>
 800747c:	f000 fba4 	bl	8007bc8 <_sbrk_r>
 8007480:	6030      	str	r0, [r6, #0]
 8007482:	4621      	mov	r1, r4
 8007484:	4628      	mov	r0, r5
 8007486:	f000 fb9f 	bl	8007bc8 <_sbrk_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d103      	bne.n	8007496 <sbrk_aligned+0x26>
 800748e:	f04f 34ff 	mov.w	r4, #4294967295
 8007492:	4620      	mov	r0, r4
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	1cc4      	adds	r4, r0, #3
 8007498:	f024 0403 	bic.w	r4, r4, #3
 800749c:	42a0      	cmp	r0, r4
 800749e:	d0f8      	beq.n	8007492 <sbrk_aligned+0x22>
 80074a0:	1a21      	subs	r1, r4, r0
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 fb90 	bl	8007bc8 <_sbrk_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d1f2      	bne.n	8007492 <sbrk_aligned+0x22>
 80074ac:	e7ef      	b.n	800748e <sbrk_aligned+0x1e>
 80074ae:	bf00      	nop
 80074b0:	20001c44 	.word	0x20001c44

080074b4 <_malloc_r>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	1ccd      	adds	r5, r1, #3
 80074ba:	f025 0503 	bic.w	r5, r5, #3
 80074be:	3508      	adds	r5, #8
 80074c0:	2d0c      	cmp	r5, #12
 80074c2:	bf38      	it	cc
 80074c4:	250c      	movcc	r5, #12
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	4606      	mov	r6, r0
 80074ca:	db01      	blt.n	80074d0 <_malloc_r+0x1c>
 80074cc:	42a9      	cmp	r1, r5
 80074ce:	d904      	bls.n	80074da <_malloc_r+0x26>
 80074d0:	230c      	movs	r3, #12
 80074d2:	6033      	str	r3, [r6, #0]
 80074d4:	2000      	movs	r0, #0
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075b0 <_malloc_r+0xfc>
 80074de:	f000 f869 	bl	80075b4 <__malloc_lock>
 80074e2:	f8d8 3000 	ldr.w	r3, [r8]
 80074e6:	461c      	mov	r4, r3
 80074e8:	bb44      	cbnz	r4, 800753c <_malloc_r+0x88>
 80074ea:	4629      	mov	r1, r5
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ffbf 	bl	8007470 <sbrk_aligned>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	4604      	mov	r4, r0
 80074f6:	d158      	bne.n	80075aa <_malloc_r+0xf6>
 80074f8:	f8d8 4000 	ldr.w	r4, [r8]
 80074fc:	4627      	mov	r7, r4
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d143      	bne.n	800758a <_malloc_r+0xd6>
 8007502:	2c00      	cmp	r4, #0
 8007504:	d04b      	beq.n	800759e <_malloc_r+0xea>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	4639      	mov	r1, r7
 800750a:	4630      	mov	r0, r6
 800750c:	eb04 0903 	add.w	r9, r4, r3
 8007510:	f000 fb5a 	bl	8007bc8 <_sbrk_r>
 8007514:	4581      	cmp	r9, r0
 8007516:	d142      	bne.n	800759e <_malloc_r+0xea>
 8007518:	6821      	ldr	r1, [r4, #0]
 800751a:	1a6d      	subs	r5, r5, r1
 800751c:	4629      	mov	r1, r5
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ffa6 	bl	8007470 <sbrk_aligned>
 8007524:	3001      	adds	r0, #1
 8007526:	d03a      	beq.n	800759e <_malloc_r+0xea>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	442b      	add	r3, r5
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	f8d8 3000 	ldr.w	r3, [r8]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	bb62      	cbnz	r2, 8007590 <_malloc_r+0xdc>
 8007536:	f8c8 7000 	str.w	r7, [r8]
 800753a:	e00f      	b.n	800755c <_malloc_r+0xa8>
 800753c:	6822      	ldr	r2, [r4, #0]
 800753e:	1b52      	subs	r2, r2, r5
 8007540:	d420      	bmi.n	8007584 <_malloc_r+0xd0>
 8007542:	2a0b      	cmp	r2, #11
 8007544:	d917      	bls.n	8007576 <_malloc_r+0xc2>
 8007546:	1961      	adds	r1, r4, r5
 8007548:	42a3      	cmp	r3, r4
 800754a:	6025      	str	r5, [r4, #0]
 800754c:	bf18      	it	ne
 800754e:	6059      	strne	r1, [r3, #4]
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	bf08      	it	eq
 8007554:	f8c8 1000 	streq.w	r1, [r8]
 8007558:	5162      	str	r2, [r4, r5]
 800755a:	604b      	str	r3, [r1, #4]
 800755c:	4630      	mov	r0, r6
 800755e:	f000 f82f 	bl	80075c0 <__malloc_unlock>
 8007562:	f104 000b 	add.w	r0, r4, #11
 8007566:	1d23      	adds	r3, r4, #4
 8007568:	f020 0007 	bic.w	r0, r0, #7
 800756c:	1ac2      	subs	r2, r0, r3
 800756e:	bf1c      	itt	ne
 8007570:	1a1b      	subne	r3, r3, r0
 8007572:	50a3      	strne	r3, [r4, r2]
 8007574:	e7af      	b.n	80074d6 <_malloc_r+0x22>
 8007576:	6862      	ldr	r2, [r4, #4]
 8007578:	42a3      	cmp	r3, r4
 800757a:	bf0c      	ite	eq
 800757c:	f8c8 2000 	streq.w	r2, [r8]
 8007580:	605a      	strne	r2, [r3, #4]
 8007582:	e7eb      	b.n	800755c <_malloc_r+0xa8>
 8007584:	4623      	mov	r3, r4
 8007586:	6864      	ldr	r4, [r4, #4]
 8007588:	e7ae      	b.n	80074e8 <_malloc_r+0x34>
 800758a:	463c      	mov	r4, r7
 800758c:	687f      	ldr	r7, [r7, #4]
 800758e:	e7b6      	b.n	80074fe <_malloc_r+0x4a>
 8007590:	461a      	mov	r2, r3
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	42a3      	cmp	r3, r4
 8007596:	d1fb      	bne.n	8007590 <_malloc_r+0xdc>
 8007598:	2300      	movs	r3, #0
 800759a:	6053      	str	r3, [r2, #4]
 800759c:	e7de      	b.n	800755c <_malloc_r+0xa8>
 800759e:	230c      	movs	r3, #12
 80075a0:	6033      	str	r3, [r6, #0]
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 f80c 	bl	80075c0 <__malloc_unlock>
 80075a8:	e794      	b.n	80074d4 <_malloc_r+0x20>
 80075aa:	6005      	str	r5, [r0, #0]
 80075ac:	e7d6      	b.n	800755c <_malloc_r+0xa8>
 80075ae:	bf00      	nop
 80075b0:	20001c48 	.word	0x20001c48

080075b4 <__malloc_lock>:
 80075b4:	4801      	ldr	r0, [pc, #4]	@ (80075bc <__malloc_lock+0x8>)
 80075b6:	f7ff bf01 	b.w	80073bc <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	20001c40 	.word	0x20001c40

080075c0 <__malloc_unlock>:
 80075c0:	4801      	ldr	r0, [pc, #4]	@ (80075c8 <__malloc_unlock+0x8>)
 80075c2:	f7ff befc 	b.w	80073be <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	20001c40 	.word	0x20001c40

080075cc <__ssputs_r>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	688e      	ldr	r6, [r1, #8]
 80075d2:	461f      	mov	r7, r3
 80075d4:	42be      	cmp	r6, r7
 80075d6:	680b      	ldr	r3, [r1, #0]
 80075d8:	4682      	mov	sl, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	4690      	mov	r8, r2
 80075de:	d82d      	bhi.n	800763c <__ssputs_r+0x70>
 80075e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075e8:	d026      	beq.n	8007638 <__ssputs_r+0x6c>
 80075ea:	6965      	ldr	r5, [r4, #20]
 80075ec:	6909      	ldr	r1, [r1, #16]
 80075ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075f2:	eba3 0901 	sub.w	r9, r3, r1
 80075f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075fa:	1c7b      	adds	r3, r7, #1
 80075fc:	444b      	add	r3, r9
 80075fe:	106d      	asrs	r5, r5, #1
 8007600:	429d      	cmp	r5, r3
 8007602:	bf38      	it	cc
 8007604:	461d      	movcc	r5, r3
 8007606:	0553      	lsls	r3, r2, #21
 8007608:	d527      	bpl.n	800765a <__ssputs_r+0x8e>
 800760a:	4629      	mov	r1, r5
 800760c:	f7ff ff52 	bl	80074b4 <_malloc_r>
 8007610:	4606      	mov	r6, r0
 8007612:	b360      	cbz	r0, 800766e <__ssputs_r+0xa2>
 8007614:	6921      	ldr	r1, [r4, #16]
 8007616:	464a      	mov	r2, r9
 8007618:	f7ff fed2 	bl	80073c0 <memcpy>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	6126      	str	r6, [r4, #16]
 800762a:	6165      	str	r5, [r4, #20]
 800762c:	444e      	add	r6, r9
 800762e:	eba5 0509 	sub.w	r5, r5, r9
 8007632:	6026      	str	r6, [r4, #0]
 8007634:	60a5      	str	r5, [r4, #8]
 8007636:	463e      	mov	r6, r7
 8007638:	42be      	cmp	r6, r7
 800763a:	d900      	bls.n	800763e <__ssputs_r+0x72>
 800763c:	463e      	mov	r6, r7
 800763e:	6820      	ldr	r0, [r4, #0]
 8007640:	4632      	mov	r2, r6
 8007642:	4641      	mov	r1, r8
 8007644:	f000 faa6 	bl	8007b94 <memmove>
 8007648:	68a3      	ldr	r3, [r4, #8]
 800764a:	1b9b      	subs	r3, r3, r6
 800764c:	60a3      	str	r3, [r4, #8]
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	4433      	add	r3, r6
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	2000      	movs	r0, #0
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	462a      	mov	r2, r5
 800765c:	f000 fac4 	bl	8007be8 <_realloc_r>
 8007660:	4606      	mov	r6, r0
 8007662:	2800      	cmp	r0, #0
 8007664:	d1e0      	bne.n	8007628 <__ssputs_r+0x5c>
 8007666:	6921      	ldr	r1, [r4, #16]
 8007668:	4650      	mov	r0, sl
 800766a:	f7ff feb7 	bl	80073dc <_free_r>
 800766e:	230c      	movs	r3, #12
 8007670:	f8ca 3000 	str.w	r3, [sl]
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	e7e9      	b.n	8007656 <__ssputs_r+0x8a>
	...

08007684 <_svfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	4698      	mov	r8, r3
 800768a:	898b      	ldrh	r3, [r1, #12]
 800768c:	061b      	lsls	r3, r3, #24
 800768e:	b09d      	sub	sp, #116	@ 0x74
 8007690:	4607      	mov	r7, r0
 8007692:	460d      	mov	r5, r1
 8007694:	4614      	mov	r4, r2
 8007696:	d510      	bpl.n	80076ba <_svfiprintf_r+0x36>
 8007698:	690b      	ldr	r3, [r1, #16]
 800769a:	b973      	cbnz	r3, 80076ba <_svfiprintf_r+0x36>
 800769c:	2140      	movs	r1, #64	@ 0x40
 800769e:	f7ff ff09 	bl	80074b4 <_malloc_r>
 80076a2:	6028      	str	r0, [r5, #0]
 80076a4:	6128      	str	r0, [r5, #16]
 80076a6:	b930      	cbnz	r0, 80076b6 <_svfiprintf_r+0x32>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	b01d      	add	sp, #116	@ 0x74
 80076b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	2340      	movs	r3, #64	@ 0x40
 80076b8:	616b      	str	r3, [r5, #20]
 80076ba:	2300      	movs	r3, #0
 80076bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076be:	2320      	movs	r3, #32
 80076c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c8:	2330      	movs	r3, #48	@ 0x30
 80076ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007868 <_svfiprintf_r+0x1e4>
 80076ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076d2:	f04f 0901 	mov.w	r9, #1
 80076d6:	4623      	mov	r3, r4
 80076d8:	469a      	mov	sl, r3
 80076da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076de:	b10a      	cbz	r2, 80076e4 <_svfiprintf_r+0x60>
 80076e0:	2a25      	cmp	r2, #37	@ 0x25
 80076e2:	d1f9      	bne.n	80076d8 <_svfiprintf_r+0x54>
 80076e4:	ebba 0b04 	subs.w	fp, sl, r4
 80076e8:	d00b      	beq.n	8007702 <_svfiprintf_r+0x7e>
 80076ea:	465b      	mov	r3, fp
 80076ec:	4622      	mov	r2, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	4638      	mov	r0, r7
 80076f2:	f7ff ff6b 	bl	80075cc <__ssputs_r>
 80076f6:	3001      	adds	r0, #1
 80076f8:	f000 80a7 	beq.w	800784a <_svfiprintf_r+0x1c6>
 80076fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076fe:	445a      	add	r2, fp
 8007700:	9209      	str	r2, [sp, #36]	@ 0x24
 8007702:	f89a 3000 	ldrb.w	r3, [sl]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 809f 	beq.w	800784a <_svfiprintf_r+0x1c6>
 800770c:	2300      	movs	r3, #0
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007716:	f10a 0a01 	add.w	sl, sl, #1
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	9307      	str	r3, [sp, #28]
 800771e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007722:	931a      	str	r3, [sp, #104]	@ 0x68
 8007724:	4654      	mov	r4, sl
 8007726:	2205      	movs	r2, #5
 8007728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772c:	484e      	ldr	r0, [pc, #312]	@ (8007868 <_svfiprintf_r+0x1e4>)
 800772e:	f7f8 fd4f 	bl	80001d0 <memchr>
 8007732:	9a04      	ldr	r2, [sp, #16]
 8007734:	b9d8      	cbnz	r0, 800776e <_svfiprintf_r+0xea>
 8007736:	06d0      	lsls	r0, r2, #27
 8007738:	bf44      	itt	mi
 800773a:	2320      	movmi	r3, #32
 800773c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007740:	0711      	lsls	r1, r2, #28
 8007742:	bf44      	itt	mi
 8007744:	232b      	movmi	r3, #43	@ 0x2b
 8007746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800774a:	f89a 3000 	ldrb.w	r3, [sl]
 800774e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007750:	d015      	beq.n	800777e <_svfiprintf_r+0xfa>
 8007752:	9a07      	ldr	r2, [sp, #28]
 8007754:	4654      	mov	r4, sl
 8007756:	2000      	movs	r0, #0
 8007758:	f04f 0c0a 	mov.w	ip, #10
 800775c:	4621      	mov	r1, r4
 800775e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007762:	3b30      	subs	r3, #48	@ 0x30
 8007764:	2b09      	cmp	r3, #9
 8007766:	d94b      	bls.n	8007800 <_svfiprintf_r+0x17c>
 8007768:	b1b0      	cbz	r0, 8007798 <_svfiprintf_r+0x114>
 800776a:	9207      	str	r2, [sp, #28]
 800776c:	e014      	b.n	8007798 <_svfiprintf_r+0x114>
 800776e:	eba0 0308 	sub.w	r3, r0, r8
 8007772:	fa09 f303 	lsl.w	r3, r9, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	46a2      	mov	sl, r4
 800777c:	e7d2      	b.n	8007724 <_svfiprintf_r+0xa0>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	1d19      	adds	r1, r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	9103      	str	r1, [sp, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bfbb      	ittet	lt
 800778a:	425b      	neglt	r3, r3
 800778c:	f042 0202 	orrlt.w	r2, r2, #2
 8007790:	9307      	strge	r3, [sp, #28]
 8007792:	9307      	strlt	r3, [sp, #28]
 8007794:	bfb8      	it	lt
 8007796:	9204      	strlt	r2, [sp, #16]
 8007798:	7823      	ldrb	r3, [r4, #0]
 800779a:	2b2e      	cmp	r3, #46	@ 0x2e
 800779c:	d10a      	bne.n	80077b4 <_svfiprintf_r+0x130>
 800779e:	7863      	ldrb	r3, [r4, #1]
 80077a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a2:	d132      	bne.n	800780a <_svfiprintf_r+0x186>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	1d1a      	adds	r2, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	9203      	str	r2, [sp, #12]
 80077ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077b0:	3402      	adds	r4, #2
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007878 <_svfiprintf_r+0x1f4>
 80077b8:	7821      	ldrb	r1, [r4, #0]
 80077ba:	2203      	movs	r2, #3
 80077bc:	4650      	mov	r0, sl
 80077be:	f7f8 fd07 	bl	80001d0 <memchr>
 80077c2:	b138      	cbz	r0, 80077d4 <_svfiprintf_r+0x150>
 80077c4:	9b04      	ldr	r3, [sp, #16]
 80077c6:	eba0 000a 	sub.w	r0, r0, sl
 80077ca:	2240      	movs	r2, #64	@ 0x40
 80077cc:	4082      	lsls	r2, r0
 80077ce:	4313      	orrs	r3, r2
 80077d0:	3401      	adds	r4, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	4824      	ldr	r0, [pc, #144]	@ (800786c <_svfiprintf_r+0x1e8>)
 80077da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077de:	2206      	movs	r2, #6
 80077e0:	f7f8 fcf6 	bl	80001d0 <memchr>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d036      	beq.n	8007856 <_svfiprintf_r+0x1d2>
 80077e8:	4b21      	ldr	r3, [pc, #132]	@ (8007870 <_svfiprintf_r+0x1ec>)
 80077ea:	bb1b      	cbnz	r3, 8007834 <_svfiprintf_r+0x1b0>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	3307      	adds	r3, #7
 80077f0:	f023 0307 	bic.w	r3, r3, #7
 80077f4:	3308      	adds	r3, #8
 80077f6:	9303      	str	r3, [sp, #12]
 80077f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077fa:	4433      	add	r3, r6
 80077fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fe:	e76a      	b.n	80076d6 <_svfiprintf_r+0x52>
 8007800:	fb0c 3202 	mla	r2, ip, r2, r3
 8007804:	460c      	mov	r4, r1
 8007806:	2001      	movs	r0, #1
 8007808:	e7a8      	b.n	800775c <_svfiprintf_r+0xd8>
 800780a:	2300      	movs	r3, #0
 800780c:	3401      	adds	r4, #1
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	4619      	mov	r1, r3
 8007812:	f04f 0c0a 	mov.w	ip, #10
 8007816:	4620      	mov	r0, r4
 8007818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781c:	3a30      	subs	r2, #48	@ 0x30
 800781e:	2a09      	cmp	r2, #9
 8007820:	d903      	bls.n	800782a <_svfiprintf_r+0x1a6>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0c6      	beq.n	80077b4 <_svfiprintf_r+0x130>
 8007826:	9105      	str	r1, [sp, #20]
 8007828:	e7c4      	b.n	80077b4 <_svfiprintf_r+0x130>
 800782a:	fb0c 2101 	mla	r1, ip, r1, r2
 800782e:	4604      	mov	r4, r0
 8007830:	2301      	movs	r3, #1
 8007832:	e7f0      	b.n	8007816 <_svfiprintf_r+0x192>
 8007834:	ab03      	add	r3, sp, #12
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	462a      	mov	r2, r5
 800783a:	4b0e      	ldr	r3, [pc, #56]	@ (8007874 <_svfiprintf_r+0x1f0>)
 800783c:	a904      	add	r1, sp, #16
 800783e:	4638      	mov	r0, r7
 8007840:	f3af 8000 	nop.w
 8007844:	1c42      	adds	r2, r0, #1
 8007846:	4606      	mov	r6, r0
 8007848:	d1d6      	bne.n	80077f8 <_svfiprintf_r+0x174>
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	065b      	lsls	r3, r3, #25
 800784e:	f53f af2d 	bmi.w	80076ac <_svfiprintf_r+0x28>
 8007852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007854:	e72c      	b.n	80076b0 <_svfiprintf_r+0x2c>
 8007856:	ab03      	add	r3, sp, #12
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	462a      	mov	r2, r5
 800785c:	4b05      	ldr	r3, [pc, #20]	@ (8007874 <_svfiprintf_r+0x1f0>)
 800785e:	a904      	add	r1, sp, #16
 8007860:	4638      	mov	r0, r7
 8007862:	f000 f879 	bl	8007958 <_printf_i>
 8007866:	e7ed      	b.n	8007844 <_svfiprintf_r+0x1c0>
 8007868:	08007d10 	.word	0x08007d10
 800786c:	08007d1a 	.word	0x08007d1a
 8007870:	00000000 	.word	0x00000000
 8007874:	080075cd 	.word	0x080075cd
 8007878:	08007d16 	.word	0x08007d16

0800787c <_printf_common>:
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	4616      	mov	r6, r2
 8007882:	4698      	mov	r8, r3
 8007884:	688a      	ldr	r2, [r1, #8]
 8007886:	690b      	ldr	r3, [r1, #16]
 8007888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800788c:	4293      	cmp	r3, r2
 800788e:	bfb8      	it	lt
 8007890:	4613      	movlt	r3, r2
 8007892:	6033      	str	r3, [r6, #0]
 8007894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007898:	4607      	mov	r7, r0
 800789a:	460c      	mov	r4, r1
 800789c:	b10a      	cbz	r2, 80078a2 <_printf_common+0x26>
 800789e:	3301      	adds	r3, #1
 80078a0:	6033      	str	r3, [r6, #0]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	0699      	lsls	r1, r3, #26
 80078a6:	bf42      	ittt	mi
 80078a8:	6833      	ldrmi	r3, [r6, #0]
 80078aa:	3302      	addmi	r3, #2
 80078ac:	6033      	strmi	r3, [r6, #0]
 80078ae:	6825      	ldr	r5, [r4, #0]
 80078b0:	f015 0506 	ands.w	r5, r5, #6
 80078b4:	d106      	bne.n	80078c4 <_printf_common+0x48>
 80078b6:	f104 0a19 	add.w	sl, r4, #25
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	6832      	ldr	r2, [r6, #0]
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	42ab      	cmp	r3, r5
 80078c2:	dc26      	bgt.n	8007912 <_printf_common+0x96>
 80078c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	3b00      	subs	r3, #0
 80078cc:	bf18      	it	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	0692      	lsls	r2, r2, #26
 80078d2:	d42b      	bmi.n	800792c <_printf_common+0xb0>
 80078d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078d8:	4641      	mov	r1, r8
 80078da:	4638      	mov	r0, r7
 80078dc:	47c8      	blx	r9
 80078de:	3001      	adds	r0, #1
 80078e0:	d01e      	beq.n	8007920 <_printf_common+0xa4>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	6922      	ldr	r2, [r4, #16]
 80078e6:	f003 0306 	and.w	r3, r3, #6
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	bf02      	ittt	eq
 80078ee:	68e5      	ldreq	r5, [r4, #12]
 80078f0:	6833      	ldreq	r3, [r6, #0]
 80078f2:	1aed      	subeq	r5, r5, r3
 80078f4:	68a3      	ldr	r3, [r4, #8]
 80078f6:	bf0c      	ite	eq
 80078f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078fc:	2500      	movne	r5, #0
 80078fe:	4293      	cmp	r3, r2
 8007900:	bfc4      	itt	gt
 8007902:	1a9b      	subgt	r3, r3, r2
 8007904:	18ed      	addgt	r5, r5, r3
 8007906:	2600      	movs	r6, #0
 8007908:	341a      	adds	r4, #26
 800790a:	42b5      	cmp	r5, r6
 800790c:	d11a      	bne.n	8007944 <_printf_common+0xc8>
 800790e:	2000      	movs	r0, #0
 8007910:	e008      	b.n	8007924 <_printf_common+0xa8>
 8007912:	2301      	movs	r3, #1
 8007914:	4652      	mov	r2, sl
 8007916:	4641      	mov	r1, r8
 8007918:	4638      	mov	r0, r7
 800791a:	47c8      	blx	r9
 800791c:	3001      	adds	r0, #1
 800791e:	d103      	bne.n	8007928 <_printf_common+0xac>
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007928:	3501      	adds	r5, #1
 800792a:	e7c6      	b.n	80078ba <_printf_common+0x3e>
 800792c:	18e1      	adds	r1, r4, r3
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	2030      	movs	r0, #48	@ 0x30
 8007932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007936:	4422      	add	r2, r4
 8007938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800793c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007940:	3302      	adds	r3, #2
 8007942:	e7c7      	b.n	80078d4 <_printf_common+0x58>
 8007944:	2301      	movs	r3, #1
 8007946:	4622      	mov	r2, r4
 8007948:	4641      	mov	r1, r8
 800794a:	4638      	mov	r0, r7
 800794c:	47c8      	blx	r9
 800794e:	3001      	adds	r0, #1
 8007950:	d0e6      	beq.n	8007920 <_printf_common+0xa4>
 8007952:	3601      	adds	r6, #1
 8007954:	e7d9      	b.n	800790a <_printf_common+0x8e>
	...

08007958 <_printf_i>:
 8007958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	7e0f      	ldrb	r7, [r1, #24]
 800795e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007960:	2f78      	cmp	r7, #120	@ 0x78
 8007962:	4691      	mov	r9, r2
 8007964:	4680      	mov	r8, r0
 8007966:	460c      	mov	r4, r1
 8007968:	469a      	mov	sl, r3
 800796a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800796e:	d807      	bhi.n	8007980 <_printf_i+0x28>
 8007970:	2f62      	cmp	r7, #98	@ 0x62
 8007972:	d80a      	bhi.n	800798a <_printf_i+0x32>
 8007974:	2f00      	cmp	r7, #0
 8007976:	f000 80d1 	beq.w	8007b1c <_printf_i+0x1c4>
 800797a:	2f58      	cmp	r7, #88	@ 0x58
 800797c:	f000 80b8 	beq.w	8007af0 <_printf_i+0x198>
 8007980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007988:	e03a      	b.n	8007a00 <_printf_i+0xa8>
 800798a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800798e:	2b15      	cmp	r3, #21
 8007990:	d8f6      	bhi.n	8007980 <_printf_i+0x28>
 8007992:	a101      	add	r1, pc, #4	@ (adr r1, 8007998 <_printf_i+0x40>)
 8007994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007998:	080079f1 	.word	0x080079f1
 800799c:	08007a05 	.word	0x08007a05
 80079a0:	08007981 	.word	0x08007981
 80079a4:	08007981 	.word	0x08007981
 80079a8:	08007981 	.word	0x08007981
 80079ac:	08007981 	.word	0x08007981
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007981 	.word	0x08007981
 80079b8:	08007981 	.word	0x08007981
 80079bc:	08007981 	.word	0x08007981
 80079c0:	08007981 	.word	0x08007981
 80079c4:	08007b03 	.word	0x08007b03
 80079c8:	08007a2f 	.word	0x08007a2f
 80079cc:	08007abd 	.word	0x08007abd
 80079d0:	08007981 	.word	0x08007981
 80079d4:	08007981 	.word	0x08007981
 80079d8:	08007b25 	.word	0x08007b25
 80079dc:	08007981 	.word	0x08007981
 80079e0:	08007a2f 	.word	0x08007a2f
 80079e4:	08007981 	.word	0x08007981
 80079e8:	08007981 	.word	0x08007981
 80079ec:	08007ac5 	.word	0x08007ac5
 80079f0:	6833      	ldr	r3, [r6, #0]
 80079f2:	1d1a      	adds	r2, r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6032      	str	r2, [r6, #0]
 80079f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a00:	2301      	movs	r3, #1
 8007a02:	e09c      	b.n	8007b3e <_printf_i+0x1e6>
 8007a04:	6833      	ldr	r3, [r6, #0]
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	1d19      	adds	r1, r3, #4
 8007a0a:	6031      	str	r1, [r6, #0]
 8007a0c:	0606      	lsls	r6, r0, #24
 8007a0e:	d501      	bpl.n	8007a14 <_printf_i+0xbc>
 8007a10:	681d      	ldr	r5, [r3, #0]
 8007a12:	e003      	b.n	8007a1c <_printf_i+0xc4>
 8007a14:	0645      	lsls	r5, r0, #25
 8007a16:	d5fb      	bpl.n	8007a10 <_printf_i+0xb8>
 8007a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a1c:	2d00      	cmp	r5, #0
 8007a1e:	da03      	bge.n	8007a28 <_printf_i+0xd0>
 8007a20:	232d      	movs	r3, #45	@ 0x2d
 8007a22:	426d      	negs	r5, r5
 8007a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a28:	4858      	ldr	r0, [pc, #352]	@ (8007b8c <_printf_i+0x234>)
 8007a2a:	230a      	movs	r3, #10
 8007a2c:	e011      	b.n	8007a52 <_printf_i+0xfa>
 8007a2e:	6821      	ldr	r1, [r4, #0]
 8007a30:	6833      	ldr	r3, [r6, #0]
 8007a32:	0608      	lsls	r0, r1, #24
 8007a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a38:	d402      	bmi.n	8007a40 <_printf_i+0xe8>
 8007a3a:	0649      	lsls	r1, r1, #25
 8007a3c:	bf48      	it	mi
 8007a3e:	b2ad      	uxthmi	r5, r5
 8007a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a42:	4852      	ldr	r0, [pc, #328]	@ (8007b8c <_printf_i+0x234>)
 8007a44:	6033      	str	r3, [r6, #0]
 8007a46:	bf14      	ite	ne
 8007a48:	230a      	movne	r3, #10
 8007a4a:	2308      	moveq	r3, #8
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a52:	6866      	ldr	r6, [r4, #4]
 8007a54:	60a6      	str	r6, [r4, #8]
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	db05      	blt.n	8007a66 <_printf_i+0x10e>
 8007a5a:	6821      	ldr	r1, [r4, #0]
 8007a5c:	432e      	orrs	r6, r5
 8007a5e:	f021 0104 	bic.w	r1, r1, #4
 8007a62:	6021      	str	r1, [r4, #0]
 8007a64:	d04b      	beq.n	8007afe <_printf_i+0x1a6>
 8007a66:	4616      	mov	r6, r2
 8007a68:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a6c:	fb03 5711 	mls	r7, r3, r1, r5
 8007a70:	5dc7      	ldrb	r7, [r0, r7]
 8007a72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a76:	462f      	mov	r7, r5
 8007a78:	42bb      	cmp	r3, r7
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	d9f4      	bls.n	8007a68 <_printf_i+0x110>
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d10b      	bne.n	8007a9a <_printf_i+0x142>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	07df      	lsls	r7, r3, #31
 8007a86:	d508      	bpl.n	8007a9a <_printf_i+0x142>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	6861      	ldr	r1, [r4, #4]
 8007a8c:	4299      	cmp	r1, r3
 8007a8e:	bfde      	ittt	le
 8007a90:	2330      	movle	r3, #48	@ 0x30
 8007a92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a9a:	1b92      	subs	r2, r2, r6
 8007a9c:	6122      	str	r2, [r4, #16]
 8007a9e:	f8cd a000 	str.w	sl, [sp]
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	aa03      	add	r2, sp, #12
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	f7ff fee7 	bl	800787c <_printf_common>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d14a      	bne.n	8007b48 <_printf_i+0x1f0>
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab6:	b004      	add	sp, #16
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	f043 0320 	orr.w	r3, r3, #32
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	4832      	ldr	r0, [pc, #200]	@ (8007b90 <_printf_i+0x238>)
 8007ac6:	2778      	movs	r7, #120	@ 0x78
 8007ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	6831      	ldr	r1, [r6, #0]
 8007ad0:	061f      	lsls	r7, r3, #24
 8007ad2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ad6:	d402      	bmi.n	8007ade <_printf_i+0x186>
 8007ad8:	065f      	lsls	r7, r3, #25
 8007ada:	bf48      	it	mi
 8007adc:	b2ad      	uxthmi	r5, r5
 8007ade:	6031      	str	r1, [r6, #0]
 8007ae0:	07d9      	lsls	r1, r3, #31
 8007ae2:	bf44      	itt	mi
 8007ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae8:	6023      	strmi	r3, [r4, #0]
 8007aea:	b11d      	cbz	r5, 8007af4 <_printf_i+0x19c>
 8007aec:	2310      	movs	r3, #16
 8007aee:	e7ad      	b.n	8007a4c <_printf_i+0xf4>
 8007af0:	4826      	ldr	r0, [pc, #152]	@ (8007b8c <_printf_i+0x234>)
 8007af2:	e7e9      	b.n	8007ac8 <_printf_i+0x170>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	f023 0320 	bic.w	r3, r3, #32
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	e7f6      	b.n	8007aec <_printf_i+0x194>
 8007afe:	4616      	mov	r6, r2
 8007b00:	e7bd      	b.n	8007a7e <_printf_i+0x126>
 8007b02:	6833      	ldr	r3, [r6, #0]
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	6961      	ldr	r1, [r4, #20]
 8007b08:	1d18      	adds	r0, r3, #4
 8007b0a:	6030      	str	r0, [r6, #0]
 8007b0c:	062e      	lsls	r6, r5, #24
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	d501      	bpl.n	8007b16 <_printf_i+0x1be>
 8007b12:	6019      	str	r1, [r3, #0]
 8007b14:	e002      	b.n	8007b1c <_printf_i+0x1c4>
 8007b16:	0668      	lsls	r0, r5, #25
 8007b18:	d5fb      	bpl.n	8007b12 <_printf_i+0x1ba>
 8007b1a:	8019      	strh	r1, [r3, #0]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	4616      	mov	r6, r2
 8007b22:	e7bc      	b.n	8007a9e <_printf_i+0x146>
 8007b24:	6833      	ldr	r3, [r6, #0]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	6032      	str	r2, [r6, #0]
 8007b2a:	681e      	ldr	r6, [r3, #0]
 8007b2c:	6862      	ldr	r2, [r4, #4]
 8007b2e:	2100      	movs	r1, #0
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7f8 fb4d 	bl	80001d0 <memchr>
 8007b36:	b108      	cbz	r0, 8007b3c <_printf_i+0x1e4>
 8007b38:	1b80      	subs	r0, r0, r6
 8007b3a:	6060      	str	r0, [r4, #4]
 8007b3c:	6863      	ldr	r3, [r4, #4]
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	2300      	movs	r3, #0
 8007b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b46:	e7aa      	b.n	8007a9e <_printf_i+0x146>
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	4632      	mov	r2, r6
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4640      	mov	r0, r8
 8007b50:	47d0      	blx	sl
 8007b52:	3001      	adds	r0, #1
 8007b54:	d0ad      	beq.n	8007ab2 <_printf_i+0x15a>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	079b      	lsls	r3, r3, #30
 8007b5a:	d413      	bmi.n	8007b84 <_printf_i+0x22c>
 8007b5c:	68e0      	ldr	r0, [r4, #12]
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	4298      	cmp	r0, r3
 8007b62:	bfb8      	it	lt
 8007b64:	4618      	movlt	r0, r3
 8007b66:	e7a6      	b.n	8007ab6 <_printf_i+0x15e>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	4640      	mov	r0, r8
 8007b70:	47d0      	blx	sl
 8007b72:	3001      	adds	r0, #1
 8007b74:	d09d      	beq.n	8007ab2 <_printf_i+0x15a>
 8007b76:	3501      	adds	r5, #1
 8007b78:	68e3      	ldr	r3, [r4, #12]
 8007b7a:	9903      	ldr	r1, [sp, #12]
 8007b7c:	1a5b      	subs	r3, r3, r1
 8007b7e:	42ab      	cmp	r3, r5
 8007b80:	dcf2      	bgt.n	8007b68 <_printf_i+0x210>
 8007b82:	e7eb      	b.n	8007b5c <_printf_i+0x204>
 8007b84:	2500      	movs	r5, #0
 8007b86:	f104 0619 	add.w	r6, r4, #25
 8007b8a:	e7f5      	b.n	8007b78 <_printf_i+0x220>
 8007b8c:	08007d21 	.word	0x08007d21
 8007b90:	08007d32 	.word	0x08007d32

08007b94 <memmove>:
 8007b94:	4288      	cmp	r0, r1
 8007b96:	b510      	push	{r4, lr}
 8007b98:	eb01 0402 	add.w	r4, r1, r2
 8007b9c:	d902      	bls.n	8007ba4 <memmove+0x10>
 8007b9e:	4284      	cmp	r4, r0
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	d807      	bhi.n	8007bb4 <memmove+0x20>
 8007ba4:	1e43      	subs	r3, r0, #1
 8007ba6:	42a1      	cmp	r1, r4
 8007ba8:	d008      	beq.n	8007bbc <memmove+0x28>
 8007baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bb2:	e7f8      	b.n	8007ba6 <memmove+0x12>
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	428a      	cmp	r2, r1
 8007bba:	d100      	bne.n	8007bbe <memmove+0x2a>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bc6:	e7f7      	b.n	8007bb8 <memmove+0x24>

08007bc8 <_sbrk_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d06      	ldr	r5, [pc, #24]	@ (8007be4 <_sbrk_r+0x1c>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7f9 f8c6 	bl	8000d64 <_sbrk>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_sbrk_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_sbrk_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20001c3c 	.word	0x20001c3c

08007be8 <_realloc_r>:
 8007be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bec:	4607      	mov	r7, r0
 8007bee:	4614      	mov	r4, r2
 8007bf0:	460d      	mov	r5, r1
 8007bf2:	b921      	cbnz	r1, 8007bfe <_realloc_r+0x16>
 8007bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	f7ff bc5b 	b.w	80074b4 <_malloc_r>
 8007bfe:	b92a      	cbnz	r2, 8007c0c <_realloc_r+0x24>
 8007c00:	f7ff fbec 	bl	80073dc <_free_r>
 8007c04:	4625      	mov	r5, r4
 8007c06:	4628      	mov	r0, r5
 8007c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0c:	f000 f81a 	bl	8007c44 <_malloc_usable_size_r>
 8007c10:	4284      	cmp	r4, r0
 8007c12:	4606      	mov	r6, r0
 8007c14:	d802      	bhi.n	8007c1c <_realloc_r+0x34>
 8007c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c1a:	d8f4      	bhi.n	8007c06 <_realloc_r+0x1e>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7ff fc48 	bl	80074b4 <_malloc_r>
 8007c24:	4680      	mov	r8, r0
 8007c26:	b908      	cbnz	r0, 8007c2c <_realloc_r+0x44>
 8007c28:	4645      	mov	r5, r8
 8007c2a:	e7ec      	b.n	8007c06 <_realloc_r+0x1e>
 8007c2c:	42b4      	cmp	r4, r6
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	bf28      	it	cs
 8007c34:	4632      	movcs	r2, r6
 8007c36:	f7ff fbc3 	bl	80073c0 <memcpy>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff fbcd 	bl	80073dc <_free_r>
 8007c42:	e7f1      	b.n	8007c28 <_realloc_r+0x40>

08007c44 <_malloc_usable_size_r>:
 8007c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c48:	1f18      	subs	r0, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfbc      	itt	lt
 8007c4e:	580b      	ldrlt	r3, [r1, r0]
 8007c50:	18c0      	addlt	r0, r0, r3
 8007c52:	4770      	bx	lr

08007c54 <_init>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr

08007c60 <_fini>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr
