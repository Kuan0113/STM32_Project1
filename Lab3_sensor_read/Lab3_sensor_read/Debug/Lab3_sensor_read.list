
Lab3_sensor_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f3c  08004f3c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f3c  08004f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f44  08004f44  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f44  08004f44  00005f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f48  08004f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004fa8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004fa8  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d70c  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cce  00000000  00000000  00013798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00015468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000946  00000000  00000000  00016058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026376  00000000  00000000  0001699e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc69  00000000  00000000  0003cd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaced  00000000  00000000  0004c97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013766a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  001376b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0013adc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e88 	.word	0x08004e88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004e88 	.word	0x08004e88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b988 	b.w	8000910 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	468e      	mov	lr, r1
 8000620:	4604      	mov	r4, r0
 8000622:	4688      	mov	r8, r1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d14a      	bne.n	80006be <__udivmoddi4+0xa6>
 8000628:	428a      	cmp	r2, r1
 800062a:	4617      	mov	r7, r2
 800062c:	d962      	bls.n	80006f4 <__udivmoddi4+0xdc>
 800062e:	fab2 f682 	clz	r6, r2
 8000632:	b14e      	cbz	r6, 8000648 <__udivmoddi4+0x30>
 8000634:	f1c6 0320 	rsb	r3, r6, #32
 8000638:	fa01 f806 	lsl.w	r8, r1, r6
 800063c:	fa20 f303 	lsr.w	r3, r0, r3
 8000640:	40b7      	lsls	r7, r6
 8000642:	ea43 0808 	orr.w	r8, r3, r8
 8000646:	40b4      	lsls	r4, r6
 8000648:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800064c:	fa1f fc87 	uxth.w	ip, r7
 8000650:	fbb8 f1fe 	udiv	r1, r8, lr
 8000654:	0c23      	lsrs	r3, r4, #16
 8000656:	fb0e 8811 	mls	r8, lr, r1, r8
 800065a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800065e:	fb01 f20c 	mul.w	r2, r1, ip
 8000662:	429a      	cmp	r2, r3
 8000664:	d909      	bls.n	800067a <__udivmoddi4+0x62>
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	f101 30ff 	add.w	r0, r1, #4294967295
 800066c:	f080 80ea 	bcs.w	8000844 <__udivmoddi4+0x22c>
 8000670:	429a      	cmp	r2, r3
 8000672:	f240 80e7 	bls.w	8000844 <__udivmoddi4+0x22c>
 8000676:	3902      	subs	r1, #2
 8000678:	443b      	add	r3, r7
 800067a:	1a9a      	subs	r2, r3, r2
 800067c:	b2a3      	uxth	r3, r4
 800067e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000682:	fb0e 2210 	mls	r2, lr, r0, r2
 8000686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800068a:	fb00 fc0c 	mul.w	ip, r0, ip
 800068e:	459c      	cmp	ip, r3
 8000690:	d909      	bls.n	80006a6 <__udivmoddi4+0x8e>
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	f100 32ff 	add.w	r2, r0, #4294967295
 8000698:	f080 80d6 	bcs.w	8000848 <__udivmoddi4+0x230>
 800069c:	459c      	cmp	ip, r3
 800069e:	f240 80d3 	bls.w	8000848 <__udivmoddi4+0x230>
 80006a2:	443b      	add	r3, r7
 80006a4:	3802      	subs	r0, #2
 80006a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006aa:	eba3 030c 	sub.w	r3, r3, ip
 80006ae:	2100      	movs	r1, #0
 80006b0:	b11d      	cbz	r5, 80006ba <__udivmoddi4+0xa2>
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	2200      	movs	r2, #0
 80006b6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006be:	428b      	cmp	r3, r1
 80006c0:	d905      	bls.n	80006ce <__udivmoddi4+0xb6>
 80006c2:	b10d      	cbz	r5, 80006c8 <__udivmoddi4+0xb0>
 80006c4:	e9c5 0100 	strd	r0, r1, [r5]
 80006c8:	2100      	movs	r1, #0
 80006ca:	4608      	mov	r0, r1
 80006cc:	e7f5      	b.n	80006ba <__udivmoddi4+0xa2>
 80006ce:	fab3 f183 	clz	r1, r3
 80006d2:	2900      	cmp	r1, #0
 80006d4:	d146      	bne.n	8000764 <__udivmoddi4+0x14c>
 80006d6:	4573      	cmp	r3, lr
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xc8>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 8105 	bhi.w	80008ea <__udivmoddi4+0x2d2>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4690      	mov	r8, r2
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d0e5      	beq.n	80006ba <__udivmoddi4+0xa2>
 80006ee:	e9c5 4800 	strd	r4, r8, [r5]
 80006f2:	e7e2      	b.n	80006ba <__udivmoddi4+0xa2>
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	f000 8090 	beq.w	800081a <__udivmoddi4+0x202>
 80006fa:	fab2 f682 	clz	r6, r2
 80006fe:	2e00      	cmp	r6, #0
 8000700:	f040 80a4 	bne.w	800084c <__udivmoddi4+0x234>
 8000704:	1a8a      	subs	r2, r1, r2
 8000706:	0c03      	lsrs	r3, r0, #16
 8000708:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800070c:	b280      	uxth	r0, r0
 800070e:	b2bc      	uxth	r4, r7
 8000710:	2101      	movs	r1, #1
 8000712:	fbb2 fcfe 	udiv	ip, r2, lr
 8000716:	fb0e 221c 	mls	r2, lr, ip, r2
 800071a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800071e:	fb04 f20c 	mul.w	r2, r4, ip
 8000722:	429a      	cmp	r2, r3
 8000724:	d907      	bls.n	8000736 <__udivmoddi4+0x11e>
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	f10c 38ff 	add.w	r8, ip, #4294967295
 800072c:	d202      	bcs.n	8000734 <__udivmoddi4+0x11c>
 800072e:	429a      	cmp	r2, r3
 8000730:	f200 80e0 	bhi.w	80008f4 <__udivmoddi4+0x2dc>
 8000734:	46c4      	mov	ip, r8
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	fbb3 f2fe 	udiv	r2, r3, lr
 800073c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000740:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000744:	fb02 f404 	mul.w	r4, r2, r4
 8000748:	429c      	cmp	r4, r3
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x144>
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x142>
 8000754:	429c      	cmp	r4, r3
 8000756:	f200 80ca 	bhi.w	80008ee <__udivmoddi4+0x2d6>
 800075a:	4602      	mov	r2, r0
 800075c:	1b1b      	subs	r3, r3, r4
 800075e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000762:	e7a5      	b.n	80006b0 <__udivmoddi4+0x98>
 8000764:	f1c1 0620 	rsb	r6, r1, #32
 8000768:	408b      	lsls	r3, r1
 800076a:	fa22 f706 	lsr.w	r7, r2, r6
 800076e:	431f      	orrs	r7, r3
 8000770:	fa0e f401 	lsl.w	r4, lr, r1
 8000774:	fa20 f306 	lsr.w	r3, r0, r6
 8000778:	fa2e fe06 	lsr.w	lr, lr, r6
 800077c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000780:	4323      	orrs	r3, r4
 8000782:	fa00 f801 	lsl.w	r8, r0, r1
 8000786:	fa1f fc87 	uxth.w	ip, r7
 800078a:	fbbe f0f9 	udiv	r0, lr, r9
 800078e:	0c1c      	lsrs	r4, r3, #16
 8000790:	fb09 ee10 	mls	lr, r9, r0, lr
 8000794:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000798:	fb00 fe0c 	mul.w	lr, r0, ip
 800079c:	45a6      	cmp	lr, r4
 800079e:	fa02 f201 	lsl.w	r2, r2, r1
 80007a2:	d909      	bls.n	80007b8 <__udivmoddi4+0x1a0>
 80007a4:	193c      	adds	r4, r7, r4
 80007a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007aa:	f080 809c 	bcs.w	80008e6 <__udivmoddi4+0x2ce>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	f240 8099 	bls.w	80008e6 <__udivmoddi4+0x2ce>
 80007b4:	3802      	subs	r0, #2
 80007b6:	443c      	add	r4, r7
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	fa1f fe83 	uxth.w	lr, r3
 80007c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007c4:	fb09 4413 	mls	r4, r9, r3, r4
 80007c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007d0:	45a4      	cmp	ip, r4
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0x1ce>
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007da:	f080 8082 	bcs.w	80008e2 <__udivmoddi4+0x2ca>
 80007de:	45a4      	cmp	ip, r4
 80007e0:	d97f      	bls.n	80008e2 <__udivmoddi4+0x2ca>
 80007e2:	3b02      	subs	r3, #2
 80007e4:	443c      	add	r4, r7
 80007e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007ea:	eba4 040c 	sub.w	r4, r4, ip
 80007ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80007f2:	4564      	cmp	r4, ip
 80007f4:	4673      	mov	r3, lr
 80007f6:	46e1      	mov	r9, ip
 80007f8:	d362      	bcc.n	80008c0 <__udivmoddi4+0x2a8>
 80007fa:	d05f      	beq.n	80008bc <__udivmoddi4+0x2a4>
 80007fc:	b15d      	cbz	r5, 8000816 <__udivmoddi4+0x1fe>
 80007fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000802:	eb64 0409 	sbc.w	r4, r4, r9
 8000806:	fa04 f606 	lsl.w	r6, r4, r6
 800080a:	fa22 f301 	lsr.w	r3, r2, r1
 800080e:	431e      	orrs	r6, r3
 8000810:	40cc      	lsrs	r4, r1
 8000812:	e9c5 6400 	strd	r6, r4, [r5]
 8000816:	2100      	movs	r1, #0
 8000818:	e74f      	b.n	80006ba <__udivmoddi4+0xa2>
 800081a:	fbb1 fcf2 	udiv	ip, r1, r2
 800081e:	0c01      	lsrs	r1, r0, #16
 8000820:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000824:	b280      	uxth	r0, r0
 8000826:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800082a:	463b      	mov	r3, r7
 800082c:	4638      	mov	r0, r7
 800082e:	463c      	mov	r4, r7
 8000830:	46b8      	mov	r8, r7
 8000832:	46be      	mov	lr, r7
 8000834:	2620      	movs	r6, #32
 8000836:	fbb1 f1f7 	udiv	r1, r1, r7
 800083a:	eba2 0208 	sub.w	r2, r2, r8
 800083e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000842:	e766      	b.n	8000712 <__udivmoddi4+0xfa>
 8000844:	4601      	mov	r1, r0
 8000846:	e718      	b.n	800067a <__udivmoddi4+0x62>
 8000848:	4610      	mov	r0, r2
 800084a:	e72c      	b.n	80006a6 <__udivmoddi4+0x8e>
 800084c:	f1c6 0220 	rsb	r2, r6, #32
 8000850:	fa2e f302 	lsr.w	r3, lr, r2
 8000854:	40b7      	lsls	r7, r6
 8000856:	40b1      	lsls	r1, r6
 8000858:	fa20 f202 	lsr.w	r2, r0, r2
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	430a      	orrs	r2, r1
 8000862:	fbb3 f8fe 	udiv	r8, r3, lr
 8000866:	b2bc      	uxth	r4, r7
 8000868:	fb0e 3318 	mls	r3, lr, r8, r3
 800086c:	0c11      	lsrs	r1, r2, #16
 800086e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000872:	fb08 f904 	mul.w	r9, r8, r4
 8000876:	40b0      	lsls	r0, r6
 8000878:	4589      	cmp	r9, r1
 800087a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800087e:	b280      	uxth	r0, r0
 8000880:	d93e      	bls.n	8000900 <__udivmoddi4+0x2e8>
 8000882:	1879      	adds	r1, r7, r1
 8000884:	f108 3cff 	add.w	ip, r8, #4294967295
 8000888:	d201      	bcs.n	800088e <__udivmoddi4+0x276>
 800088a:	4589      	cmp	r9, r1
 800088c:	d81f      	bhi.n	80008ce <__udivmoddi4+0x2b6>
 800088e:	eba1 0109 	sub.w	r1, r1, r9
 8000892:	fbb1 f9fe 	udiv	r9, r1, lr
 8000896:	fb09 f804 	mul.w	r8, r9, r4
 800089a:	fb0e 1119 	mls	r1, lr, r9, r1
 800089e:	b292      	uxth	r2, r2
 80008a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008a4:	4542      	cmp	r2, r8
 80008a6:	d229      	bcs.n	80008fc <__udivmoddi4+0x2e4>
 80008a8:	18ba      	adds	r2, r7, r2
 80008aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ae:	d2c4      	bcs.n	800083a <__udivmoddi4+0x222>
 80008b0:	4542      	cmp	r2, r8
 80008b2:	d2c2      	bcs.n	800083a <__udivmoddi4+0x222>
 80008b4:	f1a9 0102 	sub.w	r1, r9, #2
 80008b8:	443a      	add	r2, r7
 80008ba:	e7be      	b.n	800083a <__udivmoddi4+0x222>
 80008bc:	45f0      	cmp	r8, lr
 80008be:	d29d      	bcs.n	80007fc <__udivmoddi4+0x1e4>
 80008c0:	ebbe 0302 	subs.w	r3, lr, r2
 80008c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008c8:	3801      	subs	r0, #1
 80008ca:	46e1      	mov	r9, ip
 80008cc:	e796      	b.n	80007fc <__udivmoddi4+0x1e4>
 80008ce:	eba7 0909 	sub.w	r9, r7, r9
 80008d2:	4449      	add	r1, r9
 80008d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008dc:	fb09 f804 	mul.w	r8, r9, r4
 80008e0:	e7db      	b.n	800089a <__udivmoddi4+0x282>
 80008e2:	4673      	mov	r3, lr
 80008e4:	e77f      	b.n	80007e6 <__udivmoddi4+0x1ce>
 80008e6:	4650      	mov	r0, sl
 80008e8:	e766      	b.n	80007b8 <__udivmoddi4+0x1a0>
 80008ea:	4608      	mov	r0, r1
 80008ec:	e6fd      	b.n	80006ea <__udivmoddi4+0xd2>
 80008ee:	443b      	add	r3, r7
 80008f0:	3a02      	subs	r2, #2
 80008f2:	e733      	b.n	800075c <__udivmoddi4+0x144>
 80008f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f8:	443b      	add	r3, r7
 80008fa:	e71c      	b.n	8000736 <__udivmoddi4+0x11e>
 80008fc:	4649      	mov	r1, r9
 80008fe:	e79c      	b.n	800083a <__udivmoddi4+0x222>
 8000900:	eba1 0109 	sub.w	r1, r1, r9
 8000904:	46c4      	mov	ip, r8
 8000906:	fbb1 f9fe 	udiv	r9, r1, lr
 800090a:	fb09 f804 	mul.w	r8, r9, r4
 800090e:	e7c4      	b.n	800089a <__udivmoddi4+0x282>

08000910 <__aeabi_idiv0>:
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000918:	b088      	sub	sp, #32
 800091a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fc04 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f84a 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f90a 	bl	8000b3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000928:	f000 f8d8 	bl	8000adc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800092c:	f000 f896 	bl	8000a5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Just initialize the sensor (no UART messages)
  ISL29125_Init();
 8000930:	f000 f9ae 	bl	8000c90 <ISL29125_Init>
//	  if (ISL29125_ReadRGB(&r, &g, &b) == HAL_OK) {
//	      int len = snprintf(msg, sizeof(msg), "R=%u G=%u B=%u\r\n", r, g, b);
//	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
//	  }
//	  HAL_Delay(500);
	  if (ISL29125_ReadRGBPercent(&r_pct, &g_pct, &b_pct) == HAL_OK) {
 8000934:	4a1a      	ldr	r2, [pc, #104]	@ (80009a0 <main+0x8c>)
 8000936:	491b      	ldr	r1, [pc, #108]	@ (80009a4 <main+0x90>)
 8000938:	481b      	ldr	r0, [pc, #108]	@ (80009a8 <main+0x94>)
 800093a:	f000 f9df 	bl	8000cfc <ISL29125_ReadRGBPercent>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d128      	bne.n	8000996 <main+0x82>
	      int len = snprintf(msg, sizeof(msg), "R=%.1f%% G=%.1f%% B=%.1f%%\r\n",r_pct, g_pct, b_pct);
 8000944:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <main+0x94>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdf5 	bl	8000538 <__aeabi_f2d>
 800094e:	4604      	mov	r4, r0
 8000950:	460d      	mov	r5, r1
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <main+0x90>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fdee 	bl	8000538 <__aeabi_f2d>
 800095c:	4680      	mov	r8, r0
 800095e:	4689      	mov	r9, r1
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <main+0x8c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fde7 	bl	8000538 <__aeabi_f2d>
 800096a:	4602      	mov	r2, r0
 800096c:	460b      	mov	r3, r1
 800096e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000972:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000976:	e9cd 4500 	strd	r4, r5, [sp]
 800097a:	4a0c      	ldr	r2, [pc, #48]	@ (80009ac <main+0x98>)
 800097c:	2140      	movs	r1, #64	@ 0x40
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <main+0x9c>)
 8000980:	f003 fdce 	bl	8004520 <sniprintf>
 8000984:	6078      	str	r0, [r7, #4]
	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	b29a      	uxth	r2, r3
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	4908      	ldr	r1, [pc, #32]	@ (80009b0 <main+0x9c>)
 8000990:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <main+0xa0>)
 8000992:	f003 f867 	bl	8003a64 <HAL_UART_Transmit>
	  }
	  HAL_Delay(500);
 8000996:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800099a:	f000 fc41 	bl	8001220 <HAL_Delay>
	  if (ISL29125_ReadRGBPercent(&r_pct, &g_pct, &b_pct) == HAL_OK) {
 800099e:	e7c9      	b.n	8000934 <main+0x20>
 80009a0:	2000019c 	.word	0x2000019c
 80009a4:	20000198 	.word	0x20000198
 80009a8:	20000194 	.word	0x20000194
 80009ac:	08004ea0 	.word	0x08004ea0
 80009b0:	20000154 	.word	0x20000154
 80009b4:	200000cc 	.word	0x200000cc

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b096      	sub	sp, #88	@ 0x58
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2244      	movs	r2, #68	@ 0x44
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fde0 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009de:	f001 fce1 	bl	80023a4 <HAL_PWREx_ControlVoltageScaling>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e8:	f000 fa18 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f6:	2310      	movs	r3, #16
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a06:	230a      	movs	r3, #10
 8000a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fd18 	bl	8002450 <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a26:	f000 f9f9 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2104      	movs	r1, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 f8e0 	bl	8002c08 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a4e:	f000 f9e5 	bl	8000e1c <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3758      	adds	r7, #88	@ 0x58
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <MX_I2C1_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <MX_I2C1_Init+0x7c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a96:	480e      	ldr	r0, [pc, #56]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000a98:	f000 fe8e 	bl	80017b8 <HAL_I2C_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f000 f9bb 	bl	8000e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000aaa:	f001 fbd5 	bl	8002258 <HAL_I2CEx_ConfigAnalogFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f000 f9b2 	bl	8000e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_I2C1_Init+0x74>)
 8000abc:	f001 fc17 	bl	80022ee <HAL_I2CEx_ConfigDigitalFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 f9a9 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000078 	.word	0x20000078
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	10d19ce4 	.word	0x10d19ce4

08000adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000ae2:	4a15      	ldr	r2, [pc, #84]	@ (8000b38 <MX_USART2_UART_Init+0x5c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b20:	f002 ff52 	bl	80039c8 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f977 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000cc 	.word	0x200000cc
 8000b38:	40004400 	.word	0x40004400

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	4a2a      	ldr	r2, [pc, #168]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5e:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4a1e      	ldr	r2, [pc, #120]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_GPIO_Init+0xc4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f000 fde5 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <MX_GPIO_Init+0xc8>)
 8000bd6:	f000 fc2d 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf4:	f000 fc1e 	bl	8001434 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000800 	.word	0x48000800

08000c08 <ISL29125_WriteRegister>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef ISL29125_WriteRegister(uint8_t reg, uint8_t value) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg, value};
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	733b      	strb	r3, [r7, #12]
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, buf, 2, HAL_MAX_DELAY);
 8000c20:	f107 020c 	add.w	r2, r7, #12
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	2188      	movs	r1, #136	@ 0x88
 8000c2e:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <ISL29125_WriteRegister+0x38>)
 8000c30:	f000 fe5e 	bl	80018f0 <HAL_I2C_Master_Transmit>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000078 	.word	0x20000078

08000c44 <ISL29125_ReadRegister>:

HAL_StatusTypeDef ISL29125_ReadRegister(uint8_t reg, uint8_t *value) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef ret;
    ret = HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000c50:	1dfa      	adds	r2, r7, #7
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	2188      	movs	r1, #136	@ 0x88
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <ISL29125_ReadRegister+0x48>)
 8000c5e:	f000 fe47 	bl	80018f0 <HAL_I2C_Master_Transmit>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) return ret;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <ISL29125_ReadRegister+0x2c>
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	e009      	b.n	8000c84 <ISL29125_ReadRegister+0x40>
    return HAL_I2C_Master_Receive(&hi2c1, ISL29125_ADDR, value, 1, HAL_MAX_DELAY);
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	2188      	movs	r1, #136	@ 0x88
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <ISL29125_ReadRegister+0x48>)
 8000c7e:	f000 ff4f 	bl	8001b20 <HAL_I2C_Master_Receive>
 8000c82:	4603      	mov	r3, r0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000078 	.word	0x20000078

08000c90 <ISL29125_Init>:

HAL_StatusTypeDef ISL29125_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    uint8_t device_id;

    // 1. Read device ID to verify sensor is connected
    ret = ISL29125_ReadRegister(ISL29125_REG_DEVICE_ID, &device_id);
 8000c96:	1dbb      	adds	r3, r7, #6
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff ffd2 	bl	8000c44 <ISL29125_ReadRegister>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <ISL29125_Init+0x1e>
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	e021      	b.n	8000cf2 <ISL29125_Init+0x62>

    // 2. Configure sensor for RGB mode, 16-bit ADC, 375 lux
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG1, CONFIG1_MODE_RGB_16BIT);
 8000cae:	2105      	movs	r1, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff ffa9 	bl	8000c08 <ISL29125_WriteRegister>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <ISL29125_Init+0x34>
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	e016      	b.n	8000cf2 <ISL29125_Init+0x62>

    // 3. Set IR compensation to max (recommended for high lux)
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG2, CONFIG2_IR_MAX);
 8000cc4:	21bf      	movs	r1, #191	@ 0xbf
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff ff9e 	bl	8000c08 <ISL29125_WriteRegister>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <ISL29125_Init+0x4a>
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	e00b      	b.n	8000cf2 <ISL29125_Init+0x62>

    // 4. Set default CONFIG3 (no interrupts, default settings)
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG3, CONFIG3_DEFAULT);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff ff93 	bl	8000c08 <ISL29125_WriteRegister>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <ISL29125_Init+0x60>
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	e000      	b.n	8000cf2 <ISL29125_Init+0x62>

    // Sensor initialized successfully
    return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <ISL29125_ReadRGBPercent>:

    return HAL_OK;
}

HAL_StatusTypeDef ISL29125_ReadRGBPercent(float *r_perc, float *g_perc, float *b_perc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
    uint16_t r_raw, g_raw, b_raw;
    uint8_t lo, hi;

    // Read Green
    ISL29125_ReadRegister(ISL29125_REG_GREEN_L, &lo);
 8000d08:	f107 0315 	add.w	r3, r7, #21
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2009      	movs	r0, #9
 8000d10:	f7ff ff98 	bl	8000c44 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_GREEN_H, &hi);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f7ff ff92 	bl	8000c44 <ISL29125_ReadRegister>
    g_raw = (hi << 8) | lo;
 8000d20:	7d3b      	ldrb	r3, [r7, #20]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	7d7b      	ldrb	r3, [r7, #21]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	837b      	strh	r3, [r7, #26]

    // Read Red
    ISL29125_ReadRegister(ISL29125_REG_RED_L, &lo);
 8000d32:	f107 0315 	add.w	r3, r7, #21
 8000d36:	4619      	mov	r1, r3
 8000d38:	200b      	movs	r0, #11
 8000d3a:	f7ff ff83 	bl	8000c44 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_RED_H, &hi);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	200c      	movs	r0, #12
 8000d46:	f7ff ff7d 	bl	8000c44 <ISL29125_ReadRegister>
    r_raw = (hi << 8) | lo;
 8000d4a:	7d3b      	ldrb	r3, [r7, #20]
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	7d7b      	ldrb	r3, [r7, #21]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	833b      	strh	r3, [r7, #24]

    // Read Blue
    ISL29125_ReadRegister(ISL29125_REG_BLUE_L, &lo);
 8000d5c:	f107 0315 	add.w	r3, r7, #21
 8000d60:	4619      	mov	r1, r3
 8000d62:	200d      	movs	r0, #13
 8000d64:	f7ff ff6e 	bl	8000c44 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_BLUE_H, &hi);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	200e      	movs	r0, #14
 8000d70:	f7ff ff68 	bl	8000c44 <ISL29125_ReadRegister>
    b_raw = (hi << 8) | lo;
 8000d74:	7d3b      	ldrb	r3, [r7, #20]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	7d7b      	ldrb	r3, [r7, #21]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	82fb      	strh	r3, [r7, #22]

    // Calculate total
    uint32_t sum = r_raw + g_raw + b_raw;
 8000d86:	8b3a      	ldrh	r2, [r7, #24]
 8000d88:	8b7b      	ldrh	r3, [r7, #26]
 8000d8a:	441a      	add	r2, r3
 8000d8c:	8afb      	ldrh	r3, [r7, #22]
 8000d8e:	4413      	add	r3, r2
 8000d90:	61fb      	str	r3, [r7, #28]
    if (sum == 0) sum = 1; // prevent division by zero
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <ISL29125_ReadRGBPercent+0xa0>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]

    // Convert to percentage
    *r_perc = ((float)r_raw / sum) * 100.0f;
 8000d9c:	8b3b      	ldrh	r3, [r7, #24]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000e18 <ISL29125_ReadRGBPercent+0x11c>
 8000db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	edc3 7a00 	vstr	s15, [r3]
    *g_perc = ((float)g_raw / sum) * 100.0f;
 8000dc2:	8b7b      	ldrh	r3, [r7, #26]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dda:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000e18 <ISL29125_ReadRGBPercent+0x11c>
 8000dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	edc3 7a00 	vstr	s15, [r3]
    *b_perc = ((float)b_raw / sum) * 100.0f;
 8000de8:	8afb      	ldrh	r3, [r7, #22]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e00:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000e18 <ISL29125_ReadRGBPercent+0x11c>
 8000e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	42c80000 	.word	0x42c80000

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ac      	sub	sp, #176	@ 0xb0
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2288      	movs	r2, #136	@ 0x88
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fb7b 	bl	800458c <memset>
  if(hi2c->Instance==I2C1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <HAL_I2C_MspInit+0xb0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13b      	bne.n	8000f18 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ea0:	2340      	movs	r3, #64	@ 0x40
 8000ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 f8cf 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff ffb0 	bl	8000e1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_I2C_MspInit+0xb4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	4a18      	ldr	r2, [pc, #96]	@ (8000f24 <HAL_I2C_MspInit+0xb4>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec8:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <HAL_I2C_MspInit+0xb4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ed4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <HAL_I2C_MspInit+0xb8>)
 8000efc:	f000 fa9a 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <HAL_I2C_MspInit+0xb4>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <HAL_I2C_MspInit+0xb4>)
 8000f06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_I2C_MspInit+0xb4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f18:	bf00      	nop
 8000f1a:	37b0      	adds	r7, #176	@ 0xb0
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40005400 	.word	0x40005400
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000400 	.word	0x48000400

08000f2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2288      	movs	r2, #136	@ 0x88
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fb1d 	bl	800458c <memset>
  if(huart->Instance==USART2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <HAL_UART_MspInit+0xb0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d13b      	bne.n	8000fd4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 f871 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f74:	f7ff ff52 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_UART_MspInit+0xb4>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7c:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <HAL_UART_MspInit+0xb4>)
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <HAL_UART_MspInit+0xb4>)
 8000f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <HAL_UART_MspInit+0xb4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <HAL_UART_MspInit+0xb4>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9c:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <HAL_UART_MspInit+0xb4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd0:	f000 fa30 	bl	8001434 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fd4:	bf00      	nop
 8000fd6:	37b0      	adds	r7, #176	@ 0xb0
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40004400 	.word	0x40004400
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103a:	f000 f8d1 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f003 fa92 	bl	800459c <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20018000 	.word	0x20018000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	200001a0 	.word	0x200001a0
 80010ac:	200002f0 	.word	0x200002f0

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800110c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff ffea 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f003 fa51 	bl	80045a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff fc05 	bl	8000914 <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001118:	08004f4c 	.word	0x08004f4c
  ldr r2, =_sbss
 800111c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001120:	200002f0 	.word	0x200002f0

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_Init+0x3c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_Init+0x3c>)
 8001138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800113c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113e:	2003      	movs	r0, #3
 8001140:	f000 f944 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f80f 	bl	8001168 <HAL_InitTick>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	e001      	b.n	800115a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001156:	f7ff fe67 	bl	8000e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115a:	79fb      	ldrb	r3, [r7, #7]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f941 	bl	800141a <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f919 	bl	80013e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	200001a4 	.word	0x200001a4

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200001a4 	.word	0x200001a4

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	@ (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	@ 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff47 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff5c 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff8e 	bl	8001320 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffb0 	bl	8001388 <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e17f      	b.n	8001744 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8171 	beq.w	800173e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d005      	beq.n	8001474 <HAL_GPIO_Init+0x40>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d130      	bne.n	80014d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	f003 0201 	and.w	r2, r3, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d118      	bne.n	8001514 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b03      	cmp	r3, #3
 800151e:	d017      	beq.n	8001550 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d123      	bne.n	80015a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80ac 	beq.w	800173e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001764 <HAL_GPIO_Init+0x330>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001764 <HAL_GPIO_Init+0x330>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001764 <HAL_GPIO_Init+0x330>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001768 <HAL_GPIO_Init+0x334>)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001628:	d025      	beq.n	8001676 <HAL_GPIO_Init+0x242>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4f      	ldr	r2, [pc, #316]	@ (800176c <HAL_GPIO_Init+0x338>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01f      	beq.n	8001672 <HAL_GPIO_Init+0x23e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4e      	ldr	r2, [pc, #312]	@ (8001770 <HAL_GPIO_Init+0x33c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x23a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4d      	ldr	r2, [pc, #308]	@ (8001774 <HAL_GPIO_Init+0x340>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x236>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4c      	ldr	r2, [pc, #304]	@ (8001778 <HAL_GPIO_Init+0x344>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x232>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4b      	ldr	r2, [pc, #300]	@ (800177c <HAL_GPIO_Init+0x348>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x22e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4a      	ldr	r2, [pc, #296]	@ (8001780 <HAL_GPIO_Init+0x34c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x22a>
 800165a:	2306      	movs	r3, #6
 800165c:	e00c      	b.n	8001678 <HAL_GPIO_Init+0x244>
 800165e:	2307      	movs	r3, #7
 8001660:	e00a      	b.n	8001678 <HAL_GPIO_Init+0x244>
 8001662:	2305      	movs	r3, #5
 8001664:	e008      	b.n	8001678 <HAL_GPIO_Init+0x244>
 8001666:	2304      	movs	r3, #4
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x244>
 800166a:	2303      	movs	r3, #3
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x244>
 800166e:	2302      	movs	r3, #2
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x244>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x244>
 8001676:	2300      	movs	r3, #0
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	f002 0203 	and.w	r2, r2, #3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001688:	4937      	ldr	r1, [pc, #220]	@ (8001768 <HAL_GPIO_Init+0x334>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_GPIO_Init+0x350>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ba:	4a32      	ldr	r2, [pc, #200]	@ (8001784 <HAL_GPIO_Init+0x350>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016c0:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <HAL_GPIO_Init+0x350>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016e4:	4a27      	ldr	r2, [pc, #156]	@ (8001784 <HAL_GPIO_Init+0x350>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_GPIO_Init+0x350>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800170e:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_GPIO_Init+0x350>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_GPIO_Init+0x350>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_GPIO_Init+0x350>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	f47f ae78 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	48000400 	.word	0x48000400
 8001770:	48000800 	.word	0x48000800
 8001774:	48000c00 	.word	0x48000c00
 8001778:	48001000 	.word	0x48001000
 800177c:	48001400 	.word	0x48001400
 8001780:	48001800 	.word	0x48001800
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e08d      	b.n	80018e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fb46 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2224      	movs	r2, #36	@ 0x24
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001808:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001818:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	e006      	b.n	8001840 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800183e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d108      	bne.n	800185a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	e007      	b.n	800186a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001868:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800187c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800188c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69d9      	ldr	r1, [r3, #28]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	461a      	mov	r2, r3
 80018fc:	460b      	mov	r3, r1
 80018fe:	817b      	strh	r3, [r7, #10]
 8001900:	4613      	mov	r3, r2
 8001902:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b20      	cmp	r3, #32
 800190e:	f040 80fd 	bne.w	8001b0c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2C_Master_Transmit+0x30>
 800191c:	2302      	movs	r3, #2
 800191e:	e0f6      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x21e>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001928:	f7ff fc6e 	bl	8001208 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2319      	movs	r3, #25
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fa0a 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0e1      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2221      	movs	r2, #33	@ 0x21
 800194e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2210      	movs	r2, #16
 8001956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	893a      	ldrh	r2, [r7, #8]
 800196a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001976:	b29b      	uxth	r3, r3
 8001978:	2bff      	cmp	r3, #255	@ 0xff
 800197a:	d906      	bls.n	800198a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	22ff      	movs	r2, #255	@ 0xff
 8001980:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001982:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e007      	b.n	800199a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001994:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001998:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	8979      	ldrh	r1, [r7, #10]
 80019de:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <HAL_I2C_Master_Transmit+0x228>)
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fc05 	bl	80021f4 <I2C_TransferConfig>
 80019ea:	e066      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	8979      	ldrh	r1, [r7, #10]
 80019f4:	4b48      	ldr	r3, [pc, #288]	@ (8001b18 <HAL_I2C_Master_Transmit+0x228>)
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 fbfa 	bl	80021f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a00:	e05b      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	6a39      	ldr	r1, [r7, #32]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f9fd 	bl	8001e06 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07b      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d034      	beq.n	8001aba <HAL_I2C_Master_Transmit+0x1ca>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d130      	bne.n	8001aba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2180      	movs	r1, #128	@ 0x80
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f976 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e04d      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2bff      	cmp	r3, #255	@ 0xff
 8001a7a:	d90e      	bls.n	8001a9a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	22ff      	movs	r2, #255	@ 0xff
 8001a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	8979      	ldrh	r1, [r7, #10]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fbae 	bl	80021f4 <I2C_TransferConfig>
 8001a98:	e00f      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	8979      	ldrh	r1, [r7, #10]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fb9d 	bl	80021f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d19e      	bne.n	8001a02 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	6a39      	ldr	r1, [r7, #32]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f9e3 	bl	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e01a      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2220      	movs	r2, #32
 8001ade:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_I2C_Master_Transmit+0x22c>)
 8001aec:	400b      	ands	r3, r1
 8001aee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e000      	b.n	8001b0e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001b0c:	2302      	movs	r3, #2
  }
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	80002000 	.word	0x80002000
 8001b1c:	fe00e800 	.word	0xfe00e800

08001b20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	817b      	strh	r3, [r7, #10]
 8001b30:	4613      	mov	r3, r2
 8001b32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	f040 80db 	bne.w	8001cf8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2C_Master_Receive+0x30>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0d4      	b.n	8001cfa <HAL_I2C_Master_Receive+0x1da>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff fb56 	bl	8001208 <HAL_GetTick>
 8001b5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2319      	movs	r3, #25
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f8f2 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0bf      	b.n	8001cfa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2222      	movs	r2, #34	@ 0x22
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2210      	movs	r2, #16
 8001b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	893a      	ldrh	r2, [r7, #8]
 8001b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2bff      	cmp	r3, #255	@ 0xff
 8001baa:	d90e      	bls.n	8001bca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	8979      	ldrh	r1, [r7, #10]
 8001bba:	4b52      	ldr	r3, [pc, #328]	@ (8001d04 <HAL_I2C_Master_Receive+0x1e4>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 fb16 	bl	80021f4 <I2C_TransferConfig>
 8001bc8:	e06d      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	8979      	ldrh	r1, [r7, #10]
 8001bdc:	4b49      	ldr	r3, [pc, #292]	@ (8001d04 <HAL_I2C_Master_Receive+0x1e4>)
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fb05 	bl	80021f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001bea:	e05c      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	6a39      	ldr	r1, [r7, #32]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f993 	bl	8001f1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e07c      	b.n	8001cfa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d034      	beq.n	8001ca6 <HAL_I2C_Master_Receive+0x186>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d130      	bne.n	8001ca6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2180      	movs	r1, #128	@ 0x80
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f880 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e04d      	b.n	8001cfa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2bff      	cmp	r3, #255	@ 0xff
 8001c66:	d90e      	bls.n	8001c86 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	22ff      	movs	r2, #255	@ 0xff
 8001c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	8979      	ldrh	r1, [r7, #10]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fab8 	bl	80021f4 <I2C_TransferConfig>
 8001c84:	e00f      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	8979      	ldrh	r1, [r7, #10]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 faa7 	bl	80021f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d19d      	bne.n	8001bec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f8ed 	bl	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e01a      	b.n	8001cfa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <HAL_I2C_Master_Receive+0x1e8>)
 8001cd8:	400b      	ands	r3, r1
 8001cda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	80002400 	.word	0x80002400
 8001d08:	fe00e800 	.word	0xfe00e800

08001d0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d103      	bne.n	8001d2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d007      	beq.n	8001d48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	619a      	str	r2, [r3, #24]
  }
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d64:	e03b      	b.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f962 	bl	8002034 <I2C_IsErrorOccurred>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e041      	b.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d02d      	beq.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d82:	f7ff fa41 	bl	8001208 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d302      	bcc.n	8001d98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d122      	bne.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	4013      	ands	r3, r2
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d113      	bne.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f043 0220 	orr.w	r2, r3, #32
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4013      	ands	r3, r2
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d0b4      	beq.n	8001d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e12:	e033      	b.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f90b 	bl	8002034 <I2C_IsErrorOccurred>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e031      	b.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2e:	d025      	beq.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e30:	f7ff f9ea 	bl	8001208 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d302      	bcc.n	8001e46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11a      	bne.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d013      	beq.n	8001e7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e007      	b.n	8001e8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d1c4      	bne.n	8001e14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ea0:	e02f      	b.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f8c4 	bl	8002034 <I2C_IsErrorOccurred>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e02d      	b.n	8001f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb6:	f7ff f9a7 	bl	8001208 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d302      	bcc.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11a      	bne.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d013      	beq.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f043 0220 	orr.w	r2, r3, #32
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e007      	b.n	8001f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d1c8      	bne.n	8001ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001f2c:	e071      	b.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f87e 	bl	8002034 <I2C_IsErrorOccurred>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d13b      	bne.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d138      	bne.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d105      	bne.n	8001f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d121      	bne.n	8001fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2210      	movs	r2, #16
 8001f84:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2220      	movs	r2, #32
 8001f92:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	75fb      	strb	r3, [r7, #23]
 8001fc0:	e002      	b.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001fc8:	f7ff f91e 	bl	8001208 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d116      	bne.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d00f      	beq.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b04      	cmp	r3, #4
 800201e:	d002      	beq.n	8002026 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d083      	beq.n	8001f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002026:	7dfb      	ldrb	r3, [r7, #23]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	fe00e800 	.word	0xfe00e800

08002034 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	@ 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d068      	beq.n	8002132 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002068:	e049      	b.n	80020fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d045      	beq.n	80020fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7ff f8c9 	bl	8001208 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_IsErrorOccurred+0x54>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d13a      	bne.n	80020fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002092:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800209a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020aa:	d121      	bne.n	80020f0 <I2C_IsErrorOccurred+0xbc>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020b2:	d01d      	beq.n	80020f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d01a      	beq.n	80020f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ca:	f7ff f89d 	bl	8001208 <HAL_GetTick>
 80020ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d0:	e00e      	b.n	80020f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020d2:	f7ff f899 	bl	8001208 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b19      	cmp	r3, #25
 80020de:	d907      	bls.n	80020f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80020ee:	e006      	b.n	80020fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d1e9      	bne.n	80020d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b20      	cmp	r3, #32
 800210a:	d003      	beq.n	8002114 <I2C_IsErrorOccurred+0xe0>
 800210c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0aa      	beq.n	800206a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002118:	2b00      	cmp	r3, #0
 800211a:	d103      	bne.n	8002124 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2220      	movs	r2, #32
 8002122:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00b      	beq.n	800215c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80021a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01c      	beq.n	80021e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fdaf 	bl	8001d0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <I2C_IsErrorOccurred+0x1bc>)
 80021ba:	400b      	ands	r3, r1
 80021bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80021e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3728      	adds	r7, #40	@ 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	fe00e800 	.word	0xfe00e800

080021f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	4613      	mov	r3, r2
 8002204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800220c:	7a7b      	ldrb	r3, [r7, #9]
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002214:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	4313      	orrs	r3, r2
 800221e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002222:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	0d5b      	lsrs	r3, r3, #21
 800222e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <I2C_TransferConfig+0x60>)
 8002234:	430b      	orrs	r3, r1
 8002236:	43db      	mvns	r3, r3
 8002238:	ea02 0103 	and.w	r1, r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	03ff63ff 	.word	0x03ff63ff

08002258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d138      	bne.n	80022e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002278:	2302      	movs	r3, #2
 800227a:	e032      	b.n	80022e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	@ 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b20      	cmp	r3, #32
 8002302:	d139      	bne.n	8002378 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800230e:	2302      	movs	r3, #2
 8002310:	e033      	b.n	800237a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2224      	movs	r2, #36	@ 0x24
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002340:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40007000 	.word	0x40007000

080023a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023b2:	d130      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b4:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c0:	d038      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2232      	movs	r2, #50	@ 0x32
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0c9b      	lsrs	r3, r3, #18
 80023e4:	3301      	adds	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e8:	e002      	b.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fc:	d102      	bne.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f2      	bne.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002404:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002410:	d110      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e00f      	b.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002422:	d007      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002424:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800242c:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000
 8002448:	20000000 	.word	0x20000000
 800244c:	431bde83 	.word	0x431bde83

08002450 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e3ca      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	4b97      	ldr	r3, [pc, #604]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246c:	4b94      	ldr	r3, [pc, #592]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80e4 	beq.w	800264c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_RCC_OscConfig+0x4a>
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b0c      	cmp	r3, #12
 800248e:	f040 808b 	bne.w	80025a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 8087 	bne.w	80025a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800249a:	4b89      	ldr	r3, [pc, #548]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e3a2      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1a      	ldr	r2, [r3, #32]
 80024b6:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_RCC_OscConfig+0x7c>
 80024c2:	4b7f      	ldr	r3, [pc, #508]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ca:	e005      	b.n	80024d8 <HAL_RCC_OscConfig+0x88>
 80024cc:	4b7c      	ldr	r3, [pc, #496]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d8:	4293      	cmp	r3, r2
 80024da:	d223      	bcs.n	8002524 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fd55 	bl	8002f90 <RCC_SetFlashLatencyFromMSIRange>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e383      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f0:	4b73      	ldr	r3, [pc, #460]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a72      	ldr	r2, [pc, #456]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b70      	ldr	r3, [pc, #448]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	496d      	ldr	r1, [pc, #436]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250e:	4b6c      	ldr	r3, [pc, #432]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	4968      	ldr	r1, [pc, #416]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
 8002522:	e025      	b.n	8002570 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002524:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800252a:	f043 0308 	orr.w	r3, r3, #8
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b63      	ldr	r3, [pc, #396]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4960      	ldr	r1, [pc, #384]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002542:	4b5f      	ldr	r3, [pc, #380]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	495b      	ldr	r1, [pc, #364]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fd15 	bl	8002f90 <RCC_SetFlashLatencyFromMSIRange>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e343      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002570:	f000 fc4a 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b52      	ldr	r3, [pc, #328]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	4950      	ldr	r1, [pc, #320]	@ (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	4a4e      	ldr	r2, [pc, #312]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800258e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002590:	4b4e      	ldr	r3, [pc, #312]	@ (80026cc <HAL_RCC_OscConfig+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fde7 	bl	8001168 <HAL_InitTick>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d052      	beq.n	800264a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	e327      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d032      	beq.n	8002616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025b0:	4b43      	ldr	r3, [pc, #268]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a42      	ldr	r2, [pc, #264]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fe24 	bl	8001208 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c4:	f7fe fe20 	bl	8001208 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e310      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d6:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e2:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a36      	ldr	r2, [pc, #216]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b34      	ldr	r3, [pc, #208]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4931      	ldr	r1, [pc, #196]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002600:	4b2f      	ldr	r3, [pc, #188]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	492c      	ldr	r1, [pc, #176]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e01a      	b.n	800264c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002616:	4b2a      	ldr	r3, [pc, #168]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a29      	ldr	r2, [pc, #164]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002622:	f7fe fdf1 	bl	8001208 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800262a:	f7fe fded 	bl	8001208 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e2dd      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800263c:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x1da>
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d074      	beq.n	8002742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x21a>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b0c      	cmp	r3, #12
 8002662:	d10e      	bne.n	8002682 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d10b      	bne.n	8002682 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d064      	beq.n	8002740 <HAL_RCC_OscConfig+0x2f0>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d160      	bne.n	8002740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e2ba      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x24a>
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e026      	b.n	80026e8 <HAL_RCC_OscConfig+0x298>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a2:	d115      	bne.n	80026d0 <HAL_RCC_OscConfig+0x280>
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a05      	ldr	r2, [pc, #20]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a02      	ldr	r2, [pc, #8]	@ (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x298>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08004ec0 	.word	0x08004ec0
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004
 80026d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a9f      	ldr	r2, [pc, #636]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a9c      	ldr	r2, [pc, #624]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fd8a 	bl	8001208 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fd86 	bl	8001208 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e276      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270a:	4b92      	ldr	r3, [pc, #584]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x2a8>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fd76 	bl	8001208 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fd72 	bl	8001208 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	@ 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e262      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x2d0>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d060      	beq.n	8002810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x310>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d119      	bne.n	800278e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d116      	bne.n	800278e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	4b7c      	ldr	r3, [pc, #496]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x328>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e23f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b76      	ldr	r3, [pc, #472]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	4973      	ldr	r1, [pc, #460]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278c:	e040      	b.n	8002810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d023      	beq.n	80027de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002796:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fd31 	bl	8001208 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe fd2d 	bl	8001208 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e21d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	4b65      	ldr	r3, [pc, #404]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b62      	ldr	r3, [pc, #392]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	495f      	ldr	r1, [pc, #380]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e018      	b.n	8002810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b5d      	ldr	r3, [pc, #372]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fd0d 	bl	8001208 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe fd09 	bl	8001208 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1f9      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002804:	4b53      	ldr	r3, [pc, #332]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03c      	beq.n	8002896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01c      	beq.n	800285e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002824:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282a:	4a4a      	ldr	r2, [pc, #296]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe fce8 	bl	8001208 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7fe fce4 	bl	8001208 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1d4      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ef      	beq.n	800283c <HAL_RCC_OscConfig+0x3ec>
 800285c:	e01b      	b.n	8002896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002864:	4a3b      	ldr	r2, [pc, #236]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe fccb 	bl	8001208 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fcc7 	bl	8001208 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1b7      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002888:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 800288a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ef      	bne.n	8002876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80a6 	beq.w	80029f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10d      	bne.n	80028d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b4:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	4a26      	ldr	r2, [pc, #152]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c0:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d0:	4b21      	ldr	r3, [pc, #132]	@ (8002958 <HAL_RCC_OscConfig+0x508>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d118      	bne.n	800290e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <HAL_RCC_OscConfig+0x508>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002958 <HAL_RCC_OscConfig+0x508>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e8:	f7fe fc8e 	bl	8001208 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe fc8a 	bl	8001208 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e17a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <HAL_RCC_OscConfig+0x508>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d108      	bne.n	8002928 <HAL_RCC_OscConfig+0x4d8>
 8002916:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291c:	4a0d      	ldr	r2, [pc, #52]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002926:	e029      	b.n	800297c <HAL_RCC_OscConfig+0x52c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d115      	bne.n	800295c <HAL_RCC_OscConfig+0x50c>
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	4a07      	ldr	r2, [pc, #28]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	4a03      	ldr	r2, [pc, #12]	@ (8002954 <HAL_RCC_OscConfig+0x504>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002950:	e014      	b.n	800297c <HAL_RCC_OscConfig+0x52c>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
 800295c:	4b9c      	ldr	r3, [pc, #624]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002962:	4a9b      	ldr	r2, [pc, #620]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800296c:	4b98      	ldr	r3, [pc, #608]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	4a97      	ldr	r2, [pc, #604]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d016      	beq.n	80029b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe fc40 	bl	8001208 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe fc3c 	bl	8001208 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e12a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a2:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ed      	beq.n	800298c <HAL_RCC_OscConfig+0x53c>
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fc29 	bl	8001208 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe fc25 	bl	8001208 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e113      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d0:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ed      	bne.n	80029ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029de:	7ffb      	ldrb	r3, [r7, #31]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	4a79      	ldr	r2, [pc, #484]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80fe 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	f040 80d0 	bne.w	8002ba4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a04:	4b72      	ldr	r3, [pc, #456]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d130      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	3b01      	subs	r3, #1
 8002a24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d127      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d11f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a44:	2a07      	cmp	r2, #7
 8002a46:	bf14      	ite	ne
 8002a48:	2201      	movne	r2, #1
 8002a4a:	2200      	moveq	r2, #0
 8002a4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d113      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d06e      	beq.n	8002b58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d069      	beq.n	8002b54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a80:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a8c:	4b50      	ldr	r3, [pc, #320]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0ad      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa8:	f7fe fbae 	bl	8001208 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fbaa 	bl	8001208 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e09a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac2:	4b43      	ldr	r3, [pc, #268]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ace:	4b40      	ldr	r3, [pc, #256]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <HAL_RCC_OscConfig+0x784>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ae8:	0212      	lsls	r2, r2, #8
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002af0:	0852      	lsrs	r2, r2, #1
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0552      	lsls	r2, r2, #21
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002afc:	0852      	lsrs	r2, r2, #1
 8002afe:	3a01      	subs	r2, #1
 8002b00:	0652      	lsls	r2, r2, #25
 8002b02:	4311      	orrs	r1, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b08:	0912      	lsrs	r2, r2, #4
 8002b0a:	0452      	lsls	r2, r2, #17
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	4930      	ldr	r1, [pc, #192]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b2c:	f7fe fb6c 	bl	8001208 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fb68 	bl	8001208 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e058      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b52:	e050      	b.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e04f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b58:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d148      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b64:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b70:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a16      	ldr	r2, [pc, #88]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b7c:	f7fe fb44 	bl	8001208 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fb40 	bl	8001208 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e030      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x734>
 8002ba2:	e028      	b.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d023      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a08      	ldr	r2, [pc, #32]	@ (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002bb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fb27 	bl	8001208 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	e00c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fb23 	bl	8001208 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d905      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e013      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_OscConfig+0x7b0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ec      	bne.n	8002bbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_RCC_OscConfig+0x7b0>)
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4905      	ldr	r1, [pc, #20]	@ (8002c00 <HAL_RCC_OscConfig+0x7b0>)
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_RCC_OscConfig+0x7b4>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
 8002bf0:	e001      	b.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	feeefffc 	.word	0xfeeefffc

08002c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0e7      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b75      	ldr	r3, [pc, #468]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d910      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b72      	ldr	r3, [pc, #456]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0207 	bic.w	r2, r3, #7
 8002c32:	4970      	ldr	r1, [pc, #448]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0cf      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b66      	ldr	r3, [pc, #408]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d908      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b63      	ldr	r3, [pc, #396]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4960      	ldr	r1, [pc, #384]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04c      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d121      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0a6      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	4b54      	ldr	r3, [pc, #336]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d115      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e09a      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e08e      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cce:	4b4a      	ldr	r3, [pc, #296]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e086      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cde:	4b46      	ldr	r3, [pc, #280]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4943      	ldr	r1, [pc, #268]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fa8a 	bl	8001208 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7fe fa86 	bl	8001208 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e06e      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 020c 	and.w	r2, r3, #12
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1eb      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b31      	ldr	r3, [pc, #196]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d208      	bcs.n	8002d4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	492b      	ldr	r1, [pc, #172]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4e:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d210      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5c:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 0207 	bic.w	r2, r3, #7
 8002d64:	4923      	ldr	r1, [pc, #140]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6c:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e036      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4918      	ldr	r1, [pc, #96]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da8:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4910      	ldr	r1, [pc, #64]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dbc:	f000 f824 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	490b      	ldr	r1, [pc, #44]	@ (8002dfc <HAL_RCC_ClockConfig+0x1f4>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	4a09      	ldr	r2, [pc, #36]	@ (8002e00 <HAL_RCC_ClockConfig+0x1f8>)
 8002dda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ddc:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <HAL_RCC_ClockConfig+0x1fc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe f9c1 	bl	8001168 <HAL_InitTick>
 8002de6:	4603      	mov	r3, r0
 8002de8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dea:	7afb      	ldrb	r3, [r7, #11]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08004ec0 	.word	0x08004ec0
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	@ 0x24
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e16:	4b3e      	ldr	r3, [pc, #248]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e20:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x34>
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d11e      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e3c:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e48:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e005      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e64:	4a2b      	ldr	r2, [pc, #172]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d102      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e80:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e004      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e8c:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d134      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e96:	4b1e      	ldr	r3, [pc, #120]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0xa6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xac>
 8002eac:	e005      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eae:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb0:	617b      	str	r3, [r7, #20]
      break;
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eb4:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002eb6:	617b      	str	r3, [r7, #20]
      break;
 8002eb8:	e002      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	617b      	str	r3, [r7, #20]
      break;
 8002ebe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	3301      	adds	r3, #1
 8002ecc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	fb03 f202 	mul.w	r2, r3, r2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	0e5b      	lsrs	r3, r3, #25
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f00:	69bb      	ldr	r3, [r7, #24]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08004ed8 	.word	0x08004ed8
 8002f18:	00f42400 	.word	0x00f42400
 8002f1c:	007a1200 	.word	0x007a1200

08002f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4904      	ldr	r1, [pc, #16]	@ (8002f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08004ed0 	.word	0x08004ed0

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f68:	f7ff ffda 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0adb      	lsrs	r3, r3, #11
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4904      	ldr	r1, [pc, #16]	@ (8002f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08004ed0 	.word	0x08004ed0

08002f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fa8:	f7ff f9ee 	bl	8002388 <HAL_PWREx_GetVoltageRange>
 8002fac:	6178      	str	r0, [r7, #20]
 8002fae:	e014      	b.n	8002fda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b25      	ldr	r3, [pc, #148]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	4a24      	ldr	r2, [pc, #144]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fbc:	4b22      	ldr	r3, [pc, #136]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fc8:	f7ff f9de 	bl	8002388 <HAL_PWREx_GetVoltageRange>
 8002fcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe0:	d10b      	bne.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b80      	cmp	r3, #128	@ 0x80
 8002fe6:	d919      	bls.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fec:	d902      	bls.n	8002ff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fee:	2302      	movs	r3, #2
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e013      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e010      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b80      	cmp	r3, #128	@ 0x80
 8002ffe:	d902      	bls.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003000:	2303      	movs	r3, #3
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e00a      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b80      	cmp	r3, #128	@ 0x80
 800300a:	d102      	bne.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800300c:	2302      	movs	r3, #2
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e004      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b70      	cmp	r3, #112	@ 0x70
 8003016:	d101      	bne.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800301c:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 0207 	bic.w	r2, r3, #7
 8003024:	4909      	ldr	r1, [pc, #36]	@ (800304c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800302c:	4b07      	ldr	r3, [pc, #28]	@ (800304c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	40022000 	.word	0x40022000

08003050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003058:	2300      	movs	r3, #0
 800305a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800305c:	2300      	movs	r3, #0
 800305e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003068:	2b00      	cmp	r3, #0
 800306a:	d041      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003070:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003074:	d02a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003076:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800307a:	d824      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800307c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003082:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003086:	d81e      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800308c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003090:	d010      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003092:	e018      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003094:	4b86      	ldr	r3, [pc, #536]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a85      	ldr	r2, [pc, #532]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fabb 	bl	8003624 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3320      	adds	r3, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fba6 	bl	800380c <RCCEx_PLLSAI2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d4:	4b76      	ldr	r3, [pc, #472]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030e2:	4973      	ldr	r1, [pc, #460]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d041      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003100:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003104:	d02a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003106:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800310a:	d824      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800310c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003110:	d008      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003116:	d81e      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003120:	d010      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003122:	e018      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003124:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a61      	ldr	r2, [pc, #388]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003130:	e015      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa73 	bl	8003624 <RCCEx_PLLSAI1_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003142:	e00c      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3320      	adds	r3, #32
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fb5e 	bl	800380c <RCCEx_PLLSAI2_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003154:	e003      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	74fb      	strb	r3, [r7, #19]
      break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800315c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003164:	4b52      	ldr	r3, [pc, #328]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003172:	494f      	ldr	r1, [pc, #316]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800317a:	e001      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a0 	beq.w	80032ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	4a40      	ldr	r2, [pc, #256]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b4:	4b3e      	ldr	r3, [pc, #248]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b3b      	ldr	r3, [pc, #236]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d0:	f7fe f81a 	bl	8001208 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031d6:	e009      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe f816 	bl	8001208 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d902      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ea:	e005      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ec:	4b31      	ldr	r3, [pc, #196]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ef      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d15c      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031fe:	4b2c      	ldr	r3, [pc, #176]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003208:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01f      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	d019      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800321c:	4b24      	ldr	r3, [pc, #144]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003228:	4b21      	ldr	r3, [pc, #132]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	4a20      	ldr	r2, [pc, #128]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003238:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323e:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003248:	4a19      	ldr	r2, [pc, #100]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fd ffd5 	bl	8001208 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003260:	e00b      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fd ffd1 	bl	8001208 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d902      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	74fb      	strb	r3, [r7, #19]
            break;
 8003278:	e006      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ec      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003294:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329e:	4904      	ldr	r1, [pc, #16]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032a6:	e009      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
 80032ac:	e006      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032bc:	7c7b      	ldrb	r3, [r7, #17]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b9e      	ldr	r3, [pc, #632]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	4a9d      	ldr	r2, [pc, #628]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032da:	4b98      	ldr	r3, [pc, #608]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	f023 0203 	bic.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	4994      	ldr	r1, [pc, #592]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032fc:	4b8f      	ldr	r3, [pc, #572]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	f023 020c 	bic.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	498c      	ldr	r1, [pc, #560]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800331e:	4b87      	ldr	r3, [pc, #540]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003324:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	4983      	ldr	r1, [pc, #524]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003340:	4b7e      	ldr	r3, [pc, #504]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	497b      	ldr	r1, [pc, #492]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003362:	4b76      	ldr	r3, [pc, #472]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003370:	4972      	ldr	r1, [pc, #456]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003384:	4b6d      	ldr	r3, [pc, #436]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	496a      	ldr	r1, [pc, #424]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033a6:	4b65      	ldr	r3, [pc, #404]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	4961      	ldr	r1, [pc, #388]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033c8:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d6:	4959      	ldr	r1, [pc, #356]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ea:	4b54      	ldr	r3, [pc, #336]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f8:	4950      	ldr	r1, [pc, #320]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800340c:	4b4b      	ldr	r3, [pc, #300]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003412:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341a:	4948      	ldr	r1, [pc, #288]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003434:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343c:	493f      	ldr	r1, [pc, #252]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d028      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003450:	4b3a      	ldr	r3, [pc, #232]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800345e:	4937      	ldr	r1, [pc, #220]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800346a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800346e:	d106      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003470:	4b32      	ldr	r3, [pc, #200]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a31      	ldr	r2, [pc, #196]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e011      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003482:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003486:	d10c      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f8c8 	bl	8003624 <RCCEx_PLLSAI1_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d028      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ae:	4b23      	ldr	r3, [pc, #140]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034bc:	491f      	ldr	r1, [pc, #124]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034cc:	d106      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ce:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	4a1a      	ldr	r2, [pc, #104]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d8:	60d3      	str	r3, [r2, #12]
 80034da:	e011      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f899 	bl	8003624 <RCCEx_PLLSAI1_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02b      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351a:	4908      	ldr	r1, [pc, #32]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a02      	ldr	r2, [pc, #8]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003536:	60d3      	str	r3, [r2, #12]
 8003538:	e014      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003544:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003548:	d10c      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f867 	bl	8003624 <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d02f      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003570:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800357e:	4928      	ldr	r1, [pc, #160]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800358a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800358e:	d10d      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f844 	bl	8003624 <RCCEx_PLLSAI1_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d014      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	74bb      	strb	r3, [r7, #18]
 80035aa:	e011      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3320      	adds	r3, #32
 80035ba:	2102      	movs	r1, #2
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f925 	bl	800380c <RCCEx_PLLSAI2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035dc:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ea:	490d      	ldr	r1, [pc, #52]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035fe:	4b08      	ldr	r3, [pc, #32]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003604:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360e:	4904      	ldr	r1, [pc, #16]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003616:	7cbb      	ldrb	r3, [r7, #18]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000

08003624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003632:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800363e:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
       ||
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003656:	4b6c      	ldr	r3, [pc, #432]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
       ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d047      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e044      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d018      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x86>
 8003678:	2b03      	cmp	r3, #3
 800367a:	d825      	bhi.n	80036c8 <RCCEx_PLLSAI1_Config+0xa4>
 800367c:	2b01      	cmp	r3, #1
 800367e:	d002      	beq.n	8003686 <RCCEx_PLLSAI1_Config+0x62>
 8003680:	2b02      	cmp	r3, #2
 8003682:	d009      	beq.n	8003698 <RCCEx_PLLSAI1_Config+0x74>
 8003684:	e020      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003686:	4b60      	ldr	r3, [pc, #384]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003696:	e01a      	b.n	80036ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003698:	4b5b      	ldr	r3, [pc, #364]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e013      	b.n	80036d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036aa:	4b57      	ldr	r3, [pc, #348]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b6:	4b54      	ldr	r3, [pc, #336]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036c6:	e006      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e004      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036de:	4b4a      	ldr	r3, [pc, #296]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	430b      	orrs	r3, r1
 80036f4:	4944      	ldr	r1, [pc, #272]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d17d      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003700:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a40      	ldr	r2, [pc, #256]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fd fd7c 	bl	8001208 <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003712:	e009      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003714:	f7fd fd78 	bl	8001208 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d902      	bls.n	8003728 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	73fb      	strb	r3, [r7, #15]
        break;
 8003726:	e005      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003728:	4b37      	ldr	r3, [pc, #220]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ef      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d160      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003740:	4b31      	ldr	r3, [pc, #196]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	0211      	lsls	r1, r2, #8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	0912      	lsrs	r2, r2, #4
 8003758:	0452      	lsls	r2, r2, #17
 800375a:	430a      	orrs	r2, r1
 800375c:	492a      	ldr	r1, [pc, #168]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	610b      	str	r3, [r1, #16]
 8003762:	e027      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d112      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800376a:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003772:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	0211      	lsls	r1, r2, #8
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6912      	ldr	r2, [r2, #16]
 8003780:	0852      	lsrs	r2, r2, #1
 8003782:	3a01      	subs	r2, #1
 8003784:	0552      	lsls	r2, r2, #21
 8003786:	430a      	orrs	r2, r1
 8003788:	491f      	ldr	r1, [pc, #124]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]
 800378e:	e011      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003798:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6952      	ldr	r2, [r2, #20]
 80037a6:	0852      	lsrs	r2, r2, #1
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0652      	lsls	r2, r2, #25
 80037ac:	430a      	orrs	r2, r1
 80037ae:	4916      	ldr	r1, [pc, #88]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a13      	ldr	r2, [pc, #76]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fd fd22 	bl	8001208 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fd fd1e 	bl	8001208 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
          break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037ee:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	4904      	ldr	r1, [pc, #16]	@ (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000

0800380c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800381a:	4b6a      	ldr	r3, [pc, #424]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d018      	beq.n	8003858 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003826:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0203 	and.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d10d      	bne.n	8003852 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
       ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800383e:	4b61      	ldr	r3, [pc, #388]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
       ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d047      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e044      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d018      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0x86>
 8003860:	2b03      	cmp	r3, #3
 8003862:	d825      	bhi.n	80038b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003864:	2b01      	cmp	r3, #1
 8003866:	d002      	beq.n	800386e <RCCEx_PLLSAI2_Config+0x62>
 8003868:	2b02      	cmp	r3, #2
 800386a:	d009      	beq.n	8003880 <RCCEx_PLLSAI2_Config+0x74>
 800386c:	e020      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800386e:	4b55      	ldr	r3, [pc, #340]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11d      	bne.n	80038b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387e:	e01a      	b.n	80038b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003880:	4b50      	ldr	r3, [pc, #320]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d116      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e013      	b.n	80038ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003892:	4b4c      	ldr	r3, [pc, #304]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800389e:	4b49      	ldr	r3, [pc, #292]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ae:	e006      	b.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      break;
 80038b4:	e004      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038be:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038c6:	4b3f      	ldr	r3, [pc, #252]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	430b      	orrs	r3, r1
 80038dc:	4939      	ldr	r1, [pc, #228]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d167      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038e8:	4b36      	ldr	r3, [pc, #216]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a35      	ldr	r2, [pc, #212]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f4:	f7fd fc88 	bl	8001208 <HAL_GetTick>
 80038f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038fa:	e009      	b.n	8003910 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038fc:	f7fd fc84 	bl	8001208 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d902      	bls.n	8003910 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	73fb      	strb	r3, [r7, #15]
        break;
 800390e:	e005      	b.n	800391c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003910:	4b2c      	ldr	r3, [pc, #176]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ef      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14a      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003928:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	0912      	lsrs	r2, r2, #4
 8003940:	0452      	lsls	r2, r2, #17
 8003942:	430a      	orrs	r2, r1
 8003944:	491f      	ldr	r1, [pc, #124]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	614b      	str	r3, [r1, #20]
 800394a:	e011      	b.n	8003970 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003954:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6912      	ldr	r2, [r2, #16]
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	430a      	orrs	r2, r1
 800396a:	4916      	ldr	r1, [pc, #88]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003970:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fd fc44 	bl	8001208 <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003982:	e009      	b.n	8003998 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003984:	f7fd fc40 	bl	8001208 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	73fb      	strb	r3, [r7, #15]
          break;
 8003996:	e005      	b.n	80039a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003998:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4904      	ldr	r1, [pc, #16]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e040      	b.n	8003a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fa9e 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2224      	movs	r2, #36	@ 0x24
 80039f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb6a 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8af 	bl	8003b78 <UART_SetConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e01b      	b.n	8003a5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fbe9 	bl	800422c <UART_CheckIdleState>
 8003a5a:	4603      	mov	r3, r0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	@ 0x28
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d177      	bne.n	8003b6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Transmit+0x24>
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e070      	b.n	8003b6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2221      	movs	r2, #33	@ 0x21
 8003a98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9a:	f7fd fbb5 	bl	8001208 <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x68>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e02f      	b.n	8003b36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	@ 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fc4b 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e03b      	b.n	8003b6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3302      	adds	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e007      	b.n	8003b24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1c9      	bne.n	8003ad6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2140      	movs	r1, #64	@ 0x40
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fc15 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e005      	b.n	8003b6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b08a      	sub	sp, #40	@ 0x28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4ba4      	ldr	r3, [pc, #656]	@ (8003e38 <UART_SetConfig+0x2c0>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a99      	ldr	r2, [pc, #612]	@ (8003e3c <UART_SetConfig+0x2c4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be0:	4313      	orrs	r3, r2
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a90      	ldr	r2, [pc, #576]	@ (8003e40 <UART_SetConfig+0x2c8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d126      	bne.n	8003c50 <UART_SetConfig+0xd8>
 8003c02:	4b90      	ldr	r3, [pc, #576]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d81b      	bhi.n	8003c48 <UART_SetConfig+0xd0>
 8003c10:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <UART_SetConfig+0xa0>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c41 	.word	0x08003c41
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e116      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c30:	2302      	movs	r3, #2
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e112      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3e:	e10e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c40:	2308      	movs	r3, #8
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c46:	e10a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4e:	e106      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7c      	ldr	r2, [pc, #496]	@ (8003e48 <UART_SetConfig+0x2d0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d138      	bne.n	8003ccc <UART_SetConfig+0x154>
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d82d      	bhi.n	8003cc4 <UART_SetConfig+0x14c>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <UART_SetConfig+0xf8>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003cc5 	.word	0x08003cc5
 8003c78:	08003cc5 	.word	0x08003cc5
 8003c7c:	08003cc5 	.word	0x08003cc5
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003cc5 	.word	0x08003cc5
 8003c88:	08003cc5 	.word	0x08003cc5
 8003c8c:	08003cc5 	.word	0x08003cc5
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003cc5 	.word	0x08003cc5
 8003c98:	08003cc5 	.word	0x08003cc5
 8003c9c:	08003cc5 	.word	0x08003cc5
 8003ca0:	08003cbd 	.word	0x08003cbd
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e0d8      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e0d4      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e0d0      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e0cc      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e0c8      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5e      	ldr	r2, [pc, #376]	@ (8003e4c <UART_SetConfig+0x2d4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d125      	bne.n	8003d22 <UART_SetConfig+0x1aa>
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ce0:	2b30      	cmp	r3, #48	@ 0x30
 8003ce2:	d016      	beq.n	8003d12 <UART_SetConfig+0x19a>
 8003ce4:	2b30      	cmp	r3, #48	@ 0x30
 8003ce6:	d818      	bhi.n	8003d1a <UART_SetConfig+0x1a2>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d00a      	beq.n	8003d02 <UART_SetConfig+0x18a>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d814      	bhi.n	8003d1a <UART_SetConfig+0x1a2>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <UART_SetConfig+0x182>
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d008      	beq.n	8003d0a <UART_SetConfig+0x192>
 8003cf8:	e00f      	b.n	8003d1a <UART_SetConfig+0x1a2>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d00:	e0ad      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d02:	2302      	movs	r3, #2
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d08:	e0a9      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d10:	e0a5      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d12:	2308      	movs	r3, #8
 8003d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d18:	e0a1      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d20:	e09d      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4a      	ldr	r2, [pc, #296]	@ (8003e50 <UART_SetConfig+0x2d8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <UART_SetConfig+0x200>
 8003d2c:	4b45      	ldr	r3, [pc, #276]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d38:	d016      	beq.n	8003d68 <UART_SetConfig+0x1f0>
 8003d3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d3c:	d818      	bhi.n	8003d70 <UART_SetConfig+0x1f8>
 8003d3e:	2b80      	cmp	r3, #128	@ 0x80
 8003d40:	d00a      	beq.n	8003d58 <UART_SetConfig+0x1e0>
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d814      	bhi.n	8003d70 <UART_SetConfig+0x1f8>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <UART_SetConfig+0x1d8>
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d008      	beq.n	8003d60 <UART_SetConfig+0x1e8>
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x1f8>
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d56:	e082      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e07e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e07a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e076      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e072      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a35      	ldr	r2, [pc, #212]	@ (8003e54 <UART_SetConfig+0x2dc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12a      	bne.n	8003dd8 <UART_SetConfig+0x260>
 8003d82:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d90:	d01a      	beq.n	8003dc8 <UART_SetConfig+0x250>
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d96:	d81b      	bhi.n	8003dd0 <UART_SetConfig+0x258>
 8003d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d9c:	d00c      	beq.n	8003db8 <UART_SetConfig+0x240>
 8003d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da2:	d815      	bhi.n	8003dd0 <UART_SetConfig+0x258>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x238>
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0x248>
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x258>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db6:	e052      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbe:	e04e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc6:	e04a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dce:	e046      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	e042      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <UART_SetConfig+0x2c4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d13a      	bne.n	8003e58 <UART_SetConfig+0x2e0>
 8003de2:	4b18      	ldr	r3, [pc, #96]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003dec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003df0:	d01a      	beq.n	8003e28 <UART_SetConfig+0x2b0>
 8003df2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003df6:	d81b      	bhi.n	8003e30 <UART_SetConfig+0x2b8>
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dfc:	d00c      	beq.n	8003e18 <UART_SetConfig+0x2a0>
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e02:	d815      	bhi.n	8003e30 <UART_SetConfig+0x2b8>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <UART_SetConfig+0x298>
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0c:	d008      	beq.n	8003e20 <UART_SetConfig+0x2a8>
 8003e0e:	e00f      	b.n	8003e30 <UART_SetConfig+0x2b8>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e022      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e01e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e20:	2304      	movs	r3, #4
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e01a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e016      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e012      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e38:	efff69f3 	.word	0xefff69f3
 8003e3c:	40008000 	.word	0x40008000
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40004800 	.word	0x40004800
 8003e50:	40004c00 	.word	0x40004c00
 8003e54:	40005000 	.word	0x40005000
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a9f      	ldr	r2, [pc, #636]	@ (80040e0 <UART_SetConfig+0x568>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d17a      	bne.n	8003f5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d824      	bhi.n	8003eba <UART_SetConfig+0x342>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <UART_SetConfig+0x300>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003eab 	.word	0x08003eab
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ebb 	.word	0x08003ebb
 8003e98:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7ff f84c 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61f8      	str	r0, [r7, #28]
        break;
 8003ea2:	e010      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b8f      	ldr	r3, [pc, #572]	@ (80040e4 <UART_SetConfig+0x56c>)
 8003ea6:	61fb      	str	r3, [r7, #28]
        break;
 8003ea8:	e00d      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe ffad 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8003eae:	61f8      	str	r0, [r7, #28]
        break;
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb6:	61fb      	str	r3, [r7, #28]
        break;
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80fb 	beq.w	80040c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d305      	bcc.n	8003eea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d903      	bls.n	8003ef2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ef0:	e0e8      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	461c      	mov	r4, r3
 8003ef8:	4615      	mov	r5, r2
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	022b      	lsls	r3, r5, #8
 8003f04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f08:	0222      	lsls	r2, r4, #8
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	6849      	ldr	r1, [r1, #4]
 8003f0e:	0849      	lsrs	r1, r1, #1
 8003f10:	2000      	movs	r0, #0
 8003f12:	4688      	mov	r8, r1
 8003f14:	4681      	mov	r9, r0
 8003f16:	eb12 0a08 	adds.w	sl, r2, r8
 8003f1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	4659      	mov	r1, fp
 8003f30:	f7fc fb5a 	bl	80005e8 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f42:	d308      	bcc.n	8003f56 <UART_SetConfig+0x3de>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f4a:	d204      	bcs.n	8003f56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e0b6      	b.n	80040c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f5c:	e0b2      	b.n	80040c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f66:	d15e      	bne.n	8004026 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d828      	bhi.n	8003fc2 <UART_SetConfig+0x44a>
 8003f70:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <UART_SetConfig+0x400>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003fad 	.word	0x08003fad
 8003f84:	08003fc3 	.word	0x08003fc3
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fc3 	.word	0x08003fc3
 8003f90:	08003fc3 	.word	0x08003fc3
 8003f94:	08003fc3 	.word	0x08003fc3
 8003f98:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe ffcc 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61f8      	str	r0, [r7, #28]
        break;
 8003fa2:	e014      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7fe ffde 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	61f8      	str	r0, [r7, #28]
        break;
 8003faa:	e010      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b4d      	ldr	r3, [pc, #308]	@ (80040e4 <UART_SetConfig+0x56c>)
 8003fae:	61fb      	str	r3, [r7, #28]
        break;
 8003fb0:	e00d      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7fe ff29 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8003fb6:	61f8      	str	r0, [r7, #28]
        break;
 8003fb8:	e009      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fbe:	61fb      	str	r3, [r7, #28]
        break;
 8003fc0:	e005      	b.n	8003fce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d077      	beq.n	80040c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005a      	lsls	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d916      	bls.n	800401e <UART_SetConfig+0x4a6>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff6:	d212      	bcs.n	800401e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f023 030f 	bic.w	r3, r3, #15
 8004000:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	b29a      	uxth	r2, r3
 800400e:	8afb      	ldrh	r3, [r7, #22]
 8004010:	4313      	orrs	r3, r2
 8004012:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	8afa      	ldrh	r2, [r7, #22]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e052      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004024:	e04e      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800402a:	2b08      	cmp	r3, #8
 800402c:	d827      	bhi.n	800407e <UART_SetConfig+0x506>
 800402e:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <UART_SetConfig+0x4bc>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004059 	.word	0x08004059
 8004038:	08004061 	.word	0x08004061
 800403c:	08004069 	.word	0x08004069
 8004040:	0800407f 	.word	0x0800407f
 8004044:	0800406f 	.word	0x0800406f
 8004048:	0800407f 	.word	0x0800407f
 800404c:	0800407f 	.word	0x0800407f
 8004050:	0800407f 	.word	0x0800407f
 8004054:	08004077 	.word	0x08004077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe ff6e 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 800405c:	61f8      	str	r0, [r7, #28]
        break;
 800405e:	e014      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7fe ff80 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8004064:	61f8      	str	r0, [r7, #28]
        break;
 8004066:	e010      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004068:	4b1e      	ldr	r3, [pc, #120]	@ (80040e4 <UART_SetConfig+0x56c>)
 800406a:	61fb      	str	r3, [r7, #28]
        break;
 800406c:	e00d      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7fe fecb 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8004072:	61f8      	str	r0, [r7, #28]
        break;
 8004074:	e009      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800407a:	61fb      	str	r3, [r7, #28]
        break;
 800407c:	e005      	b.n	800408a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004088:	bf00      	nop
    }

    if (pclk != 0U)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d019      	beq.n	80040c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	085a      	lsrs	r2, r3, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	441a      	add	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d909      	bls.n	80040be <UART_SetConfig+0x546>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b0:	d205      	bcs.n	80040be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	e002      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3728      	adds	r7, #40	@ 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	40008000 	.word	0x40008000
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01a      	beq.n	80041fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e6:	d10a      	bne.n	80041fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b098      	sub	sp, #96	@ 0x60
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800423c:	f7fc ffe4 	bl	8001208 <HAL_GetTick>
 8004240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d12e      	bne.n	80042ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f88c 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d021      	beq.n	80042ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800428e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e6      	bne.n	800426a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e062      	b.n	8004374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d149      	bne.n	8004350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c4:	2200      	movs	r2, #0
 80042c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f856 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d03c      	beq.n	8004350 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	623b      	str	r3, [r7, #32]
   return(result);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e6      	bne.n	80042d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3308      	adds	r3, #8
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	617b      	str	r3, [r7, #20]
   return(result);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e5      	bne.n	8004308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e011      	b.n	8004374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3758      	adds	r7, #88	@ 0x58
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	e04f      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d04b      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fc ff37 	bl	8001208 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <UART_WaitOnFlagUntilTimeout+0x30>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e04e      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d037      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b80      	cmp	r3, #128	@ 0x80
 80043c2:	d034      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b40      	cmp	r3, #64	@ 0x40
 80043c8:	d031      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d110      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2208      	movs	r2, #8
 80043de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f838 	bl	8004456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2208      	movs	r2, #8
 80043ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e029      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004408:	d111      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f81e 	bl	8004456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e00f      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	429a      	cmp	r2, r3
 800444a:	d0a0      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004456:	b480      	push	{r7}
 8004458:	b095      	sub	sp, #84	@ 0x54
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
 800447e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e6      	bne.n	800445e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3308      	adds	r3, #8
 8004496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d118      	bne.n	80044fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f023 0310 	bic.w	r3, r3, #16
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	613b      	str	r3, [r7, #16]
   return(result);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e6      	bne.n	80044cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004512:	bf00      	nop
 8004514:	3754      	adds	r7, #84	@ 0x54
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <sniprintf>:
 8004520:	b40c      	push	{r2, r3}
 8004522:	b530      	push	{r4, r5, lr}
 8004524:	4b18      	ldr	r3, [pc, #96]	@ (8004588 <sniprintf+0x68>)
 8004526:	1e0c      	subs	r4, r1, #0
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	b09d      	sub	sp, #116	@ 0x74
 800452c:	da08      	bge.n	8004540 <sniprintf+0x20>
 800452e:	238b      	movs	r3, #139	@ 0x8b
 8004530:	602b      	str	r3, [r5, #0]
 8004532:	f04f 30ff 	mov.w	r0, #4294967295
 8004536:	b01d      	add	sp, #116	@ 0x74
 8004538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800453c:	b002      	add	sp, #8
 800453e:	4770      	bx	lr
 8004540:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004544:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800454e:	bf14      	ite	ne
 8004550:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004554:	4623      	moveq	r3, r4
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9307      	str	r3, [sp, #28]
 800455a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800455e:	9002      	str	r0, [sp, #8]
 8004560:	9006      	str	r0, [sp, #24]
 8004562:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004566:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004568:	ab21      	add	r3, sp, #132	@ 0x84
 800456a:	a902      	add	r1, sp, #8
 800456c:	4628      	mov	r0, r5
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	f000 f994 	bl	800489c <_svfiprintf_r>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	bfbc      	itt	lt
 8004578:	238b      	movlt	r3, #139	@ 0x8b
 800457a:	602b      	strlt	r3, [r5, #0]
 800457c:	2c00      	cmp	r4, #0
 800457e:	d0da      	beq.n	8004536 <sniprintf+0x16>
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e7d6      	b.n	8004536 <sniprintf+0x16>
 8004588:	2000000c 	.word	0x2000000c

0800458c <memset>:
 800458c:	4402      	add	r2, r0
 800458e:	4603      	mov	r3, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <__errno>:
 800459c:	4b01      	ldr	r3, [pc, #4]	@ (80045a4 <__errno+0x8>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000000c 	.word	0x2000000c

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4d0d      	ldr	r5, [pc, #52]	@ (80045e0 <__libc_init_array+0x38>)
 80045ac:	4c0d      	ldr	r4, [pc, #52]	@ (80045e4 <__libc_init_array+0x3c>)
 80045ae:	1b64      	subs	r4, r4, r5
 80045b0:	10a4      	asrs	r4, r4, #2
 80045b2:	2600      	movs	r6, #0
 80045b4:	42a6      	cmp	r6, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	4d0b      	ldr	r5, [pc, #44]	@ (80045e8 <__libc_init_array+0x40>)
 80045ba:	4c0c      	ldr	r4, [pc, #48]	@ (80045ec <__libc_init_array+0x44>)
 80045bc:	f000 fc64 	bl	8004e88 <_init>
 80045c0:	1b64      	subs	r4, r4, r5
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	2600      	movs	r6, #0
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d0:	4798      	blx	r3
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045da:	4798      	blx	r3
 80045dc:	3601      	adds	r6, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	08004f44 	.word	0x08004f44
 80045e4:	08004f44 	.word	0x08004f44
 80045e8:	08004f44 	.word	0x08004f44
 80045ec:	08004f48 	.word	0x08004f48

080045f0 <__retarget_lock_acquire_recursive>:
 80045f0:	4770      	bx	lr

080045f2 <__retarget_lock_release_recursive>:
 80045f2:	4770      	bx	lr

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d041      	beq.n	8004680 <_free_r+0x8c>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f000 f8e0 	bl	80047cc <__malloc_lock>
 800460c:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <_free_r+0x90>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x2c>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	4628      	mov	r0, r5
 8004618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461c:	f000 b8dc 	b.w	80047d8 <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x42>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	1821      	adds	r1, r4, r0
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1809      	addeq	r1, r1, r0
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x1e>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x4c>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x42>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1850      	adds	r0, r2, r1
 8004644:	42a0      	cmp	r0, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x6c>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	4401      	add	r1, r0
 800464c:	1850      	adds	r0, r2, r1
 800464e:	4283      	cmp	r3, r0
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x22>
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	6053      	str	r3, [r2, #4]
 800465a:	4408      	add	r0, r1
 800465c:	6010      	str	r0, [r2, #0]
 800465e:	e7da      	b.n	8004616 <_free_r+0x22>
 8004660:	d902      	bls.n	8004668 <_free_r+0x74>
 8004662:	230c      	movs	r3, #12
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x22>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	bf04      	itt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	bf04      	itt	eq
 8004678:	1809      	addeq	r1, r1, r0
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	6054      	str	r4, [r2, #4]
 800467e:	e7ca      	b.n	8004616 <_free_r+0x22>
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	bf00      	nop
 8004684:	200002ec 	.word	0x200002ec

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0f      	ldr	r6, [pc, #60]	@ (80046c8 <sbrk_aligned+0x40>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fba4 	bl	8004de0 <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fb9f 	bl	8004de0 <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d103      	bne.n	80046ae <sbrk_aligned+0x26>
 80046a6:	f04f 34ff 	mov.w	r4, #4294967295
 80046aa:	4620      	mov	r0, r4
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	1cc4      	adds	r4, r0, #3
 80046b0:	f024 0403 	bic.w	r4, r4, #3
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d0f8      	beq.n	80046aa <sbrk_aligned+0x22>
 80046b8:	1a21      	subs	r1, r4, r0
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 fb90 	bl	8004de0 <_sbrk_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1f2      	bne.n	80046aa <sbrk_aligned+0x22>
 80046c4:	e7ef      	b.n	80046a6 <sbrk_aligned+0x1e>
 80046c6:	bf00      	nop
 80046c8:	200002e8 	.word	0x200002e8

080046cc <_malloc_r>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	1ccd      	adds	r5, r1, #3
 80046d2:	f025 0503 	bic.w	r5, r5, #3
 80046d6:	3508      	adds	r5, #8
 80046d8:	2d0c      	cmp	r5, #12
 80046da:	bf38      	it	cc
 80046dc:	250c      	movcc	r5, #12
 80046de:	2d00      	cmp	r5, #0
 80046e0:	4606      	mov	r6, r0
 80046e2:	db01      	blt.n	80046e8 <_malloc_r+0x1c>
 80046e4:	42a9      	cmp	r1, r5
 80046e6:	d904      	bls.n	80046f2 <_malloc_r+0x26>
 80046e8:	230c      	movs	r3, #12
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	2000      	movs	r0, #0
 80046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047c8 <_malloc_r+0xfc>
 80046f6:	f000 f869 	bl	80047cc <__malloc_lock>
 80046fa:	f8d8 3000 	ldr.w	r3, [r8]
 80046fe:	461c      	mov	r4, r3
 8004700:	bb44      	cbnz	r4, 8004754 <_malloc_r+0x88>
 8004702:	4629      	mov	r1, r5
 8004704:	4630      	mov	r0, r6
 8004706:	f7ff ffbf 	bl	8004688 <sbrk_aligned>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	4604      	mov	r4, r0
 800470e:	d158      	bne.n	80047c2 <_malloc_r+0xf6>
 8004710:	f8d8 4000 	ldr.w	r4, [r8]
 8004714:	4627      	mov	r7, r4
 8004716:	2f00      	cmp	r7, #0
 8004718:	d143      	bne.n	80047a2 <_malloc_r+0xd6>
 800471a:	2c00      	cmp	r4, #0
 800471c:	d04b      	beq.n	80047b6 <_malloc_r+0xea>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	4639      	mov	r1, r7
 8004722:	4630      	mov	r0, r6
 8004724:	eb04 0903 	add.w	r9, r4, r3
 8004728:	f000 fb5a 	bl	8004de0 <_sbrk_r>
 800472c:	4581      	cmp	r9, r0
 800472e:	d142      	bne.n	80047b6 <_malloc_r+0xea>
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	1a6d      	subs	r5, r5, r1
 8004734:	4629      	mov	r1, r5
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ffa6 	bl	8004688 <sbrk_aligned>
 800473c:	3001      	adds	r0, #1
 800473e:	d03a      	beq.n	80047b6 <_malloc_r+0xea>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	442b      	add	r3, r5
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	bb62      	cbnz	r2, 80047a8 <_malloc_r+0xdc>
 800474e:	f8c8 7000 	str.w	r7, [r8]
 8004752:	e00f      	b.n	8004774 <_malloc_r+0xa8>
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	1b52      	subs	r2, r2, r5
 8004758:	d420      	bmi.n	800479c <_malloc_r+0xd0>
 800475a:	2a0b      	cmp	r2, #11
 800475c:	d917      	bls.n	800478e <_malloc_r+0xc2>
 800475e:	1961      	adds	r1, r4, r5
 8004760:	42a3      	cmp	r3, r4
 8004762:	6025      	str	r5, [r4, #0]
 8004764:	bf18      	it	ne
 8004766:	6059      	strne	r1, [r3, #4]
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	bf08      	it	eq
 800476c:	f8c8 1000 	streq.w	r1, [r8]
 8004770:	5162      	str	r2, [r4, r5]
 8004772:	604b      	str	r3, [r1, #4]
 8004774:	4630      	mov	r0, r6
 8004776:	f000 f82f 	bl	80047d8 <__malloc_unlock>
 800477a:	f104 000b 	add.w	r0, r4, #11
 800477e:	1d23      	adds	r3, r4, #4
 8004780:	f020 0007 	bic.w	r0, r0, #7
 8004784:	1ac2      	subs	r2, r0, r3
 8004786:	bf1c      	itt	ne
 8004788:	1a1b      	subne	r3, r3, r0
 800478a:	50a3      	strne	r3, [r4, r2]
 800478c:	e7af      	b.n	80046ee <_malloc_r+0x22>
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	42a3      	cmp	r3, r4
 8004792:	bf0c      	ite	eq
 8004794:	f8c8 2000 	streq.w	r2, [r8]
 8004798:	605a      	strne	r2, [r3, #4]
 800479a:	e7eb      	b.n	8004774 <_malloc_r+0xa8>
 800479c:	4623      	mov	r3, r4
 800479e:	6864      	ldr	r4, [r4, #4]
 80047a0:	e7ae      	b.n	8004700 <_malloc_r+0x34>
 80047a2:	463c      	mov	r4, r7
 80047a4:	687f      	ldr	r7, [r7, #4]
 80047a6:	e7b6      	b.n	8004716 <_malloc_r+0x4a>
 80047a8:	461a      	mov	r2, r3
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d1fb      	bne.n	80047a8 <_malloc_r+0xdc>
 80047b0:	2300      	movs	r3, #0
 80047b2:	6053      	str	r3, [r2, #4]
 80047b4:	e7de      	b.n	8004774 <_malloc_r+0xa8>
 80047b6:	230c      	movs	r3, #12
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f80c 	bl	80047d8 <__malloc_unlock>
 80047c0:	e794      	b.n	80046ec <_malloc_r+0x20>
 80047c2:	6005      	str	r5, [r0, #0]
 80047c4:	e7d6      	b.n	8004774 <_malloc_r+0xa8>
 80047c6:	bf00      	nop
 80047c8:	200002ec 	.word	0x200002ec

080047cc <__malloc_lock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__malloc_lock+0x8>)
 80047ce:	f7ff bf0f 	b.w	80045f0 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	200002e4 	.word	0x200002e4

080047d8 <__malloc_unlock>:
 80047d8:	4801      	ldr	r0, [pc, #4]	@ (80047e0 <__malloc_unlock+0x8>)
 80047da:	f7ff bf0a 	b.w	80045f2 <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	200002e4 	.word	0x200002e4

080047e4 <__ssputs_r>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	461f      	mov	r7, r3
 80047ec:	42be      	cmp	r6, r7
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	4682      	mov	sl, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	4690      	mov	r8, r2
 80047f6:	d82d      	bhi.n	8004854 <__ssputs_r+0x70>
 80047f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004800:	d026      	beq.n	8004850 <__ssputs_r+0x6c>
 8004802:	6965      	ldr	r5, [r4, #20]
 8004804:	6909      	ldr	r1, [r1, #16]
 8004806:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800480a:	eba3 0901 	sub.w	r9, r3, r1
 800480e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004812:	1c7b      	adds	r3, r7, #1
 8004814:	444b      	add	r3, r9
 8004816:	106d      	asrs	r5, r5, #1
 8004818:	429d      	cmp	r5, r3
 800481a:	bf38      	it	cc
 800481c:	461d      	movcc	r5, r3
 800481e:	0553      	lsls	r3, r2, #21
 8004820:	d527      	bpl.n	8004872 <__ssputs_r+0x8e>
 8004822:	4629      	mov	r1, r5
 8004824:	f7ff ff52 	bl	80046cc <_malloc_r>
 8004828:	4606      	mov	r6, r0
 800482a:	b360      	cbz	r0, 8004886 <__ssputs_r+0xa2>
 800482c:	6921      	ldr	r1, [r4, #16]
 800482e:	464a      	mov	r2, r9
 8004830:	f000 fae6 	bl	8004e00 <memcpy>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800483a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	6126      	str	r6, [r4, #16]
 8004842:	6165      	str	r5, [r4, #20]
 8004844:	444e      	add	r6, r9
 8004846:	eba5 0509 	sub.w	r5, r5, r9
 800484a:	6026      	str	r6, [r4, #0]
 800484c:	60a5      	str	r5, [r4, #8]
 800484e:	463e      	mov	r6, r7
 8004850:	42be      	cmp	r6, r7
 8004852:	d900      	bls.n	8004856 <__ssputs_r+0x72>
 8004854:	463e      	mov	r6, r7
 8004856:	6820      	ldr	r0, [r4, #0]
 8004858:	4632      	mov	r2, r6
 800485a:	4641      	mov	r1, r8
 800485c:	f000 faa6 	bl	8004dac <memmove>
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	1b9b      	subs	r3, r3, r6
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	4433      	add	r3, r6
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	2000      	movs	r0, #0
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	462a      	mov	r2, r5
 8004874:	f000 fad2 	bl	8004e1c <_realloc_r>
 8004878:	4606      	mov	r6, r0
 800487a:	2800      	cmp	r0, #0
 800487c:	d1e0      	bne.n	8004840 <__ssputs_r+0x5c>
 800487e:	6921      	ldr	r1, [r4, #16]
 8004880:	4650      	mov	r0, sl
 8004882:	f7ff feb7 	bl	80045f4 <_free_r>
 8004886:	230c      	movs	r3, #12
 8004888:	f8ca 3000 	str.w	r3, [sl]
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e7e9      	b.n	800486e <__ssputs_r+0x8a>
	...

0800489c <_svfiprintf_r>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	4698      	mov	r8, r3
 80048a2:	898b      	ldrh	r3, [r1, #12]
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	b09d      	sub	sp, #116	@ 0x74
 80048a8:	4607      	mov	r7, r0
 80048aa:	460d      	mov	r5, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	d510      	bpl.n	80048d2 <_svfiprintf_r+0x36>
 80048b0:	690b      	ldr	r3, [r1, #16]
 80048b2:	b973      	cbnz	r3, 80048d2 <_svfiprintf_r+0x36>
 80048b4:	2140      	movs	r1, #64	@ 0x40
 80048b6:	f7ff ff09 	bl	80046cc <_malloc_r>
 80048ba:	6028      	str	r0, [r5, #0]
 80048bc:	6128      	str	r0, [r5, #16]
 80048be:	b930      	cbnz	r0, 80048ce <_svfiprintf_r+0x32>
 80048c0:	230c      	movs	r3, #12
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	b01d      	add	sp, #116	@ 0x74
 80048ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ce:	2340      	movs	r3, #64	@ 0x40
 80048d0:	616b      	str	r3, [r5, #20]
 80048d2:	2300      	movs	r3, #0
 80048d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d6:	2320      	movs	r3, #32
 80048d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80048e0:	2330      	movs	r3, #48	@ 0x30
 80048e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a80 <_svfiprintf_r+0x1e4>
 80048e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048ea:	f04f 0901 	mov.w	r9, #1
 80048ee:	4623      	mov	r3, r4
 80048f0:	469a      	mov	sl, r3
 80048f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048f6:	b10a      	cbz	r2, 80048fc <_svfiprintf_r+0x60>
 80048f8:	2a25      	cmp	r2, #37	@ 0x25
 80048fa:	d1f9      	bne.n	80048f0 <_svfiprintf_r+0x54>
 80048fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004900:	d00b      	beq.n	800491a <_svfiprintf_r+0x7e>
 8004902:	465b      	mov	r3, fp
 8004904:	4622      	mov	r2, r4
 8004906:	4629      	mov	r1, r5
 8004908:	4638      	mov	r0, r7
 800490a:	f7ff ff6b 	bl	80047e4 <__ssputs_r>
 800490e:	3001      	adds	r0, #1
 8004910:	f000 80a7 	beq.w	8004a62 <_svfiprintf_r+0x1c6>
 8004914:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004916:	445a      	add	r2, fp
 8004918:	9209      	str	r2, [sp, #36]	@ 0x24
 800491a:	f89a 3000 	ldrb.w	r3, [sl]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 809f 	beq.w	8004a62 <_svfiprintf_r+0x1c6>
 8004924:	2300      	movs	r3, #0
 8004926:	f04f 32ff 	mov.w	r2, #4294967295
 800492a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800492e:	f10a 0a01 	add.w	sl, sl, #1
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	9307      	str	r3, [sp, #28]
 8004936:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800493a:	931a      	str	r3, [sp, #104]	@ 0x68
 800493c:	4654      	mov	r4, sl
 800493e:	2205      	movs	r2, #5
 8004940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004944:	484e      	ldr	r0, [pc, #312]	@ (8004a80 <_svfiprintf_r+0x1e4>)
 8004946:	f7fb fc43 	bl	80001d0 <memchr>
 800494a:	9a04      	ldr	r2, [sp, #16]
 800494c:	b9d8      	cbnz	r0, 8004986 <_svfiprintf_r+0xea>
 800494e:	06d0      	lsls	r0, r2, #27
 8004950:	bf44      	itt	mi
 8004952:	2320      	movmi	r3, #32
 8004954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004958:	0711      	lsls	r1, r2, #28
 800495a:	bf44      	itt	mi
 800495c:	232b      	movmi	r3, #43	@ 0x2b
 800495e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004962:	f89a 3000 	ldrb.w	r3, [sl]
 8004966:	2b2a      	cmp	r3, #42	@ 0x2a
 8004968:	d015      	beq.n	8004996 <_svfiprintf_r+0xfa>
 800496a:	9a07      	ldr	r2, [sp, #28]
 800496c:	4654      	mov	r4, sl
 800496e:	2000      	movs	r0, #0
 8004970:	f04f 0c0a 	mov.w	ip, #10
 8004974:	4621      	mov	r1, r4
 8004976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800497a:	3b30      	subs	r3, #48	@ 0x30
 800497c:	2b09      	cmp	r3, #9
 800497e:	d94b      	bls.n	8004a18 <_svfiprintf_r+0x17c>
 8004980:	b1b0      	cbz	r0, 80049b0 <_svfiprintf_r+0x114>
 8004982:	9207      	str	r2, [sp, #28]
 8004984:	e014      	b.n	80049b0 <_svfiprintf_r+0x114>
 8004986:	eba0 0308 	sub.w	r3, r0, r8
 800498a:	fa09 f303 	lsl.w	r3, r9, r3
 800498e:	4313      	orrs	r3, r2
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	46a2      	mov	sl, r4
 8004994:	e7d2      	b.n	800493c <_svfiprintf_r+0xa0>
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	1d19      	adds	r1, r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	9103      	str	r1, [sp, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfbb      	ittet	lt
 80049a2:	425b      	neglt	r3, r3
 80049a4:	f042 0202 	orrlt.w	r2, r2, #2
 80049a8:	9307      	strge	r3, [sp, #28]
 80049aa:	9307      	strlt	r3, [sp, #28]
 80049ac:	bfb8      	it	lt
 80049ae:	9204      	strlt	r2, [sp, #16]
 80049b0:	7823      	ldrb	r3, [r4, #0]
 80049b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80049b4:	d10a      	bne.n	80049cc <_svfiprintf_r+0x130>
 80049b6:	7863      	ldrb	r3, [r4, #1]
 80049b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ba:	d132      	bne.n	8004a22 <_svfiprintf_r+0x186>
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	9203      	str	r2, [sp, #12]
 80049c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049c8:	3402      	adds	r4, #2
 80049ca:	9305      	str	r3, [sp, #20]
 80049cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a90 <_svfiprintf_r+0x1f4>
 80049d0:	7821      	ldrb	r1, [r4, #0]
 80049d2:	2203      	movs	r2, #3
 80049d4:	4650      	mov	r0, sl
 80049d6:	f7fb fbfb 	bl	80001d0 <memchr>
 80049da:	b138      	cbz	r0, 80049ec <_svfiprintf_r+0x150>
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	eba0 000a 	sub.w	r0, r0, sl
 80049e2:	2240      	movs	r2, #64	@ 0x40
 80049e4:	4082      	lsls	r2, r0
 80049e6:	4313      	orrs	r3, r2
 80049e8:	3401      	adds	r4, #1
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f0:	4824      	ldr	r0, [pc, #144]	@ (8004a84 <_svfiprintf_r+0x1e8>)
 80049f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049f6:	2206      	movs	r2, #6
 80049f8:	f7fb fbea 	bl	80001d0 <memchr>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d036      	beq.n	8004a6e <_svfiprintf_r+0x1d2>
 8004a00:	4b21      	ldr	r3, [pc, #132]	@ (8004a88 <_svfiprintf_r+0x1ec>)
 8004a02:	bb1b      	cbnz	r3, 8004a4c <_svfiprintf_r+0x1b0>
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	3307      	adds	r3, #7
 8004a08:	f023 0307 	bic.w	r3, r3, #7
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	9303      	str	r3, [sp, #12]
 8004a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a12:	4433      	add	r3, r6
 8004a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a16:	e76a      	b.n	80048ee <_svfiprintf_r+0x52>
 8004a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	2001      	movs	r0, #1
 8004a20:	e7a8      	b.n	8004974 <_svfiprintf_r+0xd8>
 8004a22:	2300      	movs	r3, #0
 8004a24:	3401      	adds	r4, #1
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f04f 0c0a 	mov.w	ip, #10
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a34:	3a30      	subs	r2, #48	@ 0x30
 8004a36:	2a09      	cmp	r2, #9
 8004a38:	d903      	bls.n	8004a42 <_svfiprintf_r+0x1a6>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0c6      	beq.n	80049cc <_svfiprintf_r+0x130>
 8004a3e:	9105      	str	r1, [sp, #20]
 8004a40:	e7c4      	b.n	80049cc <_svfiprintf_r+0x130>
 8004a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a46:	4604      	mov	r4, r0
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e7f0      	b.n	8004a2e <_svfiprintf_r+0x192>
 8004a4c:	ab03      	add	r3, sp, #12
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	462a      	mov	r2, r5
 8004a52:	4b0e      	ldr	r3, [pc, #56]	@ (8004a8c <_svfiprintf_r+0x1f0>)
 8004a54:	a904      	add	r1, sp, #16
 8004a56:	4638      	mov	r0, r7
 8004a58:	f3af 8000 	nop.w
 8004a5c:	1c42      	adds	r2, r0, #1
 8004a5e:	4606      	mov	r6, r0
 8004a60:	d1d6      	bne.n	8004a10 <_svfiprintf_r+0x174>
 8004a62:	89ab      	ldrh	r3, [r5, #12]
 8004a64:	065b      	lsls	r3, r3, #25
 8004a66:	f53f af2d 	bmi.w	80048c4 <_svfiprintf_r+0x28>
 8004a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a6c:	e72c      	b.n	80048c8 <_svfiprintf_r+0x2c>
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	462a      	mov	r2, r5
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <_svfiprintf_r+0x1f0>)
 8004a76:	a904      	add	r1, sp, #16
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f000 f879 	bl	8004b70 <_printf_i>
 8004a7e:	e7ed      	b.n	8004a5c <_svfiprintf_r+0x1c0>
 8004a80:	08004f08 	.word	0x08004f08
 8004a84:	08004f12 	.word	0x08004f12
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	080047e5 	.word	0x080047e5
 8004a90:	08004f0e 	.word	0x08004f0e

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4616      	mov	r6, r2
 8004a9a:	4698      	mov	r8, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bfb8      	it	lt
 8004aa8:	4613      	movlt	r3, r2
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b10a      	cbz	r2, 8004aba <_printf_common+0x26>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	6833      	ldrmi	r3, [r6, #0]
 8004ac2:	3302      	addmi	r3, #2
 8004ac4:	6033      	strmi	r3, [r6, #0]
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	f015 0506 	ands.w	r5, r5, #6
 8004acc:	d106      	bne.n	8004adc <_printf_common+0x48>
 8004ace:	f104 0a19 	add.w	sl, r4, #25
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dc26      	bgt.n	8004b2a <_printf_common+0x96>
 8004adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	3b00      	subs	r3, #0
 8004ae4:	bf18      	it	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d42b      	bmi.n	8004b44 <_printf_common+0xb0>
 8004aec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004af0:	4641      	mov	r1, r8
 8004af2:	4638      	mov	r0, r7
 8004af4:	47c8      	blx	r9
 8004af6:	3001      	adds	r0, #1
 8004af8:	d01e      	beq.n	8004b38 <_printf_common+0xa4>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	f003 0306 	and.w	r3, r3, #6
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	bf02      	ittt	eq
 8004b06:	68e5      	ldreq	r5, [r4, #12]
 8004b08:	6833      	ldreq	r3, [r6, #0]
 8004b0a:	1aed      	subeq	r5, r5, r3
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	bf0c      	ite	eq
 8004b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b14:	2500      	movne	r5, #0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfc4      	itt	gt
 8004b1a:	1a9b      	subgt	r3, r3, r2
 8004b1c:	18ed      	addgt	r5, r5, r3
 8004b1e:	2600      	movs	r6, #0
 8004b20:	341a      	adds	r4, #26
 8004b22:	42b5      	cmp	r5, r6
 8004b24:	d11a      	bne.n	8004b5c <_printf_common+0xc8>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e008      	b.n	8004b3c <_printf_common+0xa8>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	4641      	mov	r1, r8
 8004b30:	4638      	mov	r0, r7
 8004b32:	47c8      	blx	r9
 8004b34:	3001      	adds	r0, #1
 8004b36:	d103      	bne.n	8004b40 <_printf_common+0xac>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7c6      	b.n	8004ad2 <_printf_common+0x3e>
 8004b44:	18e1      	adds	r1, r4, r3
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	2030      	movs	r0, #48	@ 0x30
 8004b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b4e:	4422      	add	r2, r4
 8004b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b58:	3302      	adds	r3, #2
 8004b5a:	e7c7      	b.n	8004aec <_printf_common+0x58>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4641      	mov	r1, r8
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c8      	blx	r9
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0e6      	beq.n	8004b38 <_printf_common+0xa4>
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7d9      	b.n	8004b22 <_printf_common+0x8e>
	...

08004b70 <_printf_i>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	7e0f      	ldrb	r7, [r1, #24]
 8004b76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b78:	2f78      	cmp	r7, #120	@ 0x78
 8004b7a:	4691      	mov	r9, r2
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	469a      	mov	sl, r3
 8004b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b86:	d807      	bhi.n	8004b98 <_printf_i+0x28>
 8004b88:	2f62      	cmp	r7, #98	@ 0x62
 8004b8a:	d80a      	bhi.n	8004ba2 <_printf_i+0x32>
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	f000 80d1 	beq.w	8004d34 <_printf_i+0x1c4>
 8004b92:	2f58      	cmp	r7, #88	@ 0x58
 8004b94:	f000 80b8 	beq.w	8004d08 <_printf_i+0x198>
 8004b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ba0:	e03a      	b.n	8004c18 <_printf_i+0xa8>
 8004ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ba6:	2b15      	cmp	r3, #21
 8004ba8:	d8f6      	bhi.n	8004b98 <_printf_i+0x28>
 8004baa:	a101      	add	r1, pc, #4	@ (adr r1, 8004bb0 <_printf_i+0x40>)
 8004bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004b99 	.word	0x08004b99
 8004bbc:	08004b99 	.word	0x08004b99
 8004bc0:	08004b99 	.word	0x08004b99
 8004bc4:	08004b99 	.word	0x08004b99
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b99 	.word	0x08004b99
 8004bd0:	08004b99 	.word	0x08004b99
 8004bd4:	08004b99 	.word	0x08004b99
 8004bd8:	08004b99 	.word	0x08004b99
 8004bdc:	08004d1b 	.word	0x08004d1b
 8004be0:	08004c47 	.word	0x08004c47
 8004be4:	08004cd5 	.word	0x08004cd5
 8004be8:	08004b99 	.word	0x08004b99
 8004bec:	08004b99 	.word	0x08004b99
 8004bf0:	08004d3d 	.word	0x08004d3d
 8004bf4:	08004b99 	.word	0x08004b99
 8004bf8:	08004c47 	.word	0x08004c47
 8004bfc:	08004b99 	.word	0x08004b99
 8004c00:	08004b99 	.word	0x08004b99
 8004c04:	08004cdd 	.word	0x08004cdd
 8004c08:	6833      	ldr	r3, [r6, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6032      	str	r2, [r6, #0]
 8004c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e09c      	b.n	8004d56 <_printf_i+0x1e6>
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6031      	str	r1, [r6, #0]
 8004c24:	0606      	lsls	r6, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xbc>
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	e003      	b.n	8004c34 <_printf_i+0xc4>
 8004c2c:	0645      	lsls	r5, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xb8>
 8004c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	da03      	bge.n	8004c40 <_printf_i+0xd0>
 8004c38:	232d      	movs	r3, #45	@ 0x2d
 8004c3a:	426d      	negs	r5, r5
 8004c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c40:	4858      	ldr	r0, [pc, #352]	@ (8004da4 <_printf_i+0x234>)
 8004c42:	230a      	movs	r3, #10
 8004c44:	e011      	b.n	8004c6a <_printf_i+0xfa>
 8004c46:	6821      	ldr	r1, [r4, #0]
 8004c48:	6833      	ldr	r3, [r6, #0]
 8004c4a:	0608      	lsls	r0, r1, #24
 8004c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c50:	d402      	bmi.n	8004c58 <_printf_i+0xe8>
 8004c52:	0649      	lsls	r1, r1, #25
 8004c54:	bf48      	it	mi
 8004c56:	b2ad      	uxthmi	r5, r5
 8004c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c5a:	4852      	ldr	r0, [pc, #328]	@ (8004da4 <_printf_i+0x234>)
 8004c5c:	6033      	str	r3, [r6, #0]
 8004c5e:	bf14      	ite	ne
 8004c60:	230a      	movne	r3, #10
 8004c62:	2308      	moveq	r3, #8
 8004c64:	2100      	movs	r1, #0
 8004c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c6a:	6866      	ldr	r6, [r4, #4]
 8004c6c:	60a6      	str	r6, [r4, #8]
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	db05      	blt.n	8004c7e <_printf_i+0x10e>
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	432e      	orrs	r6, r5
 8004c76:	f021 0104 	bic.w	r1, r1, #4
 8004c7a:	6021      	str	r1, [r4, #0]
 8004c7c:	d04b      	beq.n	8004d16 <_printf_i+0x1a6>
 8004c7e:	4616      	mov	r6, r2
 8004c80:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c84:	fb03 5711 	mls	r7, r3, r1, r5
 8004c88:	5dc7      	ldrb	r7, [r0, r7]
 8004c8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c8e:	462f      	mov	r7, r5
 8004c90:	42bb      	cmp	r3, r7
 8004c92:	460d      	mov	r5, r1
 8004c94:	d9f4      	bls.n	8004c80 <_printf_i+0x110>
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d10b      	bne.n	8004cb2 <_printf_i+0x142>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	07df      	lsls	r7, r3, #31
 8004c9e:	d508      	bpl.n	8004cb2 <_printf_i+0x142>
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	6861      	ldr	r1, [r4, #4]
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	bfde      	ittt	le
 8004ca8:	2330      	movle	r3, #48	@ 0x30
 8004caa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cb2:	1b92      	subs	r2, r2, r6
 8004cb4:	6122      	str	r2, [r4, #16]
 8004cb6:	f8cd a000 	str.w	sl, [sp]
 8004cba:	464b      	mov	r3, r9
 8004cbc:	aa03      	add	r2, sp, #12
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	f7ff fee7 	bl	8004a94 <_printf_common>
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d14a      	bne.n	8004d60 <_printf_i+0x1f0>
 8004cca:	f04f 30ff 	mov.w	r0, #4294967295
 8004cce:	b004      	add	sp, #16
 8004cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f043 0320 	orr.w	r3, r3, #32
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	4832      	ldr	r0, [pc, #200]	@ (8004da8 <_printf_i+0x238>)
 8004cde:	2778      	movs	r7, #120	@ 0x78
 8004ce0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	6831      	ldr	r1, [r6, #0]
 8004ce8:	061f      	lsls	r7, r3, #24
 8004cea:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cee:	d402      	bmi.n	8004cf6 <_printf_i+0x186>
 8004cf0:	065f      	lsls	r7, r3, #25
 8004cf2:	bf48      	it	mi
 8004cf4:	b2ad      	uxthmi	r5, r5
 8004cf6:	6031      	str	r1, [r6, #0]
 8004cf8:	07d9      	lsls	r1, r3, #31
 8004cfa:	bf44      	itt	mi
 8004cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8004d00:	6023      	strmi	r3, [r4, #0]
 8004d02:	b11d      	cbz	r5, 8004d0c <_printf_i+0x19c>
 8004d04:	2310      	movs	r3, #16
 8004d06:	e7ad      	b.n	8004c64 <_printf_i+0xf4>
 8004d08:	4826      	ldr	r0, [pc, #152]	@ (8004da4 <_printf_i+0x234>)
 8004d0a:	e7e9      	b.n	8004ce0 <_printf_i+0x170>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	e7f6      	b.n	8004d04 <_printf_i+0x194>
 8004d16:	4616      	mov	r6, r2
 8004d18:	e7bd      	b.n	8004c96 <_printf_i+0x126>
 8004d1a:	6833      	ldr	r3, [r6, #0]
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	6961      	ldr	r1, [r4, #20]
 8004d20:	1d18      	adds	r0, r3, #4
 8004d22:	6030      	str	r0, [r6, #0]
 8004d24:	062e      	lsls	r6, r5, #24
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	d501      	bpl.n	8004d2e <_printf_i+0x1be>
 8004d2a:	6019      	str	r1, [r3, #0]
 8004d2c:	e002      	b.n	8004d34 <_printf_i+0x1c4>
 8004d2e:	0668      	lsls	r0, r5, #25
 8004d30:	d5fb      	bpl.n	8004d2a <_printf_i+0x1ba>
 8004d32:	8019      	strh	r1, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	4616      	mov	r6, r2
 8004d3a:	e7bc      	b.n	8004cb6 <_printf_i+0x146>
 8004d3c:	6833      	ldr	r3, [r6, #0]
 8004d3e:	1d1a      	adds	r2, r3, #4
 8004d40:	6032      	str	r2, [r6, #0]
 8004d42:	681e      	ldr	r6, [r3, #0]
 8004d44:	6862      	ldr	r2, [r4, #4]
 8004d46:	2100      	movs	r1, #0
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7fb fa41 	bl	80001d0 <memchr>
 8004d4e:	b108      	cbz	r0, 8004d54 <_printf_i+0x1e4>
 8004d50:	1b80      	subs	r0, r0, r6
 8004d52:	6060      	str	r0, [r4, #4]
 8004d54:	6863      	ldr	r3, [r4, #4]
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5e:	e7aa      	b.n	8004cb6 <_printf_i+0x146>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	4632      	mov	r2, r6
 8004d64:	4649      	mov	r1, r9
 8004d66:	4640      	mov	r0, r8
 8004d68:	47d0      	blx	sl
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d0ad      	beq.n	8004cca <_printf_i+0x15a>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	079b      	lsls	r3, r3, #30
 8004d72:	d413      	bmi.n	8004d9c <_printf_i+0x22c>
 8004d74:	68e0      	ldr	r0, [r4, #12]
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	4298      	cmp	r0, r3
 8004d7a:	bfb8      	it	lt
 8004d7c:	4618      	movlt	r0, r3
 8004d7e:	e7a6      	b.n	8004cce <_printf_i+0x15e>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4632      	mov	r2, r6
 8004d84:	4649      	mov	r1, r9
 8004d86:	4640      	mov	r0, r8
 8004d88:	47d0      	blx	sl
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d09d      	beq.n	8004cca <_printf_i+0x15a>
 8004d8e:	3501      	adds	r5, #1
 8004d90:	68e3      	ldr	r3, [r4, #12]
 8004d92:	9903      	ldr	r1, [sp, #12]
 8004d94:	1a5b      	subs	r3, r3, r1
 8004d96:	42ab      	cmp	r3, r5
 8004d98:	dcf2      	bgt.n	8004d80 <_printf_i+0x210>
 8004d9a:	e7eb      	b.n	8004d74 <_printf_i+0x204>
 8004d9c:	2500      	movs	r5, #0
 8004d9e:	f104 0619 	add.w	r6, r4, #25
 8004da2:	e7f5      	b.n	8004d90 <_printf_i+0x220>
 8004da4:	08004f19 	.word	0x08004f19
 8004da8:	08004f2a 	.word	0x08004f2a

08004dac <memmove>:
 8004dac:	4288      	cmp	r0, r1
 8004dae:	b510      	push	{r4, lr}
 8004db0:	eb01 0402 	add.w	r4, r1, r2
 8004db4:	d902      	bls.n	8004dbc <memmove+0x10>
 8004db6:	4284      	cmp	r4, r0
 8004db8:	4623      	mov	r3, r4
 8004dba:	d807      	bhi.n	8004dcc <memmove+0x20>
 8004dbc:	1e43      	subs	r3, r0, #1
 8004dbe:	42a1      	cmp	r1, r4
 8004dc0:	d008      	beq.n	8004dd4 <memmove+0x28>
 8004dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dca:	e7f8      	b.n	8004dbe <memmove+0x12>
 8004dcc:	4402      	add	r2, r0
 8004dce:	4601      	mov	r1, r0
 8004dd0:	428a      	cmp	r2, r1
 8004dd2:	d100      	bne.n	8004dd6 <memmove+0x2a>
 8004dd4:	bd10      	pop	{r4, pc}
 8004dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dde:	e7f7      	b.n	8004dd0 <memmove+0x24>

08004de0 <_sbrk_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d06      	ldr	r5, [pc, #24]	@ (8004dfc <_sbrk_r+0x1c>)
 8004de4:	2300      	movs	r3, #0
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	f7fc f92a 	bl	8001044 <_sbrk>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_sbrk_r+0x1a>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_sbrk_r+0x1a>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	200002e0 	.word	0x200002e0

08004e00 <memcpy>:
 8004e00:	440a      	add	r2, r1
 8004e02:	4291      	cmp	r1, r2
 8004e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e08:	d100      	bne.n	8004e0c <memcpy+0xc>
 8004e0a:	4770      	bx	lr
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e16:	4291      	cmp	r1, r2
 8004e18:	d1f9      	bne.n	8004e0e <memcpy+0xe>
 8004e1a:	bd10      	pop	{r4, pc}

08004e1c <_realloc_r>:
 8004e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e20:	4607      	mov	r7, r0
 8004e22:	4614      	mov	r4, r2
 8004e24:	460d      	mov	r5, r1
 8004e26:	b921      	cbnz	r1, 8004e32 <_realloc_r+0x16>
 8004e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	f7ff bc4d 	b.w	80046cc <_malloc_r>
 8004e32:	b92a      	cbnz	r2, 8004e40 <_realloc_r+0x24>
 8004e34:	f7ff fbde 	bl	80045f4 <_free_r>
 8004e38:	4625      	mov	r5, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e40:	f000 f81a 	bl	8004e78 <_malloc_usable_size_r>
 8004e44:	4284      	cmp	r4, r0
 8004e46:	4606      	mov	r6, r0
 8004e48:	d802      	bhi.n	8004e50 <_realloc_r+0x34>
 8004e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e4e:	d8f4      	bhi.n	8004e3a <_realloc_r+0x1e>
 8004e50:	4621      	mov	r1, r4
 8004e52:	4638      	mov	r0, r7
 8004e54:	f7ff fc3a 	bl	80046cc <_malloc_r>
 8004e58:	4680      	mov	r8, r0
 8004e5a:	b908      	cbnz	r0, 8004e60 <_realloc_r+0x44>
 8004e5c:	4645      	mov	r5, r8
 8004e5e:	e7ec      	b.n	8004e3a <_realloc_r+0x1e>
 8004e60:	42b4      	cmp	r4, r6
 8004e62:	4622      	mov	r2, r4
 8004e64:	4629      	mov	r1, r5
 8004e66:	bf28      	it	cs
 8004e68:	4632      	movcs	r2, r6
 8004e6a:	f7ff ffc9 	bl	8004e00 <memcpy>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff fbbf 	bl	80045f4 <_free_r>
 8004e76:	e7f1      	b.n	8004e5c <_realloc_r+0x40>

08004e78 <_malloc_usable_size_r>:
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f18      	subs	r0, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbc      	itt	lt
 8004e82:	580b      	ldrlt	r3, [r1, r0]
 8004e84:	18c0      	addlt	r0, r0, r3
 8004e86:	4770      	bx	lr

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
