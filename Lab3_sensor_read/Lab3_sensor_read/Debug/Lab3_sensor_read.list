
Lab3_sensor_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b60  08004b60  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b60  08004b60  00005b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b68  08004b68  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b68  08004b68  00005b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b6c  08004b6c  00005b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004bcc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004bcc  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d668  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccd  00000000  00000000  000136f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  000153c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093f  00000000  00000000  00015fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026376  00000000  00000000  000168ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc16  00000000  00000000  0003cc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eacdc  00000000  00000000  0004c87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003640  00000000  00000000  0013759c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0013abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ab4 	.word	0x08004ab4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004ab4 	.word	0x08004ab4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fbd7 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f839 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8f9 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f8c7 	bl	8000740 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b2:	f000 f885 	bl	80006c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Just initialize the sensor (no UART messages)
  ISL29125_Init();
 80005b6:	f000 f99d 	bl	80008f4 <ISL29125_Init>
//	  if (ISL29125_ReadRGB(&r, &g, &b) == HAL_OK) {
//	      int len = snprintf(msg, sizeof(msg), "R=%u G=%u B=%u\r\n", r, g, b);
//	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
//	  }
//	  HAL_Delay(500);
	  if (ISL29125_ReadRGBPercent(&r_pct, &g_pct, &b_pct) == HAL_OK) {
 80005ba:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <main+0x68>)
 80005bc:	4912      	ldr	r1, [pc, #72]	@ (8000608 <main+0x6c>)
 80005be:	4813      	ldr	r0, [pc, #76]	@ (800060c <main+0x70>)
 80005c0:	f000 f9ce 	bl	8000960 <ISL29125_ReadRGBPercent>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d116      	bne.n	80005f8 <main+0x5c>
	      int len = snprintf(msg, sizeof(msg),"R=%d%% G=%d%% B=%d%%\r\n",r_pct, g_pct, b_pct);
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <main+0x70>)
 80005cc:	6819      	ldr	r1, [r3, #0]
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <main+0x6c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <main+0x68>)
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	9201      	str	r2, [sp, #4]
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	460b      	mov	r3, r1
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <main+0x74>)
 80005de:	2140      	movs	r1, #64	@ 0x40
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <main+0x78>)
 80005e2:	f003 fdb3 	bl	800414c <sniprintf>
 80005e6:	6078      	str	r0, [r7, #4]
	      HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	4908      	ldr	r1, [pc, #32]	@ (8000614 <main+0x78>)
 80005f2:	4809      	ldr	r0, [pc, #36]	@ (8000618 <main+0x7c>)
 80005f4:	f003 f84c 	bl	8003690 <HAL_UART_Transmit>
	  }
	  HAL_Delay(500);
 80005f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fc:	f000 fc26 	bl	8000e4c <HAL_Delay>
	  if (ISL29125_ReadRGBPercent(&r_pct, &g_pct, &b_pct) == HAL_OK) {
 8000600:	e7db      	b.n	80005ba <main+0x1e>
 8000602:	bf00      	nop
 8000604:	2000019c 	.word	0x2000019c
 8000608:	20000198 	.word	0x20000198
 800060c:	20000194 	.word	0x20000194
 8000610:	08004acc 	.word	0x08004acc
 8000614:	20000154 	.word	0x20000154
 8000618:	200000cc 	.word	0x200000cc

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	@ 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	@ 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fdc4 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000642:	f001 fcc5 	bl	8001fd0 <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 f9fc 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2310      	movs	r3, #16
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066a:	230a      	movs	r3, #10
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fcfc 	bl	800207c <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800068a:	f000 f9dd 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f8c4 	bl	8002834 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b2:	f000 f9c9 	bl	8000a48 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3758      	adds	r7, #88	@ 0x58
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000738 <MX_I2C1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <MX_I2C1_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006fc:	f000 fe72 	bl	80013e4 <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 f99f 	bl	8000a48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	@ (8000734 <MX_I2C1_Init+0x74>)
 800070e:	f001 fbb9 	bl	8001e84 <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 f996 	bl	8000a48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_I2C1_Init+0x74>)
 8000720:	f001 fbfb 	bl	8001f1a <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f98d 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000078 	.word	0x20000078
 8000738:	40005400 	.word	0x40005400
 800073c:	10d19ce4 	.word	0x10d19ce4

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <MX_USART2_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000784:	f002 ff36 	bl	80035f4 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f95b 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000cc 	.word	0x200000cc
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a24      	ldr	r2, [pc, #144]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <MX_GPIO_Init+0xc4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f000 fdc9 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000828:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	@ (8000868 <MX_GPIO_Init+0xc8>)
 800083a:	f000 fc11 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083e:	2320      	movs	r3, #32
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f000 fc02 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	48000800 	.word	0x48000800

0800086c <ISL29125_WriteRegister>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef ISL29125_WriteRegister(uint8_t reg, uint8_t value) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {reg, value};
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	733b      	strb	r3, [r7, #12]
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, buf, 2, HAL_MAX_DELAY);
 8000884:	f107 020c 	add.w	r2, r7, #12
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2302      	movs	r3, #2
 8000890:	2188      	movs	r1, #136	@ 0x88
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <ISL29125_WriteRegister+0x38>)
 8000894:	f000 fe42 	bl	800151c <HAL_I2C_Master_Transmit>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000078 	.word	0x20000078

080008a8 <ISL29125_ReadRegister>:

HAL_StatusTypeDef ISL29125_ReadRegister(uint8_t reg, uint8_t *value) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef ret;
    ret = HAL_I2C_Master_Transmit(&hi2c1, ISL29125_ADDR, &reg, 1, HAL_MAX_DELAY);
 80008b4:	1dfa      	adds	r2, r7, #7
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	2188      	movs	r1, #136	@ 0x88
 80008c0:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <ISL29125_ReadRegister+0x48>)
 80008c2:	f000 fe2b 	bl	800151c <HAL_I2C_Master_Transmit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) return ret;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <ISL29125_ReadRegister+0x2c>
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	e009      	b.n	80008e8 <ISL29125_ReadRegister+0x40>
    return HAL_I2C_Master_Receive(&hi2c1, ISL29125_ADDR, value, 1, HAL_MAX_DELAY);
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	2188      	movs	r1, #136	@ 0x88
 80008e0:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <ISL29125_ReadRegister+0x48>)
 80008e2:	f000 ff33 	bl	800174c <HAL_I2C_Master_Receive>
 80008e6:	4603      	mov	r3, r0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000078 	.word	0x20000078

080008f4 <ISL29125_Init>:

HAL_StatusTypeDef ISL29125_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    uint8_t device_id;

    // 1. Read device ID to verify sensor is connected
    ret = ISL29125_ReadRegister(ISL29125_REG_DEVICE_ID, &device_id);
 80008fa:	1dbb      	adds	r3, r7, #6
 80008fc:	4619      	mov	r1, r3
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff ffd2 	bl	80008a8 <ISL29125_ReadRegister>
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <ISL29125_Init+0x1e>
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	e021      	b.n	8000956 <ISL29125_Init+0x62>

    // 2. Configure sensor for RGB mode, 16-bit ADC, 375 lux
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG1, CONFIG1_MODE_RGB_16BIT);
 8000912:	2105      	movs	r1, #5
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff ffa9 	bl	800086c <ISL29125_WriteRegister>
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <ISL29125_Init+0x34>
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	e016      	b.n	8000956 <ISL29125_Init+0x62>

    // 3. Set IR compensation to max (recommended for high lux)
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG2, CONFIG2_IR_MAX);
 8000928:	21bf      	movs	r1, #191	@ 0xbf
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff ff9e 	bl	800086c <ISL29125_WriteRegister>
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <ISL29125_Init+0x4a>
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	e00b      	b.n	8000956 <ISL29125_Init+0x62>

    // 4. Set default CONFIG3 (no interrupts, default settings)
    ret = ISL29125_WriteRegister(ISL29125_REG_CONFIG3, CONFIG3_DEFAULT);
 800093e:	2100      	movs	r1, #0
 8000940:	2003      	movs	r0, #3
 8000942:	f7ff ff93 	bl	800086c <ISL29125_WriteRegister>
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) return ret;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <ISL29125_Init+0x60>
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	e000      	b.n	8000956 <ISL29125_Init+0x62>

    // Sensor initialized successfully
    return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <ISL29125_ReadRGBPercent>:
//    *b = (hi << 8) | lo;
//
//    return HAL_OK;
//}

HAL_StatusTypeDef ISL29125_ReadRGBPercent(int *r_perc, int *g_perc, int *b_perc) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
    uint8_t lo, hi;
    uint16_t r_raw, g_raw, b_raw;

    // Read Green
    ISL29125_ReadRegister(ISL29125_REG_GREEN_L, &lo);
 800096c:	f107 0311 	add.w	r3, r7, #17
 8000970:	4619      	mov	r1, r3
 8000972:	2009      	movs	r0, #9
 8000974:	f7ff ff98 	bl	80008a8 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_GREEN_H, &hi);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	200a      	movs	r0, #10
 8000980:	f7ff ff92 	bl	80008a8 <ISL29125_ReadRegister>
    g_raw = (hi << 8) | lo;
 8000984:	7c3b      	ldrb	r3, [r7, #16]
 8000986:	b21b      	sxth	r3, r3
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	b21a      	sxth	r2, r3
 800098c:	7c7b      	ldrb	r3, [r7, #17]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	82fb      	strh	r3, [r7, #22]

    // Read Red
    ISL29125_ReadRegister(ISL29125_REG_RED_L, &lo);
 8000996:	f107 0311 	add.w	r3, r7, #17
 800099a:	4619      	mov	r1, r3
 800099c:	200b      	movs	r0, #11
 800099e:	f7ff ff83 	bl	80008a8 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_RED_H, &hi);
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4619      	mov	r1, r3
 80009a8:	200c      	movs	r0, #12
 80009aa:	f7ff ff7d 	bl	80008a8 <ISL29125_ReadRegister>
    r_raw = (hi << 8) | lo;
 80009ae:	7c3b      	ldrb	r3, [r7, #16]
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	021b      	lsls	r3, r3, #8
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	7c7b      	ldrb	r3, [r7, #17]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	82bb      	strh	r3, [r7, #20]

    // Read Blue
    ISL29125_ReadRegister(ISL29125_REG_BLUE_L, &lo);
 80009c0:	f107 0311 	add.w	r3, r7, #17
 80009c4:	4619      	mov	r1, r3
 80009c6:	200d      	movs	r0, #13
 80009c8:	f7ff ff6e 	bl	80008a8 <ISL29125_ReadRegister>
    ISL29125_ReadRegister(ISL29125_REG_BLUE_H, &hi);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	200e      	movs	r0, #14
 80009d4:	f7ff ff68 	bl	80008a8 <ISL29125_ReadRegister>
    b_raw = (hi << 8) | lo;
 80009d8:	7c3b      	ldrb	r3, [r7, #16]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b21a      	sxth	r2, r3
 80009e0:	7c7b      	ldrb	r3, [r7, #17]
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	827b      	strh	r3, [r7, #18]

    // Convert to percentage of sensor range (0–65535)
    *r_perc = (r_raw * 100) / 65535;
 80009ea:	8abb      	ldrh	r3, [r7, #20]
 80009ec:	2264      	movs	r2, #100	@ 0x64
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <ISL29125_ReadRGBPercent+0xe4>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	441a      	add	r2, r3
 80009fa:	13d2      	asrs	r2, r2, #15
 80009fc:	17db      	asrs	r3, r3, #31
 80009fe:	1ad2      	subs	r2, r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	601a      	str	r2, [r3, #0]
    *g_perc = (g_raw * 100) / 65535;
 8000a04:	8afb      	ldrh	r3, [r7, #22]
 8000a06:	2264      	movs	r2, #100	@ 0x64
 8000a08:	fb02 f303 	mul.w	r3, r2, r3
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <ISL29125_ReadRGBPercent+0xe4>)
 8000a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a12:	441a      	add	r2, r3
 8000a14:	13d2      	asrs	r2, r2, #15
 8000a16:	17db      	asrs	r3, r3, #31
 8000a18:	1ad2      	subs	r2, r2, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	601a      	str	r2, [r3, #0]
    *b_perc = (b_raw * 100) / 65535;
 8000a1e:	8a7b      	ldrh	r3, [r7, #18]
 8000a20:	2264      	movs	r2, #100	@ 0x64
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <ISL29125_ReadRGBPercent+0xe4>)
 8000a28:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2c:	441a      	add	r2, r3
 8000a2e:	13d2      	asrs	r2, r2, #15
 8000a30:	17db      	asrs	r3, r3, #31
 8000a32:	1ad2      	subs	r2, r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	80008001 	.word	0x80008001

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2288      	movs	r2, #136	@ 0x88
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fb7b 	bl	80041b8 <memset>
  if(hi2c->Instance==I2C1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <HAL_I2C_MspInit+0xb0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d13b      	bne.n	8000b44 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 f8cf 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ae4:	f7ff ffb0 	bl	8000a48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aec:	4a18      	ldr	r2, [pc, #96]	@ (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b08:	2312      	movs	r3, #18
 8000b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <HAL_I2C_MspInit+0xb8>)
 8000b28:	f000 fa9a 	bl	8001060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000b32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <HAL_I2C_MspInit+0xb4>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b44:	bf00      	nop
 8000b46:	37b0      	adds	r7, #176	@ 0xb0
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000400 	.word	0x48000400

08000b58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2288      	movs	r2, #136	@ 0x88
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fb1d 	bl	80041b8 <memset>
  if(huart->Instance==USART2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a21      	ldr	r2, [pc, #132]	@ (8000c08 <HAL_UART_MspInit+0xb0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d13b      	bne.n	8000c00 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 f871 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba0:	f7ff ff52 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_UART_MspInit+0xb4>)
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba8:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <HAL_UART_MspInit+0xb4>)
 8000baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc0:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bec:	2307      	movs	r3, #7
 8000bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f000 fa30 	bl	8001060 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c00:	bf00      	nop
 8000c02:	37b0      	adds	r7, #176	@ 0xb0
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f8d1 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f003 fa92 	bl	80041c8 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20018000 	.word	0x20018000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	200001a0 	.word	0x200001a0
 8000cd8:	200002f0 	.word	0x200002f0

08000cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	@ (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	@ (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f003 fa51 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fc33 	bl	800059c <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d44:	08004b70 	.word	0x08004b70
  ldr r2, =_sbss
 8000d48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d4c:	200002f0 	.word	0x200002f0

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_Init+0x3c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <HAL_Init+0x3c>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f944 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 f80f 	bl	8000d94 <HAL_InitTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e001      	b.n	8000d86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d82:	f7ff fe67 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <HAL_InitTick+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d023      	beq.n	8000df0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <HAL_InitTick+0x70>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f941 	bl	8001046 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10f      	bne.n	8000dea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d809      	bhi.n	8000de4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f919 	bl	800100e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_InitTick+0x74>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200001a4 	.word	0x200001a4

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001a4 	.word	0x200001a4

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	@ (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	@ (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	@ 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff47 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff5c 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffb0 	bl	8000fb4 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106e:	e17f      	b.n	8001370 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2101      	movs	r1, #1
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 8171 	beq.w	800136a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b01      	cmp	r3, #1
 8001092:	d005      	beq.n	80010a0 <HAL_GPIO_Init+0x40>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d130      	bne.n	8001102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010d6:	2201      	movs	r2, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	f003 0201 	and.w	r2, r3, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b03      	cmp	r3, #3
 800110c:	d118      	bne.n	8001140 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001114:	2201      	movs	r2, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	f003 0201 	and.w	r2, r3, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b03      	cmp	r3, #3
 800114a:	d017      	beq.n	800117c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80ac 	beq.w	800136a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b5f      	ldr	r3, [pc, #380]	@ (8001390 <HAL_GPIO_Init+0x330>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001216:	4a5e      	ldr	r2, [pc, #376]	@ (8001390 <HAL_GPIO_Init+0x330>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6613      	str	r3, [r2, #96]	@ 0x60
 800121e:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <HAL_GPIO_Init+0x330>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800122a:	4a5a      	ldr	r2, [pc, #360]	@ (8001394 <HAL_GPIO_Init+0x334>)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x242>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	@ (8001398 <HAL_GPIO_Init+0x338>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x23e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4e      	ldr	r2, [pc, #312]	@ (800139c <HAL_GPIO_Init+0x33c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x23a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4d      	ldr	r2, [pc, #308]	@ (80013a0 <HAL_GPIO_Init+0x340>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x236>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4c      	ldr	r2, [pc, #304]	@ (80013a4 <HAL_GPIO_Init+0x344>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x232>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4b      	ldr	r2, [pc, #300]	@ (80013a8 <HAL_GPIO_Init+0x348>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x22e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4a      	ldr	r2, [pc, #296]	@ (80013ac <HAL_GPIO_Init+0x34c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x22a>
 8001286:	2306      	movs	r3, #6
 8001288:	e00c      	b.n	80012a4 <HAL_GPIO_Init+0x244>
 800128a:	2307      	movs	r3, #7
 800128c:	e00a      	b.n	80012a4 <HAL_GPIO_Init+0x244>
 800128e:	2305      	movs	r3, #5
 8001290:	e008      	b.n	80012a4 <HAL_GPIO_Init+0x244>
 8001292:	2304      	movs	r3, #4
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x244>
 8001296:	2303      	movs	r3, #3
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x244>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x244>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x244>
 80012a2:	2300      	movs	r3, #0
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012b4:	4937      	ldr	r1, [pc, #220]	@ (8001394 <HAL_GPIO_Init+0x334>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c2:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012e6:	4a32      	ldr	r2, [pc, #200]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ec:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001310:	4a27      	ldr	r2, [pc, #156]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001316:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800133a:	4a1d      	ldr	r2, [pc, #116]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001364:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <HAL_GPIO_Init+0x350>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	f47f ae78 	bne.w	8001070 <HAL_GPIO_Init+0x10>
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	48000400 	.word	0x48000400
 800139c:	48000800 	.word	0x48000800
 80013a0:	48000c00 	.word	0x48000c00
 80013a4:	48001000 	.word	0x48001000
 80013a8:	48001400 	.word	0x48001400
 80013ac:	48001800 	.word	0x48001800
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e08d      	b.n	8001512 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fb46 	bl	8000a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2224      	movs	r2, #36	@ 0x24
 8001414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001434:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001444:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	e006      	b.n	800146c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800146a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d108      	bne.n	8001486 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	e007      	b.n	8001496 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001494:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69d9      	ldr	r1, [r3, #28]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1a      	ldr	r2, [r3, #32]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	461a      	mov	r2, r3
 8001528:	460b      	mov	r3, r1
 800152a:	817b      	strh	r3, [r7, #10]
 800152c:	4613      	mov	r3, r2
 800152e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b20      	cmp	r3, #32
 800153a:	f040 80fd 	bne.w	8001738 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_I2C_Master_Transmit+0x30>
 8001548:	2302      	movs	r3, #2
 800154a:	e0f6      	b.n	800173a <HAL_I2C_Master_Transmit+0x21e>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001554:	f7ff fc6e 	bl	8000e34 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2319      	movs	r3, #25
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fa0a 	bl	8001980 <I2C_WaitOnFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0e1      	b.n	800173a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2221      	movs	r2, #33	@ 0x21
 800157a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2210      	movs	r2, #16
 8001582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	893a      	ldrh	r2, [r7, #8]
 8001596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2bff      	cmp	r3, #255	@ 0xff
 80015a6:	d906      	bls.n	80015b6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	22ff      	movs	r2, #255	@ 0xff
 80015ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80015ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e007      	b.n	80015c6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d024      	beq.n	8001618 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001602:	b2db      	uxtb	r3, r3
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	8979      	ldrh	r1, [r7, #10]
 800160a:	4b4e      	ldr	r3, [pc, #312]	@ (8001744 <HAL_I2C_Master_Transmit+0x228>)
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fc05 	bl	8001e20 <I2C_TransferConfig>
 8001616:	e066      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161c:	b2da      	uxtb	r2, r3
 800161e:	8979      	ldrh	r1, [r7, #10]
 8001620:	4b48      	ldr	r3, [pc, #288]	@ (8001744 <HAL_I2C_Master_Transmit+0x228>)
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fbfa 	bl	8001e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800162c:	e05b      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f9fd 	bl	8001a32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07b      	b.n	800173a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165c:	b29b      	uxth	r3, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001676:	b29b      	uxth	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d034      	beq.n	80016e6 <HAL_I2C_Master_Transmit+0x1ca>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001680:	2b00      	cmp	r3, #0
 8001682:	d130      	bne.n	80016e6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	2200      	movs	r2, #0
 800168c:	2180      	movs	r1, #128	@ 0x80
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f976 	bl	8001980 <I2C_WaitOnFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e04d      	b.n	800173a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2bff      	cmp	r3, #255	@ 0xff
 80016a6:	d90e      	bls.n	80016c6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	22ff      	movs	r2, #255	@ 0xff
 80016ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	8979      	ldrh	r1, [r7, #10]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 fbae 	bl	8001e20 <I2C_TransferConfig>
 80016c4:	e00f      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	8979      	ldrh	r1, [r7, #10]
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 fb9d 	bl	8001e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d19e      	bne.n	800162e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	6a39      	ldr	r1, [r7, #32]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f9e3 	bl	8001ac0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e01a      	b.n	800173a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2220      	movs	r2, #32
 800170a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6859      	ldr	r1, [r3, #4]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_I2C_Master_Transmit+0x22c>)
 8001718:	400b      	ands	r3, r1
 800171a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001738:	2302      	movs	r3, #2
  }
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	80002000 	.word	0x80002000
 8001748:	fe00e800 	.word	0xfe00e800

0800174c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	461a      	mov	r2, r3
 8001758:	460b      	mov	r3, r1
 800175a:	817b      	strh	r3, [r7, #10]
 800175c:	4613      	mov	r3, r2
 800175e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b20      	cmp	r3, #32
 800176a:	f040 80db 	bne.w	8001924 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2C_Master_Receive+0x30>
 8001778:	2302      	movs	r3, #2
 800177a:	e0d4      	b.n	8001926 <HAL_I2C_Master_Receive+0x1da>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001784:	f7ff fb56 	bl	8000e34 <HAL_GetTick>
 8001788:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2319      	movs	r3, #25
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f8f2 	bl	8001980 <I2C_WaitOnFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0bf      	b.n	8001926 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2222      	movs	r2, #34	@ 0x22
 80017aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2210      	movs	r2, #16
 80017b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	893a      	ldrh	r2, [r7, #8]
 80017c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2bff      	cmp	r3, #255	@ 0xff
 80017d6:	d90e      	bls.n	80017f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	8979      	ldrh	r1, [r7, #10]
 80017e6:	4b52      	ldr	r3, [pc, #328]	@ (8001930 <HAL_I2C_Master_Receive+0x1e4>)
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fb16 	bl	8001e20 <I2C_TransferConfig>
 80017f4:	e06d      	b.n	80018d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	b2da      	uxtb	r2, r3
 8001806:	8979      	ldrh	r1, [r7, #10]
 8001808:	4b49      	ldr	r3, [pc, #292]	@ (8001930 <HAL_I2C_Master_Receive+0x1e4>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fb05 	bl	8001e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001816:	e05c      	b.n	80018d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	6a39      	ldr	r1, [r7, #32]
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f993 	bl	8001b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e07c      	b.n	8001926 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d034      	beq.n	80018d2 <HAL_I2C_Master_Receive+0x186>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	d130      	bne.n	80018d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	2200      	movs	r2, #0
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f880 	bl	8001980 <I2C_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e04d      	b.n	8001926 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	2bff      	cmp	r3, #255	@ 0xff
 8001892:	d90e      	bls.n	80018b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	22ff      	movs	r2, #255	@ 0xff
 8001898:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	8979      	ldrh	r1, [r7, #10]
 80018a2:	2300      	movs	r3, #0
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fab8 	bl	8001e20 <I2C_TransferConfig>
 80018b0:	e00f      	b.n	80018d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	8979      	ldrh	r1, [r7, #10]
 80018c4:	2300      	movs	r3, #0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 faa7 	bl	8001e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d19d      	bne.n	8001818 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	6a39      	ldr	r1, [r7, #32]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f8ed 	bl	8001ac0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e01a      	b.n	8001926 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2220      	movs	r2, #32
 80018f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6859      	ldr	r1, [r3, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <HAL_I2C_Master_Receive+0x1e8>)
 8001904:	400b      	ands	r3, r1
 8001906:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	80002400 	.word	0x80002400
 8001934:	fe00e800 	.word	0xfe00e800

08001938 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b02      	cmp	r3, #2
 800194c:	d103      	bne.n	8001956 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d007      	beq.n	8001974 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	619a      	str	r2, [r3, #24]
  }
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001990:	e03b      	b.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f962 	bl	8001c60 <I2C_IsErrorOccurred>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e041      	b.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d02d      	beq.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ae:	f7ff fa41 	bl	8000e34 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d302      	bcc.n	80019c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d122      	bne.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4013      	ands	r3, r2
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d113      	bne.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	f043 0220 	orr.w	r2, r3, #32
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699a      	ldr	r2, [r3, #24]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4013      	ands	r3, r2
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	bf0c      	ite	eq
 8001a1a:	2301      	moveq	r3, #1
 8001a1c:	2300      	movne	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d0b4      	beq.n	8001992 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a3e:	e033      	b.n	8001aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f90b 	bl	8001c60 <I2C_IsErrorOccurred>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e031      	b.n	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d025      	beq.n	8001aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5c:	f7ff f9ea 	bl	8000e34 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d302      	bcc.n	8001a72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11a      	bne.n	8001aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d013      	beq.n	8001aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e007      	b.n	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d1c4      	bne.n	8001a40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001acc:	e02f      	b.n	8001b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f8c4 	bl	8001c60 <I2C_IsErrorOccurred>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e02d      	b.n	8001b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae2:	f7ff f9a7 	bl	8000e34 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d302      	bcc.n	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11a      	bne.n	8001b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d013      	beq.n	8001b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e007      	b.n	8001b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d1c8      	bne.n	8001ace <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001b58:	e071      	b.n	8001c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f87e 	bl	8001c60 <I2C_IsErrorOccurred>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d13b      	bne.n	8001bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d138      	bne.n	8001bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d105      	bne.n	8001b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d121      	bne.n	8001bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2210      	movs	r2, #16
 8001bb0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001bcc:	400b      	ands	r3, r1
 8001bce:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	75fb      	strb	r3, [r7, #23]
 8001bec:	e002      	b.n	8001bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001bf4:	f7ff f91e 	bl	8000e34 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d302      	bcc.n	8001c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d119      	bne.n	8001c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d116      	bne.n	8001c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d00f      	beq.n	8001c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	f043 0220 	orr.w	r2, r3, #32
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d002      	beq.n	8001c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d083      	beq.n	8001b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	fe00e800 	.word	0xfe00e800

08001c60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d068      	beq.n	8001d5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2210      	movs	r2, #16
 8001c92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c94:	e049      	b.n	8001d2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d045      	beq.n	8001d2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c9e:	f7ff f8c9 	bl	8000e34 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d302      	bcc.n	8001cb4 <I2C_IsErrorOccurred+0x54>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13a      	bne.n	8001d2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001cc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cd6:	d121      	bne.n	8001d1c <I2C_IsErrorOccurred+0xbc>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cde:	d01d      	beq.n	8001d1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d01a      	beq.n	8001d1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cf6:	f7ff f89d 	bl	8000e34 <HAL_GetTick>
 8001cfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cfc:	e00e      	b.n	8001d1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cfe:	f7ff f899 	bl	8000e34 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b19      	cmp	r3, #25
 8001d0a:	d907      	bls.n	8001d1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d1a:	e006      	b.n	8001d2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d1e9      	bne.n	8001cfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d003      	beq.n	8001d40 <I2C_IsErrorOccurred+0xe0>
 8001d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0aa      	beq.n	8001c96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d103      	bne.n	8001d50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01c      	beq.n	8001e0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff fdaf 	bl	8001938 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <I2C_IsErrorOccurred+0x1bc>)
 8001de6:	400b      	ands	r3, r1
 8001de8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3728      	adds	r7, #40	@ 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	fe00e800 	.word	0xfe00e800

08001e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	817b      	strh	r3, [r7, #10]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e38:	7a7b      	ldrb	r3, [r7, #9]
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	0d5b      	lsrs	r3, r3, #21
 8001e5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <I2C_TransferConfig+0x60>)
 8001e60:	430b      	orrs	r3, r1
 8001e62:	43db      	mvns	r3, r3
 8001e64:	ea02 0103 	and.w	r1, r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	03ff63ff 	.word	0x03ff63ff

08001e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d138      	bne.n	8001f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e032      	b.n	8001f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	@ 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d139      	bne.n	8001fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e033      	b.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2224      	movs	r2, #36	@ 0x24
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fb8:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <HAL_PWREx_GetVoltageRange+0x18>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40007000 	.word	0x40007000

08001fd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fde:	d130      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fec:	d038      	beq.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2232      	movs	r2, #50	@ 0x32
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9b      	lsrs	r3, r3, #18
 8002010:	3301      	adds	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002014:	e002      	b.n	800201c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3b01      	subs	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002028:	d102      	bne.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x60>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f2      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002030:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203c:	d110      	bne.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e00f      	b.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204e:	d007      	beq.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002050:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002058:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000
 8002074:	20000000 	.word	0x20000000
 8002078:	431bde83 	.word	0x431bde83

0800207c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e3ca      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208e:	4b97      	ldr	r3, [pc, #604]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002098:	4b94      	ldr	r3, [pc, #592]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80e4 	beq.w	8002278 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4a>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	f040 808b 	bne.w	80021d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	f040 8087 	bne.w	80021d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c6:	4b89      	ldr	r3, [pc, #548]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x62>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e3a2      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	4b82      	ldr	r3, [pc, #520]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <HAL_RCC_OscConfig+0x7c>
 80020ee:	4b7f      	ldr	r3, [pc, #508]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020f6:	e005      	b.n	8002104 <HAL_RCC_OscConfig+0x88>
 80020f8:	4b7c      	ldr	r3, [pc, #496]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002104:	4293      	cmp	r3, r2
 8002106:	d223      	bcs.n	8002150 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fd55 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e383      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211c:	4b73      	ldr	r3, [pc, #460]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a72      	ldr	r2, [pc, #456]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b70      	ldr	r3, [pc, #448]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	496d      	ldr	r1, [pc, #436]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213a:	4b6c      	ldr	r3, [pc, #432]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4968      	ldr	r1, [pc, #416]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
 800214e:	e025      	b.n	800219c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002150:	4b66      	ldr	r3, [pc, #408]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4960      	ldr	r1, [pc, #384]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216e:	4b5f      	ldr	r3, [pc, #380]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	495b      	ldr	r1, [pc, #364]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fd15 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e343      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800219c:	f000 fc4a 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b52      	ldr	r3, [pc, #328]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	4950      	ldr	r1, [pc, #320]	@ (80022f0 <HAL_RCC_OscConfig+0x274>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	4a4e      	ldr	r2, [pc, #312]	@ (80022f4 <HAL_RCC_OscConfig+0x278>)
 80021ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021bc:	4b4e      	ldr	r3, [pc, #312]	@ (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fde7 	bl	8000d94 <HAL_InitTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d052      	beq.n	8002276 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	e327      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d032      	beq.n	8002242 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021dc:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a42      	ldr	r2, [pc, #264]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe24 	bl	8000e34 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f0:	f7fe fe20 	bl	8000e34 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e310      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002202:	4b3a      	ldr	r3, [pc, #232]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800220e:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a36      	ldr	r2, [pc, #216]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4931      	ldr	r1, [pc, #196]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800222c:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	492c      	ldr	r1, [pc, #176]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
 8002240:	e01a      	b.n	8002278 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002242:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a29      	ldr	r2, [pc, #164]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800224e:	f7fe fdf1 	bl	8000e34 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002256:	f7fe fded 	bl	8000e34 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e2dd      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002268:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x1da>
 8002274:	e000      	b.n	8002278 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002276:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d074      	beq.n	800236e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x21a>
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d10e      	bne.n	80022ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d10b      	bne.n	80022ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d064      	beq.n	800236c <HAL_RCC_OscConfig+0x2f0>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d160      	bne.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e2ba      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x24a>
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0b      	ldr	r2, [pc, #44]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e026      	b.n	8002314 <HAL_RCC_OscConfig+0x298>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022ce:	d115      	bne.n	80022fc <HAL_RCC_OscConfig+0x280>
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80022d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a02      	ldr	r2, [pc, #8]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x298>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08004ae4 	.word	0x08004ae4
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004
 80022fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a9f      	ldr	r2, [pc, #636]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b9d      	ldr	r3, [pc, #628]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a9c      	ldr	r2, [pc, #624]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fd8a 	bl	8000e34 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fd86 	bl	8000e34 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e276      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	4b92      	ldr	r3, [pc, #584]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x2a8>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fd76 	bl	8000e34 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fd72 	bl	8000e34 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e262      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235e:	4b88      	ldr	r3, [pc, #544]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x2d0>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d060      	beq.n	800243c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x310>
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d119      	bne.n	80023ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d116      	bne.n	80023ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238c:	4b7c      	ldr	r3, [pc, #496]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_OscConfig+0x328>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e23f      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b76      	ldr	r3, [pc, #472]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	4973      	ldr	r1, [pc, #460]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	e040      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d023      	beq.n	800240a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fd31 	bl	8000e34 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7fe fd2d 	bl	8000e34 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e21d      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e8:	4b65      	ldr	r3, [pc, #404]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b62      	ldr	r3, [pc, #392]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	495f      	ldr	r1, [pc, #380]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
 8002408:	e018      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b5d      	ldr	r3, [pc, #372]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a5c      	ldr	r2, [pc, #368]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7fe fd0d 	bl	8000e34 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe fd09 	bl	8000e34 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1f9      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002430:	4b53      	ldr	r3, [pc, #332]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d03c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01c      	beq.n	800248a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002450:	4b4b      	ldr	r3, [pc, #300]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002456:	4a4a      	ldr	r2, [pc, #296]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fce8 	bl	8000e34 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe fce4 	bl	8000e34 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1d4      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247a:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ef      	beq.n	8002468 <HAL_RCC_OscConfig+0x3ec>
 8002488:	e01b      	b.n	80024c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248a:	4b3d      	ldr	r3, [pc, #244]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800248c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002490:	4a3b      	ldr	r2, [pc, #236]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe fccb 	bl	8000e34 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a2:	f7fe fcc7 	bl	8000e34 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1b7      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b4:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ef      	bne.n	80024a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80a6 	beq.w	800261c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	4a26      	ldr	r2, [pc, #152]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ec:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f8:	2301      	movs	r3, #1
 80024fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fc:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <HAL_RCC_OscConfig+0x508>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d118      	bne.n	800253a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002508:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <HAL_RCC_OscConfig+0x508>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1d      	ldr	r2, [pc, #116]	@ (8002584 <HAL_RCC_OscConfig+0x508>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002514:	f7fe fc8e 	bl	8000e34 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251c:	f7fe fc8a 	bl	8000e34 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e17a      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_RCC_OscConfig+0x508>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <HAL_RCC_OscConfig+0x4d8>
 8002542:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002548:	4a0d      	ldr	r2, [pc, #52]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002552:	e029      	b.n	80025a8 <HAL_RCC_OscConfig+0x52c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d115      	bne.n	8002588 <HAL_RCC_OscConfig+0x50c>
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	4a03      	ldr	r2, [pc, #12]	@ (8002580 <HAL_RCC_OscConfig+0x504>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x52c>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	4b9c      	ldr	r3, [pc, #624]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	4a9b      	ldr	r2, [pc, #620]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002598:	4b98      	ldr	r3, [pc, #608]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	4a97      	ldr	r2, [pc, #604]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe fc40 	bl	8000e34 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fc3c 	bl	8000e34 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e12a      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ce:	4b8b      	ldr	r3, [pc, #556]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ed      	beq.n	80025b8 <HAL_RCC_OscConfig+0x53c>
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fc29 	bl	8000e34 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fc25 	bl	8000e34 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e113      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025fc:	4b7f      	ldr	r3, [pc, #508]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1ed      	bne.n	80025e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260a:	7ffb      	ldrb	r3, [r7, #31]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002610:	4b7a      	ldr	r3, [pc, #488]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	4a79      	ldr	r2, [pc, #484]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80fe 	beq.w	8002822 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	2b02      	cmp	r3, #2
 800262c:	f040 80d0 	bne.w	80027d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002630:	4b72      	ldr	r3, [pc, #456]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0203 	and.w	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	429a      	cmp	r2, r3
 8002642:	d130      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	3b01      	subs	r3, #1
 8002650:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d127      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002660:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d11f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002670:	2a07      	cmp	r2, #7
 8002672:	bf14      	ite	ne
 8002674:	2201      	movne	r2, #1
 8002676:	2200      	moveq	r2, #0
 8002678:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267a:	4293      	cmp	r3, r2
 800267c:	d113      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	3b01      	subs	r3, #1
 800268c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d06e      	beq.n	8002784 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d069      	beq.n	8002780 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ac:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026b8:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0ad      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026c8:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d4:	f7fe fbae 	bl	8000e34 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fbaa 	bl	8000e34 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e09a      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ee:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fa:	4b40      	ldr	r3, [pc, #256]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b40      	ldr	r3, [pc, #256]	@ (8002800 <HAL_RCC_OscConfig+0x784>)
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800270a:	3a01      	subs	r2, #1
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002714:	0212      	lsls	r2, r2, #8
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800271c:	0852      	lsrs	r2, r2, #1
 800271e:	3a01      	subs	r2, #1
 8002720:	0552      	lsls	r2, r2, #21
 8002722:	4311      	orrs	r1, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002728:	0852      	lsrs	r2, r2, #1
 800272a:	3a01      	subs	r2, #1
 800272c:	0652      	lsls	r2, r2, #25
 800272e:	4311      	orrs	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002734:	0912      	lsrs	r2, r2, #4
 8002736:	0452      	lsls	r2, r2, #17
 8002738:	430a      	orrs	r2, r1
 800273a:	4930      	ldr	r1, [pc, #192]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 800273c:	4313      	orrs	r3, r2
 800273e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002740:	4b2e      	ldr	r3, [pc, #184]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2d      	ldr	r2, [pc, #180]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800274c:	4b2b      	ldr	r3, [pc, #172]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a2a      	ldr	r2, [pc, #168]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002758:	f7fe fb6c 	bl	8000e34 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fb68 	bl	8000e34 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e058      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	4b22      	ldr	r3, [pc, #136]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277e:	e050      	b.n	8002822 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e04f      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d148      	bne.n	8002822 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002790:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800279c:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027a8:	f7fe fb44 	bl	8000e34 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe fb40 	bl	8000e34 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e030      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x734>
 80027ce:	e028      	b.n	8002822 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d023      	beq.n	800281e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a08      	ldr	r2, [pc, #32]	@ (80027fc <HAL_RCC_OscConfig+0x780>)
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fb27 	bl	8000e34 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e8:	e00c      	b.n	8002804 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe fb23 	bl	8000e34 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d905      	bls.n	8002804 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e013      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
 80027fc:	40021000 	.word	0x40021000
 8002800:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_RCC_OscConfig+0x7b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ec      	bne.n	80027ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_RCC_OscConfig+0x7b0>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4905      	ldr	r1, [pc, #20]	@ (800282c <HAL_RCC_OscConfig+0x7b0>)
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_OscConfig+0x7b4>)
 8002818:	4013      	ands	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
 800281c:	e001      	b.n	8002822 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	feeefffc 	.word	0xfeeefffc

08002834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0e7      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b75      	ldr	r3, [pc, #468]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b72      	ldr	r3, [pc, #456]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4970      	ldr	r1, [pc, #448]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b6e      	ldr	r3, [pc, #440]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cf      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4b66      	ldr	r3, [pc, #408]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002890:	429a      	cmp	r2, r3
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b63      	ldr	r3, [pc, #396]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4960      	ldr	r1, [pc, #384]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04c      	beq.n	800294c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d121      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0a6      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	4b54      	ldr	r3, [pc, #336]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e09a      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e08e      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e086      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b46      	ldr	r3, [pc, #280]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4943      	ldr	r1, [pc, #268]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fa8a 	bl	8000e34 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fe fa86 	bl	8000e34 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e06e      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b31      	ldr	r3, [pc, #196]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002964:	429a      	cmp	r2, r3
 8002966:	d208      	bcs.n	800297a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	492b      	ldr	r1, [pc, #172]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297a:	4b29      	ldr	r3, [pc, #164]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d210      	bcs.n	80029aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002988:	4b25      	ldr	r3, [pc, #148]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	4923      	ldr	r1, [pc, #140]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002998:	4b21      	ldr	r3, [pc, #132]	@ (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e036      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	4918      	ldr	r1, [pc, #96]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4910      	ldr	r1, [pc, #64]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e8:	f000 f824 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	490b      	ldr	r1, [pc, #44]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f4>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_RCC_ClockConfig+0x1fc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f9c1 	bl	8000d94 <HAL_InitTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08004ae4 	.word	0x08004ae4
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	4b3e      	ldr	r3, [pc, #248]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d121      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d11e      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a68:	4b34      	ldr	r3, [pc, #208]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a74:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a90:	4a2b      	ldr	r2, [pc, #172]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e004      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab8:	4b23      	ldr	r3, [pc, #140]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d134      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0xa6>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ad8:	e005      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002adc:	617b      	str	r3, [r7, #20]
      break;
 8002ade:	e005      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ae0:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ae2:	617b      	str	r3, [r7, #20]
      break;
 8002ae4:	e002      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	617b      	str	r3, [r7, #20]
      break;
 8002aea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	3301      	adds	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	fb03 f202 	mul.w	r2, r3, r2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	0e5b      	lsrs	r3, r3, #25
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08004afc 	.word	0x08004afc
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	007a1200 	.word	0x007a1200

08002b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b03      	ldr	r3, [pc, #12]	@ (8002b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b68:	f7ff fff0 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4904      	ldr	r1, [pc, #16]	@ (8002b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08004af4 	.word	0x08004af4

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b94:	f7ff ffda 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4904      	ldr	r1, [pc, #16]	@ (8002bb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004af4 	.word	0x08004af4

08002bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bd4:	f7ff f9ee 	bl	8001fb4 <HAL_PWREx_GetVoltageRange>
 8002bd8:	6178      	str	r0, [r7, #20]
 8002bda:	e014      	b.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b25      	ldr	r3, [pc, #148]	@ (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	4a24      	ldr	r2, [pc, #144]	@ (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be8:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bf4:	f7ff f9de 	bl	8001fb4 <HAL_PWREx_GetVoltageRange>
 8002bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c0c:	d10b      	bne.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b80      	cmp	r3, #128	@ 0x80
 8002c12:	d919      	bls.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c18:	d902      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e013      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	e010      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b80      	cmp	r3, #128	@ 0x80
 8002c2a:	d902      	bls.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	e00a      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	@ 0x80
 8002c36:	d102      	bne.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c38:	2302      	movs	r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	e004      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b70      	cmp	r3, #112	@ 0x70
 8002c42:	d101      	bne.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 0207 	bic.w	r2, r3, #7
 8002c50:	4909      	ldr	r1, [pc, #36]	@ (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40022000 	.word	0x40022000

08002c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c84:	2300      	movs	r3, #0
 8002c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c88:	2300      	movs	r3, #0
 8002c8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d041      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ca0:	d02a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ca2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ca6:	d824      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ca8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cb2:	d81e      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cbc:	d010      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cbe:	e018      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cc0:	4b86      	ldr	r3, [pc, #536]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a85      	ldr	r2, [pc, #532]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ccc:	e015      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fabb 	bl	8003250 <RCCEx_PLLSAI1_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cde:	e00c      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3320      	adds	r3, #32
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fba6 	bl	8003438 <RCCEx_PLLSAI2_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf0:	e003      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cf6:	e000      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d00:	4b76      	ldr	r3, [pc, #472]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d0e:	4973      	ldr	r1, [pc, #460]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d16:	e001      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d041      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d30:	d02a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d36:	d824      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d42:	d81e      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d50:	4b62      	ldr	r3, [pc, #392]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a61      	ldr	r2, [pc, #388]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d5c:	e015      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fa73 	bl	8003250 <RCCEx_PLLSAI1_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d6e:	e00c      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3320      	adds	r3, #32
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fb5e 	bl	8003438 <RCCEx_PLLSAI2_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d80:	e003      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	74fb      	strb	r3, [r7, #19]
      break;
 8002d86:	e000      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d90:	4b52      	ldr	r3, [pc, #328]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d9e:	494f      	ldr	r1, [pc, #316]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002da6:	e001      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a0 	beq.w	8002efa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd8:	4a40      	ldr	r2, [pc, #256]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de0:	4b3e      	ldr	r3, [pc, #248]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe f81a 	bl	8000e34 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e02:	e009      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fe f816 	bl	8000e34 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	74fb      	strb	r3, [r7, #19]
        break;
 8002e16:	e005      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e18:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ef      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d15c      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01f      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d019      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e48:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e54:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	4a20      	ldr	r2, [pc, #128]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e74:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fd ffd5 	bl	8000e34 <HAL_GetTick>
 8002e8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fd ffd1 	bl	8000e34 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d902      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ea4:	e006      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ec      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eca:	4904      	ldr	r1, [pc, #16]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ed2:	e009      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	74bb      	strb	r3, [r7, #18]
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee8:	7c7b      	ldrb	r3, [r7, #17]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eee:	4b9e      	ldr	r3, [pc, #632]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	4a9d      	ldr	r2, [pc, #628]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f06:	4b98      	ldr	r3, [pc, #608]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0c:	f023 0203 	bic.w	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f14:	4994      	ldr	r1, [pc, #592]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f28:	4b8f      	ldr	r3, [pc, #572]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2e:	f023 020c 	bic.w	r2, r3, #12
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f36:	498c      	ldr	r1, [pc, #560]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f4a:	4b87      	ldr	r3, [pc, #540]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	4983      	ldr	r1, [pc, #524]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	497b      	ldr	r1, [pc, #492]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f8e:	4b76      	ldr	r3, [pc, #472]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9c:	4972      	ldr	r1, [pc, #456]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fb0:	4b6d      	ldr	r3, [pc, #436]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	496a      	ldr	r1, [pc, #424]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd2:	4b65      	ldr	r3, [pc, #404]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	4961      	ldr	r1, [pc, #388]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003002:	4959      	ldr	r1, [pc, #356]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003016:	4b54      	ldr	r3, [pc, #336]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	4950      	ldr	r1, [pc, #320]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003038:	4b4b      	ldr	r3, [pc, #300]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003046:	4948      	ldr	r1, [pc, #288]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800305a:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	493f      	ldr	r1, [pc, #252]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d028      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800307c:	4b3a      	ldr	r3, [pc, #232]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800308a:	4937      	ldr	r1, [pc, #220]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800309a:	d106      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800309c:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a31      	ldr	r2, [pc, #196]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a6:	60d3      	str	r3, [r2, #12]
 80030a8:	e011      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b2:	d10c      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f8c8 	bl	8003250 <RCCEx_PLLSAI1_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d028      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030da:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	491f      	ldr	r1, [pc, #124]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030f8:	d106      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003104:	60d3      	str	r3, [r2, #12]
 8003106:	e011      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003110:	d10c      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3304      	adds	r3, #4
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f899 	bl	8003250 <RCCEx_PLLSAI1_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02b      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003146:	4908      	ldr	r1, [pc, #32]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003156:	d109      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003158:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a02      	ldr	r2, [pc, #8]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003162:	60d3      	str	r3, [r2, #12]
 8003164:	e014      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003174:	d10c      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f867 	bl	8003250 <RCCEx_PLLSAI1_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02f      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800319c:	4b2b      	ldr	r3, [pc, #172]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031aa:	4928      	ldr	r1, [pc, #160]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f844 	bl	8003250 <RCCEx_PLLSAI1_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d014      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	74bb      	strb	r3, [r7, #18]
 80031d6:	e011      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3320      	adds	r3, #32
 80031e6:	2102      	movs	r1, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f925 	bl	8003438 <RCCEx_PLLSAI2_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003208:	4b10      	ldr	r3, [pc, #64]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003216:	490d      	ldr	r1, [pc, #52]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323a:	4904      	ldr	r1, [pc, #16]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003242:	7cbb      	ldrb	r3, [r7, #18]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000

08003250 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800325e:	4b75      	ldr	r3, [pc, #468]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d018      	beq.n	800329c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800326a:	4b72      	ldr	r3, [pc, #456]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0203 	and.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d10d      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
       ||
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003282:	4b6c      	ldr	r3, [pc, #432]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
       ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d047      	beq.n	8003326 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	e044      	b.n	8003326 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d018      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0x86>
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d825      	bhi.n	80032f4 <RCCEx_PLLSAI1_Config+0xa4>
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d002      	beq.n	80032b2 <RCCEx_PLLSAI1_Config+0x62>
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d009      	beq.n	80032c4 <RCCEx_PLLSAI1_Config+0x74>
 80032b0:	e020      	b.n	80032f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032b2:	4b60      	ldr	r3, [pc, #384]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11d      	bne.n	80032fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c2:	e01a      	b.n	80032fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d116      	bne.n	80032fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e013      	b.n	80032fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032d6:	4b57      	ldr	r3, [pc, #348]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10f      	bne.n	8003302 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032e2:	4b54      	ldr	r3, [pc, #336]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032f2:	e006      	b.n	8003302 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      break;
 80032f8:	e004      	b.n	8003304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003302:	bf00      	nop
    }

    if(status == HAL_OK)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10d      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800330a:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	430b      	orrs	r3, r1
 8003320:	4944      	ldr	r1, [pc, #272]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d17d      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800332c:	4b41      	ldr	r3, [pc, #260]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a40      	ldr	r2, [pc, #256]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003332:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fd fd7c 	bl	8000e34 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800333e:	e009      	b.n	8003354 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003340:	f7fd fd78 	bl	8000e34 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d902      	bls.n	8003354 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	73fb      	strb	r3, [r7, #15]
        break;
 8003352:	e005      	b.n	8003360 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003354:	4b37      	ldr	r3, [pc, #220]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ef      	bne.n	8003340 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d160      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d111      	bne.n	8003390 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800336c:	4b31      	ldr	r3, [pc, #196]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6892      	ldr	r2, [r2, #8]
 800337c:	0211      	lsls	r1, r2, #8
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68d2      	ldr	r2, [r2, #12]
 8003382:	0912      	lsrs	r2, r2, #4
 8003384:	0452      	lsls	r2, r2, #17
 8003386:	430a      	orrs	r2, r1
 8003388:	492a      	ldr	r1, [pc, #168]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	610b      	str	r3, [r1, #16]
 800338e:	e027      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d112      	bne.n	80033bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003396:	4b27      	ldr	r3, [pc, #156]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800339e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	0211      	lsls	r1, r2, #8
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6912      	ldr	r2, [r2, #16]
 80033ac:	0852      	lsrs	r2, r2, #1
 80033ae:	3a01      	subs	r2, #1
 80033b0:	0552      	lsls	r2, r2, #21
 80033b2:	430a      	orrs	r2, r1
 80033b4:	491f      	ldr	r1, [pc, #124]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	610b      	str	r3, [r1, #16]
 80033ba:	e011      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	0211      	lsls	r1, r2, #8
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6952      	ldr	r2, [r2, #20]
 80033d2:	0852      	lsrs	r2, r2, #1
 80033d4:	3a01      	subs	r2, #1
 80033d6:	0652      	lsls	r2, r2, #25
 80033d8:	430a      	orrs	r2, r1
 80033da:	4916      	ldr	r1, [pc, #88]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033e0:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fd fd22 	bl	8000e34 <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033f2:	e009      	b.n	8003408 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033f4:	f7fd fd1e 	bl	8000e34 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	73fb      	strb	r3, [r7, #15]
          break;
 8003406:	e005      	b.n	8003414 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003408:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ef      	beq.n	80033f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	4904      	ldr	r1, [pc, #16]	@ (8003434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000

08003438 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003446:	4b6a      	ldr	r3, [pc, #424]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003452:	4b67      	ldr	r3, [pc, #412]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0203 	and.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d10d      	bne.n	800347e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
       ||
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800346a:	4b61      	ldr	r3, [pc, #388]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
       ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d047      	beq.n	800350e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	e044      	b.n	800350e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d018      	beq.n	80034be <RCCEx_PLLSAI2_Config+0x86>
 800348c:	2b03      	cmp	r3, #3
 800348e:	d825      	bhi.n	80034dc <RCCEx_PLLSAI2_Config+0xa4>
 8003490:	2b01      	cmp	r3, #1
 8003492:	d002      	beq.n	800349a <RCCEx_PLLSAI2_Config+0x62>
 8003494:	2b02      	cmp	r3, #2
 8003496:	d009      	beq.n	80034ac <RCCEx_PLLSAI2_Config+0x74>
 8003498:	e020      	b.n	80034dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800349a:	4b55      	ldr	r3, [pc, #340]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11d      	bne.n	80034e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034aa:	e01a      	b.n	80034e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034ac:	4b50      	ldr	r3, [pc, #320]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034bc:	e013      	b.n	80034e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034be:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ca:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034da:	e006      	b.n	80034ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      break;
 80034e0:	e004      	b.n	80034ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034e2:	bf00      	nop
 80034e4:	e002      	b.n	80034ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034e6:	bf00      	nop
 80034e8:	e000      	b.n	80034ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034f2:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	430b      	orrs	r3, r1
 8003508:	4939      	ldr	r1, [pc, #228]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d167      	bne.n	80035e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003514:	4b36      	ldr	r3, [pc, #216]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a35      	ldr	r2, [pc, #212]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800351e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003520:	f7fd fc88 	bl	8000e34 <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003526:	e009      	b.n	800353c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003528:	f7fd fc84 	bl	8000e34 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d902      	bls.n	800353c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	73fb      	strb	r3, [r7, #15]
        break;
 800353a:	e005      	b.n	8003548 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800353c:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ef      	bne.n	8003528 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d14a      	bne.n	80035e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003554:	4b26      	ldr	r3, [pc, #152]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800355c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	0211      	lsls	r1, r2, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68d2      	ldr	r2, [r2, #12]
 800356a:	0912      	lsrs	r2, r2, #4
 800356c:	0452      	lsls	r2, r2, #17
 800356e:	430a      	orrs	r2, r1
 8003570:	491f      	ldr	r1, [pc, #124]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	614b      	str	r3, [r1, #20]
 8003576:	e011      	b.n	800359c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003578:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003580:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	0211      	lsls	r1, r2, #8
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6912      	ldr	r2, [r2, #16]
 800358e:	0852      	lsrs	r2, r2, #1
 8003590:	3a01      	subs	r2, #1
 8003592:	0652      	lsls	r2, r2, #25
 8003594:	430a      	orrs	r2, r1
 8003596:	4916      	ldr	r1, [pc, #88]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003598:	4313      	orrs	r3, r2
 800359a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fd fc44 	bl	8000e34 <HAL_GetTick>
 80035ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035ae:	e009      	b.n	80035c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035b0:	f7fd fc40 	bl	8000e34 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d902      	bls.n	80035c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	73fb      	strb	r3, [r7, #15]
          break;
 80035c2:	e005      	b.n	80035d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035c4:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ef      	beq.n	80035b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035d6:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4904      	ldr	r1, [pc, #16]	@ (80035f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000

080035f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e040      	b.n	8003688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fa9e 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	@ 0x24
 8003620:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fb6a 	bl	8003d14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8af 	bl	80037a4 <UART_SetConfig>
 8003646:	4603      	mov	r3, r0
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e01b      	b.n	8003688 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800365e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800366e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fbe9 	bl	8003e58 <UART_CheckIdleState>
 8003686:	4603      	mov	r3, r0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d177      	bne.n	8003798 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Transmit+0x24>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e070      	b.n	800379a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2221      	movs	r2, #33	@ 0x21
 80036c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c6:	f7fd fbb5 	bl	8000e34 <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e4:	d108      	bne.n	80036f8 <HAL_UART_Transmit+0x68>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e003      	b.n	8003700 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003700:	e02f      	b.n	8003762 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fc4b 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e03b      	b.n	800379a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003734:	b292      	uxth	r2, r2
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	3302      	adds	r3, #2
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e007      	b.n	8003750 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3301      	adds	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1c9      	bne.n	8003702 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2140      	movs	r1, #64	@ 0x40
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fc15 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e005      	b.n	800379a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b08a      	sub	sp, #40	@ 0x28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4ba4      	ldr	r3, [pc, #656]	@ (8003a64 <UART_SetConfig+0x2c0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037dc:	430b      	orrs	r3, r1
 80037de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a99      	ldr	r2, [pc, #612]	@ (8003a68 <UART_SetConfig+0x2c4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	4313      	orrs	r3, r2
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a90      	ldr	r2, [pc, #576]	@ (8003a6c <UART_SetConfig+0x2c8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d126      	bne.n	800387c <UART_SetConfig+0xd8>
 800382e:	4b90      	ldr	r3, [pc, #576]	@ (8003a70 <UART_SetConfig+0x2cc>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b03      	cmp	r3, #3
 800383a:	d81b      	bhi.n	8003874 <UART_SetConfig+0xd0>
 800383c:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <UART_SetConfig+0xa0>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003855 	.word	0x08003855
 8003848:	08003865 	.word	0x08003865
 800384c:	0800385d 	.word	0x0800385d
 8003850:	0800386d 	.word	0x0800386d
 8003854:	2301      	movs	r3, #1
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385a:	e116      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800385c:	2302      	movs	r3, #2
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003862:	e112      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003864:	2304      	movs	r3, #4
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e10e      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800386c:	2308      	movs	r3, #8
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e10a      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003874:	2310      	movs	r3, #16
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387a:	e106      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a7c      	ldr	r2, [pc, #496]	@ (8003a74 <UART_SetConfig+0x2d0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d138      	bne.n	80038f8 <UART_SetConfig+0x154>
 8003886:	4b7a      	ldr	r3, [pc, #488]	@ (8003a70 <UART_SetConfig+0x2cc>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b0c      	cmp	r3, #12
 8003892:	d82d      	bhi.n	80038f0 <UART_SetConfig+0x14c>
 8003894:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <UART_SetConfig+0xf8>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038d1 	.word	0x080038d1
 80038a0:	080038f1 	.word	0x080038f1
 80038a4:	080038f1 	.word	0x080038f1
 80038a8:	080038f1 	.word	0x080038f1
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	080038f1 	.word	0x080038f1
 80038b4:	080038f1 	.word	0x080038f1
 80038b8:	080038f1 	.word	0x080038f1
 80038bc:	080038d9 	.word	0x080038d9
 80038c0:	080038f1 	.word	0x080038f1
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d6:	e0d8      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038de:	e0d4      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e6:	e0d0      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ee:	e0cc      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f6:	e0c8      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003a78 <UART_SetConfig+0x2d4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d125      	bne.n	800394e <UART_SetConfig+0x1aa>
 8003902:	4b5b      	ldr	r3, [pc, #364]	@ (8003a70 <UART_SetConfig+0x2cc>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800390c:	2b30      	cmp	r3, #48	@ 0x30
 800390e:	d016      	beq.n	800393e <UART_SetConfig+0x19a>
 8003910:	2b30      	cmp	r3, #48	@ 0x30
 8003912:	d818      	bhi.n	8003946 <UART_SetConfig+0x1a2>
 8003914:	2b20      	cmp	r3, #32
 8003916:	d00a      	beq.n	800392e <UART_SetConfig+0x18a>
 8003918:	2b20      	cmp	r3, #32
 800391a:	d814      	bhi.n	8003946 <UART_SetConfig+0x1a2>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <UART_SetConfig+0x182>
 8003920:	2b10      	cmp	r3, #16
 8003922:	d008      	beq.n	8003936 <UART_SetConfig+0x192>
 8003924:	e00f      	b.n	8003946 <UART_SetConfig+0x1a2>
 8003926:	2300      	movs	r3, #0
 8003928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800392c:	e0ad      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800392e:	2302      	movs	r3, #2
 8003930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003934:	e0a9      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003936:	2304      	movs	r3, #4
 8003938:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800393c:	e0a5      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800393e:	2308      	movs	r3, #8
 8003940:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003944:	e0a1      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003946:	2310      	movs	r3, #16
 8003948:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394c:	e09d      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4a      	ldr	r2, [pc, #296]	@ (8003a7c <UART_SetConfig+0x2d8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d125      	bne.n	80039a4 <UART_SetConfig+0x200>
 8003958:	4b45      	ldr	r3, [pc, #276]	@ (8003a70 <UART_SetConfig+0x2cc>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003962:	2bc0      	cmp	r3, #192	@ 0xc0
 8003964:	d016      	beq.n	8003994 <UART_SetConfig+0x1f0>
 8003966:	2bc0      	cmp	r3, #192	@ 0xc0
 8003968:	d818      	bhi.n	800399c <UART_SetConfig+0x1f8>
 800396a:	2b80      	cmp	r3, #128	@ 0x80
 800396c:	d00a      	beq.n	8003984 <UART_SetConfig+0x1e0>
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d814      	bhi.n	800399c <UART_SetConfig+0x1f8>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <UART_SetConfig+0x1d8>
 8003976:	2b40      	cmp	r3, #64	@ 0x40
 8003978:	d008      	beq.n	800398c <UART_SetConfig+0x1e8>
 800397a:	e00f      	b.n	800399c <UART_SetConfig+0x1f8>
 800397c:	2300      	movs	r3, #0
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003982:	e082      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003984:	2302      	movs	r3, #2
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398a:	e07e      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800398c:	2304      	movs	r3, #4
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003992:	e07a      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003994:	2308      	movs	r3, #8
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399a:	e076      	b.n	8003a8a <UART_SetConfig+0x2e6>
 800399c:	2310      	movs	r3, #16
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039a2:	e072      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a35      	ldr	r2, [pc, #212]	@ (8003a80 <UART_SetConfig+0x2dc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d12a      	bne.n	8003a04 <UART_SetConfig+0x260>
 80039ae:	4b30      	ldr	r3, [pc, #192]	@ (8003a70 <UART_SetConfig+0x2cc>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039bc:	d01a      	beq.n	80039f4 <UART_SetConfig+0x250>
 80039be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039c2:	d81b      	bhi.n	80039fc <UART_SetConfig+0x258>
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c8:	d00c      	beq.n	80039e4 <UART_SetConfig+0x240>
 80039ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ce:	d815      	bhi.n	80039fc <UART_SetConfig+0x258>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <UART_SetConfig+0x238>
 80039d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d8:	d008      	beq.n	80039ec <UART_SetConfig+0x248>
 80039da:	e00f      	b.n	80039fc <UART_SetConfig+0x258>
 80039dc:	2300      	movs	r3, #0
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e2:	e052      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80039e4:	2302      	movs	r3, #2
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ea:	e04e      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80039ec:	2304      	movs	r3, #4
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f2:	e04a      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80039f4:	2308      	movs	r3, #8
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fa:	e046      	b.n	8003a8a <UART_SetConfig+0x2e6>
 80039fc:	2310      	movs	r3, #16
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a02:	e042      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a17      	ldr	r2, [pc, #92]	@ (8003a68 <UART_SetConfig+0x2c4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d13a      	bne.n	8003a84 <UART_SetConfig+0x2e0>
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <UART_SetConfig+0x2cc>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a1c:	d01a      	beq.n	8003a54 <UART_SetConfig+0x2b0>
 8003a1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a22:	d81b      	bhi.n	8003a5c <UART_SetConfig+0x2b8>
 8003a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a28:	d00c      	beq.n	8003a44 <UART_SetConfig+0x2a0>
 8003a2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a2e:	d815      	bhi.n	8003a5c <UART_SetConfig+0x2b8>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <UART_SetConfig+0x298>
 8003a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a38:	d008      	beq.n	8003a4c <UART_SetConfig+0x2a8>
 8003a3a:	e00f      	b.n	8003a5c <UART_SetConfig+0x2b8>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a42:	e022      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003a44:	2302      	movs	r3, #2
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4a:	e01e      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a52:	e01a      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003a54:	2308      	movs	r3, #8
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5a:	e016      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a62:	e012      	b.n	8003a8a <UART_SetConfig+0x2e6>
 8003a64:	efff69f3 	.word	0xefff69f3
 8003a68:	40008000 	.word	0x40008000
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40004400 	.word	0x40004400
 8003a78:	40004800 	.word	0x40004800
 8003a7c:	40004c00 	.word	0x40004c00
 8003a80:	40005000 	.word	0x40005000
 8003a84:	2310      	movs	r3, #16
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a9f      	ldr	r2, [pc, #636]	@ (8003d0c <UART_SetConfig+0x568>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d17a      	bne.n	8003b8a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d824      	bhi.n	8003ae6 <UART_SetConfig+0x342>
 8003a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <UART_SetConfig+0x300>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ae7 	.word	0x08003ae7
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003ad7 	.word	0x08003ad7
 8003ab8:	08003ae7 	.word	0x08003ae7
 8003abc:	08003ae7 	.word	0x08003ae7
 8003ac0:	08003ae7 	.word	0x08003ae7
 8003ac4:	08003adf 	.word	0x08003adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7ff f84c 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8003acc:	61f8      	str	r0, [r7, #28]
        break;
 8003ace:	e010      	b.n	8003af2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad0:	4b8f      	ldr	r3, [pc, #572]	@ (8003d10 <UART_SetConfig+0x56c>)
 8003ad2:	61fb      	str	r3, [r7, #28]
        break;
 8003ad4:	e00d      	b.n	8003af2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7fe ffad 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8003ada:	61f8      	str	r0, [r7, #28]
        break;
 8003adc:	e009      	b.n	8003af2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ae2:	61fb      	str	r3, [r7, #28]
        break;
 8003ae4:	e005      	b.n	8003af2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80fb 	beq.w	8003cf0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d305      	bcc.n	8003b16 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d903      	bls.n	8003b1e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b1c:	e0e8      	b.n	8003cf0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2200      	movs	r2, #0
 8003b22:	461c      	mov	r4, r3
 8003b24:	4615      	mov	r5, r2
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	022b      	lsls	r3, r5, #8
 8003b30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b34:	0222      	lsls	r2, r4, #8
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	6849      	ldr	r1, [r1, #4]
 8003b3a:	0849      	lsrs	r1, r1, #1
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	4688      	mov	r8, r1
 8003b40:	4681      	mov	r9, r0
 8003b42:	eb12 0a08 	adds.w	sl, r2, r8
 8003b46:	eb43 0b09 	adc.w	fp, r3, r9
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b58:	4650      	mov	r0, sl
 8003b5a:	4659      	mov	r1, fp
 8003b5c:	f7fc fb88 	bl	8000270 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b6e:	d308      	bcc.n	8003b82 <UART_SetConfig+0x3de>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b76:	d204      	bcs.n	8003b82 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	e0b6      	b.n	8003cf0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b88:	e0b2      	b.n	8003cf0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b92:	d15e      	bne.n	8003c52 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d828      	bhi.n	8003bee <UART_SetConfig+0x44a>
 8003b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <UART_SetConfig+0x400>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe ffcc 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61f8      	str	r0, [r7, #28]
        break;
 8003bce:	e014      	b.n	8003bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7fe ffde 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003bd4:	61f8      	str	r0, [r7, #28]
        break;
 8003bd6:	e010      	b.n	8003bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003d10 <UART_SetConfig+0x56c>)
 8003bda:	61fb      	str	r3, [r7, #28]
        break;
 8003bdc:	e00d      	b.n	8003bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7fe ff29 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8003be2:	61f8      	str	r0, [r7, #28]
        break;
 8003be4:	e009      	b.n	8003bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bea:	61fb      	str	r3, [r7, #28]
        break;
 8003bec:	e005      	b.n	8003bfa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d077      	beq.n	8003cf0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005a      	lsls	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	441a      	add	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d916      	bls.n	8003c4a <UART_SetConfig+0x4a6>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c22:	d212      	bcs.n	8003c4a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f023 030f 	bic.w	r3, r3, #15
 8003c2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	8afb      	ldrh	r3, [r7, #22]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	8afa      	ldrh	r2, [r7, #22]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	e052      	b.n	8003cf0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c50:	e04e      	b.n	8003cf0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d827      	bhi.n	8003caa <UART_SetConfig+0x506>
 8003c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c60 <UART_SetConfig+0x4bc>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003c8d 	.word	0x08003c8d
 8003c68:	08003c95 	.word	0x08003c95
 8003c6c:	08003cab 	.word	0x08003cab
 8003c70:	08003c9b 	.word	0x08003c9b
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003cab 	.word	0x08003cab
 8003c7c:	08003cab 	.word	0x08003cab
 8003c80:	08003ca3 	.word	0x08003ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe ff6e 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8003c88:	61f8      	str	r0, [r7, #28]
        break;
 8003c8a:	e014      	b.n	8003cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c8c:	f7fe ff80 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e010      	b.n	8003cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <UART_SetConfig+0x56c>)
 8003c96:	61fb      	str	r3, [r7, #28]
        break;
 8003c98:	e00d      	b.n	8003cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe fecb 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8003c9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ca0:	e009      	b.n	8003cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ca6:	61fb      	str	r3, [r7, #28]
        break;
 8003ca8:	e005      	b.n	8003cb6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cb4:	bf00      	nop
    }

    if (pclk != 0U)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d019      	beq.n	8003cf0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	085a      	lsrs	r2, r3, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b0f      	cmp	r3, #15
 8003cd4:	d909      	bls.n	8003cea <UART_SetConfig+0x546>
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cdc:	d205      	bcs.n	8003cea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
 8003ce8:	e002      	b.n	8003cf0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cfc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3728      	adds	r7, #40	@ 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40008000 	.word	0x40008000
 8003d10:	00f42400 	.word	0x00f42400

08003d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e12:	d10a      	bne.n	8003e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b098      	sub	sp, #96	@ 0x60
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e68:	f7fc ffe4 	bl	8000e34 <HAL_GetTick>
 8003e6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d12e      	bne.n	8003eda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e84:	2200      	movs	r2, #0
 8003e86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f88c 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d021      	beq.n	8003eda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e6      	bne.n	8003e96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e062      	b.n	8003fa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d149      	bne.n	8003f7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f856 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03c      	beq.n	8003f7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e6      	bne.n	8003f02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f54:	61fa      	str	r2, [r7, #28]
 8003f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	617b      	str	r3, [r7, #20]
   return(result);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e011      	b.n	8003fa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3758      	adds	r7, #88	@ 0x58
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	e04f      	b.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d04b      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7fc ff37 	bl	8000e34 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e04e      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d037      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b80      	cmp	r3, #128	@ 0x80
 8003fee:	d034      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b40      	cmp	r3, #64	@ 0x40
 8003ff4:	d031      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d110      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2208      	movs	r2, #8
 800400a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f838 	bl	8004082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2208      	movs	r2, #8
 8004016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e029      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004034:	d111      	bne.n	800405a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800403e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f81e 	bl	8004082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e00f      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	429a      	cmp	r2, r3
 8004076:	d0a0      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004082:	b480      	push	{r7}
 8004084:	b095      	sub	sp, #84	@ 0x54
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e6      	bne.n	800408a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d118      	bne.n	800412a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	60bb      	str	r3, [r7, #8]
   return(result);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0310 	bic.w	r3, r3, #16
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	613b      	str	r3, [r7, #16]
   return(result);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e6      	bne.n	80040f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800413e:	bf00      	nop
 8004140:	3754      	adds	r7, #84	@ 0x54
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <sniprintf>:
 800414c:	b40c      	push	{r2, r3}
 800414e:	b530      	push	{r4, r5, lr}
 8004150:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <sniprintf+0x68>)
 8004152:	1e0c      	subs	r4, r1, #0
 8004154:	681d      	ldr	r5, [r3, #0]
 8004156:	b09d      	sub	sp, #116	@ 0x74
 8004158:	da08      	bge.n	800416c <sniprintf+0x20>
 800415a:	238b      	movs	r3, #139	@ 0x8b
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	f04f 30ff 	mov.w	r0, #4294967295
 8004162:	b01d      	add	sp, #116	@ 0x74
 8004164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004168:	b002      	add	sp, #8
 800416a:	4770      	bx	lr
 800416c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004170:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	931b      	str	r3, [sp, #108]	@ 0x6c
 800417a:	bf14      	ite	ne
 800417c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004180:	4623      	moveq	r3, r4
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	9307      	str	r3, [sp, #28]
 8004186:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800418a:	9002      	str	r0, [sp, #8]
 800418c:	9006      	str	r0, [sp, #24]
 800418e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004192:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004194:	ab21      	add	r3, sp, #132	@ 0x84
 8004196:	a902      	add	r1, sp, #8
 8004198:	4628      	mov	r0, r5
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	f000 f994 	bl	80044c8 <_svfiprintf_r>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	bfbc      	itt	lt
 80041a4:	238b      	movlt	r3, #139	@ 0x8b
 80041a6:	602b      	strlt	r3, [r5, #0]
 80041a8:	2c00      	cmp	r4, #0
 80041aa:	d0da      	beq.n	8004162 <sniprintf+0x16>
 80041ac:	9b02      	ldr	r3, [sp, #8]
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e7d6      	b.n	8004162 <sniprintf+0x16>
 80041b4:	2000000c 	.word	0x2000000c

080041b8 <memset>:
 80041b8:	4402      	add	r2, r0
 80041ba:	4603      	mov	r3, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	f803 1b01 	strb.w	r1, [r3], #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <__errno>:
 80041c8:	4b01      	ldr	r3, [pc, #4]	@ (80041d0 <__errno+0x8>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	2000000c 	.word	0x2000000c

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4d0d      	ldr	r5, [pc, #52]	@ (800420c <__libc_init_array+0x38>)
 80041d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004210 <__libc_init_array+0x3c>)
 80041da:	1b64      	subs	r4, r4, r5
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	2600      	movs	r6, #0
 80041e0:	42a6      	cmp	r6, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004214 <__libc_init_array+0x40>)
 80041e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004218 <__libc_init_array+0x44>)
 80041e8:	f000 fc64 	bl	8004ab4 <_init>
 80041ec:	1b64      	subs	r4, r4, r5
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	2600      	movs	r6, #0
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fc:	4798      	blx	r3
 80041fe:	3601      	adds	r6, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	f855 3b04 	ldr.w	r3, [r5], #4
 8004206:	4798      	blx	r3
 8004208:	3601      	adds	r6, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	08004b68 	.word	0x08004b68
 8004210:	08004b68 	.word	0x08004b68
 8004214:	08004b68 	.word	0x08004b68
 8004218:	08004b6c 	.word	0x08004b6c

0800421c <__retarget_lock_acquire_recursive>:
 800421c:	4770      	bx	lr

0800421e <__retarget_lock_release_recursive>:
 800421e:	4770      	bx	lr

08004220 <_free_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4605      	mov	r5, r0
 8004224:	2900      	cmp	r1, #0
 8004226:	d041      	beq.n	80042ac <_free_r+0x8c>
 8004228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422c:	1f0c      	subs	r4, r1, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfb8      	it	lt
 8004232:	18e4      	addlt	r4, r4, r3
 8004234:	f000 f8e0 	bl	80043f8 <__malloc_lock>
 8004238:	4a1d      	ldr	r2, [pc, #116]	@ (80042b0 <_free_r+0x90>)
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	b933      	cbnz	r3, 800424c <_free_r+0x2c>
 800423e:	6063      	str	r3, [r4, #4]
 8004240:	6014      	str	r4, [r2, #0]
 8004242:	4628      	mov	r0, r5
 8004244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004248:	f000 b8dc 	b.w	8004404 <__malloc_unlock>
 800424c:	42a3      	cmp	r3, r4
 800424e:	d908      	bls.n	8004262 <_free_r+0x42>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	bf01      	itttt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	1809      	addeq	r1, r1, r0
 800425e:	6021      	streq	r1, [r4, #0]
 8004260:	e7ed      	b.n	800423e <_free_r+0x1e>
 8004262:	461a      	mov	r2, r3
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b10b      	cbz	r3, 800426c <_free_r+0x4c>
 8004268:	42a3      	cmp	r3, r4
 800426a:	d9fa      	bls.n	8004262 <_free_r+0x42>
 800426c:	6811      	ldr	r1, [r2, #0]
 800426e:	1850      	adds	r0, r2, r1
 8004270:	42a0      	cmp	r0, r4
 8004272:	d10b      	bne.n	800428c <_free_r+0x6c>
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	4401      	add	r1, r0
 8004278:	1850      	adds	r0, r2, r1
 800427a:	4283      	cmp	r3, r0
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	d1e0      	bne.n	8004242 <_free_r+0x22>
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	6053      	str	r3, [r2, #4]
 8004286:	4408      	add	r0, r1
 8004288:	6010      	str	r0, [r2, #0]
 800428a:	e7da      	b.n	8004242 <_free_r+0x22>
 800428c:	d902      	bls.n	8004294 <_free_r+0x74>
 800428e:	230c      	movs	r3, #12
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	e7d6      	b.n	8004242 <_free_r+0x22>
 8004294:	6820      	ldr	r0, [r4, #0]
 8004296:	1821      	adds	r1, r4, r0
 8004298:	428b      	cmp	r3, r1
 800429a:	bf04      	itt	eq
 800429c:	6819      	ldreq	r1, [r3, #0]
 800429e:	685b      	ldreq	r3, [r3, #4]
 80042a0:	6063      	str	r3, [r4, #4]
 80042a2:	bf04      	itt	eq
 80042a4:	1809      	addeq	r1, r1, r0
 80042a6:	6021      	streq	r1, [r4, #0]
 80042a8:	6054      	str	r4, [r2, #4]
 80042aa:	e7ca      	b.n	8004242 <_free_r+0x22>
 80042ac:	bd38      	pop	{r3, r4, r5, pc}
 80042ae:	bf00      	nop
 80042b0:	200002ec 	.word	0x200002ec

080042b4 <sbrk_aligned>:
 80042b4:	b570      	push	{r4, r5, r6, lr}
 80042b6:	4e0f      	ldr	r6, [pc, #60]	@ (80042f4 <sbrk_aligned+0x40>)
 80042b8:	460c      	mov	r4, r1
 80042ba:	6831      	ldr	r1, [r6, #0]
 80042bc:	4605      	mov	r5, r0
 80042be:	b911      	cbnz	r1, 80042c6 <sbrk_aligned+0x12>
 80042c0:	f000 fba4 	bl	8004a0c <_sbrk_r>
 80042c4:	6030      	str	r0, [r6, #0]
 80042c6:	4621      	mov	r1, r4
 80042c8:	4628      	mov	r0, r5
 80042ca:	f000 fb9f 	bl	8004a0c <_sbrk_r>
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	d103      	bne.n	80042da <sbrk_aligned+0x26>
 80042d2:	f04f 34ff 	mov.w	r4, #4294967295
 80042d6:	4620      	mov	r0, r4
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	1cc4      	adds	r4, r0, #3
 80042dc:	f024 0403 	bic.w	r4, r4, #3
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d0f8      	beq.n	80042d6 <sbrk_aligned+0x22>
 80042e4:	1a21      	subs	r1, r4, r0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 fb90 	bl	8004a0c <_sbrk_r>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d1f2      	bne.n	80042d6 <sbrk_aligned+0x22>
 80042f0:	e7ef      	b.n	80042d2 <sbrk_aligned+0x1e>
 80042f2:	bf00      	nop
 80042f4:	200002e8 	.word	0x200002e8

080042f8 <_malloc_r>:
 80042f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042fc:	1ccd      	adds	r5, r1, #3
 80042fe:	f025 0503 	bic.w	r5, r5, #3
 8004302:	3508      	adds	r5, #8
 8004304:	2d0c      	cmp	r5, #12
 8004306:	bf38      	it	cc
 8004308:	250c      	movcc	r5, #12
 800430a:	2d00      	cmp	r5, #0
 800430c:	4606      	mov	r6, r0
 800430e:	db01      	blt.n	8004314 <_malloc_r+0x1c>
 8004310:	42a9      	cmp	r1, r5
 8004312:	d904      	bls.n	800431e <_malloc_r+0x26>
 8004314:	230c      	movs	r3, #12
 8004316:	6033      	str	r3, [r6, #0]
 8004318:	2000      	movs	r0, #0
 800431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043f4 <_malloc_r+0xfc>
 8004322:	f000 f869 	bl	80043f8 <__malloc_lock>
 8004326:	f8d8 3000 	ldr.w	r3, [r8]
 800432a:	461c      	mov	r4, r3
 800432c:	bb44      	cbnz	r4, 8004380 <_malloc_r+0x88>
 800432e:	4629      	mov	r1, r5
 8004330:	4630      	mov	r0, r6
 8004332:	f7ff ffbf 	bl	80042b4 <sbrk_aligned>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	4604      	mov	r4, r0
 800433a:	d158      	bne.n	80043ee <_malloc_r+0xf6>
 800433c:	f8d8 4000 	ldr.w	r4, [r8]
 8004340:	4627      	mov	r7, r4
 8004342:	2f00      	cmp	r7, #0
 8004344:	d143      	bne.n	80043ce <_malloc_r+0xd6>
 8004346:	2c00      	cmp	r4, #0
 8004348:	d04b      	beq.n	80043e2 <_malloc_r+0xea>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	4639      	mov	r1, r7
 800434e:	4630      	mov	r0, r6
 8004350:	eb04 0903 	add.w	r9, r4, r3
 8004354:	f000 fb5a 	bl	8004a0c <_sbrk_r>
 8004358:	4581      	cmp	r9, r0
 800435a:	d142      	bne.n	80043e2 <_malloc_r+0xea>
 800435c:	6821      	ldr	r1, [r4, #0]
 800435e:	1a6d      	subs	r5, r5, r1
 8004360:	4629      	mov	r1, r5
 8004362:	4630      	mov	r0, r6
 8004364:	f7ff ffa6 	bl	80042b4 <sbrk_aligned>
 8004368:	3001      	adds	r0, #1
 800436a:	d03a      	beq.n	80043e2 <_malloc_r+0xea>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	442b      	add	r3, r5
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	f8d8 3000 	ldr.w	r3, [r8]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	bb62      	cbnz	r2, 80043d4 <_malloc_r+0xdc>
 800437a:	f8c8 7000 	str.w	r7, [r8]
 800437e:	e00f      	b.n	80043a0 <_malloc_r+0xa8>
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	1b52      	subs	r2, r2, r5
 8004384:	d420      	bmi.n	80043c8 <_malloc_r+0xd0>
 8004386:	2a0b      	cmp	r2, #11
 8004388:	d917      	bls.n	80043ba <_malloc_r+0xc2>
 800438a:	1961      	adds	r1, r4, r5
 800438c:	42a3      	cmp	r3, r4
 800438e:	6025      	str	r5, [r4, #0]
 8004390:	bf18      	it	ne
 8004392:	6059      	strne	r1, [r3, #4]
 8004394:	6863      	ldr	r3, [r4, #4]
 8004396:	bf08      	it	eq
 8004398:	f8c8 1000 	streq.w	r1, [r8]
 800439c:	5162      	str	r2, [r4, r5]
 800439e:	604b      	str	r3, [r1, #4]
 80043a0:	4630      	mov	r0, r6
 80043a2:	f000 f82f 	bl	8004404 <__malloc_unlock>
 80043a6:	f104 000b 	add.w	r0, r4, #11
 80043aa:	1d23      	adds	r3, r4, #4
 80043ac:	f020 0007 	bic.w	r0, r0, #7
 80043b0:	1ac2      	subs	r2, r0, r3
 80043b2:	bf1c      	itt	ne
 80043b4:	1a1b      	subne	r3, r3, r0
 80043b6:	50a3      	strne	r3, [r4, r2]
 80043b8:	e7af      	b.n	800431a <_malloc_r+0x22>
 80043ba:	6862      	ldr	r2, [r4, #4]
 80043bc:	42a3      	cmp	r3, r4
 80043be:	bf0c      	ite	eq
 80043c0:	f8c8 2000 	streq.w	r2, [r8]
 80043c4:	605a      	strne	r2, [r3, #4]
 80043c6:	e7eb      	b.n	80043a0 <_malloc_r+0xa8>
 80043c8:	4623      	mov	r3, r4
 80043ca:	6864      	ldr	r4, [r4, #4]
 80043cc:	e7ae      	b.n	800432c <_malloc_r+0x34>
 80043ce:	463c      	mov	r4, r7
 80043d0:	687f      	ldr	r7, [r7, #4]
 80043d2:	e7b6      	b.n	8004342 <_malloc_r+0x4a>
 80043d4:	461a      	mov	r2, r3
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	42a3      	cmp	r3, r4
 80043da:	d1fb      	bne.n	80043d4 <_malloc_r+0xdc>
 80043dc:	2300      	movs	r3, #0
 80043de:	6053      	str	r3, [r2, #4]
 80043e0:	e7de      	b.n	80043a0 <_malloc_r+0xa8>
 80043e2:	230c      	movs	r3, #12
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	4630      	mov	r0, r6
 80043e8:	f000 f80c 	bl	8004404 <__malloc_unlock>
 80043ec:	e794      	b.n	8004318 <_malloc_r+0x20>
 80043ee:	6005      	str	r5, [r0, #0]
 80043f0:	e7d6      	b.n	80043a0 <_malloc_r+0xa8>
 80043f2:	bf00      	nop
 80043f4:	200002ec 	.word	0x200002ec

080043f8 <__malloc_lock>:
 80043f8:	4801      	ldr	r0, [pc, #4]	@ (8004400 <__malloc_lock+0x8>)
 80043fa:	f7ff bf0f 	b.w	800421c <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	200002e4 	.word	0x200002e4

08004404 <__malloc_unlock>:
 8004404:	4801      	ldr	r0, [pc, #4]	@ (800440c <__malloc_unlock+0x8>)
 8004406:	f7ff bf0a 	b.w	800421e <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	200002e4 	.word	0x200002e4

08004410 <__ssputs_r>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	688e      	ldr	r6, [r1, #8]
 8004416:	461f      	mov	r7, r3
 8004418:	42be      	cmp	r6, r7
 800441a:	680b      	ldr	r3, [r1, #0]
 800441c:	4682      	mov	sl, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4690      	mov	r8, r2
 8004422:	d82d      	bhi.n	8004480 <__ssputs_r+0x70>
 8004424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004428:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800442c:	d026      	beq.n	800447c <__ssputs_r+0x6c>
 800442e:	6965      	ldr	r5, [r4, #20]
 8004430:	6909      	ldr	r1, [r1, #16]
 8004432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004436:	eba3 0901 	sub.w	r9, r3, r1
 800443a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800443e:	1c7b      	adds	r3, r7, #1
 8004440:	444b      	add	r3, r9
 8004442:	106d      	asrs	r5, r5, #1
 8004444:	429d      	cmp	r5, r3
 8004446:	bf38      	it	cc
 8004448:	461d      	movcc	r5, r3
 800444a:	0553      	lsls	r3, r2, #21
 800444c:	d527      	bpl.n	800449e <__ssputs_r+0x8e>
 800444e:	4629      	mov	r1, r5
 8004450:	f7ff ff52 	bl	80042f8 <_malloc_r>
 8004454:	4606      	mov	r6, r0
 8004456:	b360      	cbz	r0, 80044b2 <__ssputs_r+0xa2>
 8004458:	6921      	ldr	r1, [r4, #16]
 800445a:	464a      	mov	r2, r9
 800445c:	f000 fae6 	bl	8004a2c <memcpy>
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800446a:	81a3      	strh	r3, [r4, #12]
 800446c:	6126      	str	r6, [r4, #16]
 800446e:	6165      	str	r5, [r4, #20]
 8004470:	444e      	add	r6, r9
 8004472:	eba5 0509 	sub.w	r5, r5, r9
 8004476:	6026      	str	r6, [r4, #0]
 8004478:	60a5      	str	r5, [r4, #8]
 800447a:	463e      	mov	r6, r7
 800447c:	42be      	cmp	r6, r7
 800447e:	d900      	bls.n	8004482 <__ssputs_r+0x72>
 8004480:	463e      	mov	r6, r7
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	4632      	mov	r2, r6
 8004486:	4641      	mov	r1, r8
 8004488:	f000 faa6 	bl	80049d8 <memmove>
 800448c:	68a3      	ldr	r3, [r4, #8]
 800448e:	1b9b      	subs	r3, r3, r6
 8004490:	60a3      	str	r3, [r4, #8]
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	4433      	add	r3, r6
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	2000      	movs	r0, #0
 800449a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449e:	462a      	mov	r2, r5
 80044a0:	f000 fad2 	bl	8004a48 <_realloc_r>
 80044a4:	4606      	mov	r6, r0
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d1e0      	bne.n	800446c <__ssputs_r+0x5c>
 80044aa:	6921      	ldr	r1, [r4, #16]
 80044ac:	4650      	mov	r0, sl
 80044ae:	f7ff feb7 	bl	8004220 <_free_r>
 80044b2:	230c      	movs	r3, #12
 80044b4:	f8ca 3000 	str.w	r3, [sl]
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044be:	81a3      	strh	r3, [r4, #12]
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	e7e9      	b.n	800449a <__ssputs_r+0x8a>
	...

080044c8 <_svfiprintf_r>:
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	4698      	mov	r8, r3
 80044ce:	898b      	ldrh	r3, [r1, #12]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	b09d      	sub	sp, #116	@ 0x74
 80044d4:	4607      	mov	r7, r0
 80044d6:	460d      	mov	r5, r1
 80044d8:	4614      	mov	r4, r2
 80044da:	d510      	bpl.n	80044fe <_svfiprintf_r+0x36>
 80044dc:	690b      	ldr	r3, [r1, #16]
 80044de:	b973      	cbnz	r3, 80044fe <_svfiprintf_r+0x36>
 80044e0:	2140      	movs	r1, #64	@ 0x40
 80044e2:	f7ff ff09 	bl	80042f8 <_malloc_r>
 80044e6:	6028      	str	r0, [r5, #0]
 80044e8:	6128      	str	r0, [r5, #16]
 80044ea:	b930      	cbnz	r0, 80044fa <_svfiprintf_r+0x32>
 80044ec:	230c      	movs	r3, #12
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	b01d      	add	sp, #116	@ 0x74
 80044f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fa:	2340      	movs	r3, #64	@ 0x40
 80044fc:	616b      	str	r3, [r5, #20]
 80044fe:	2300      	movs	r3, #0
 8004500:	9309      	str	r3, [sp, #36]	@ 0x24
 8004502:	2320      	movs	r3, #32
 8004504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004508:	f8cd 800c 	str.w	r8, [sp, #12]
 800450c:	2330      	movs	r3, #48	@ 0x30
 800450e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046ac <_svfiprintf_r+0x1e4>
 8004512:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004516:	f04f 0901 	mov.w	r9, #1
 800451a:	4623      	mov	r3, r4
 800451c:	469a      	mov	sl, r3
 800451e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004522:	b10a      	cbz	r2, 8004528 <_svfiprintf_r+0x60>
 8004524:	2a25      	cmp	r2, #37	@ 0x25
 8004526:	d1f9      	bne.n	800451c <_svfiprintf_r+0x54>
 8004528:	ebba 0b04 	subs.w	fp, sl, r4
 800452c:	d00b      	beq.n	8004546 <_svfiprintf_r+0x7e>
 800452e:	465b      	mov	r3, fp
 8004530:	4622      	mov	r2, r4
 8004532:	4629      	mov	r1, r5
 8004534:	4638      	mov	r0, r7
 8004536:	f7ff ff6b 	bl	8004410 <__ssputs_r>
 800453a:	3001      	adds	r0, #1
 800453c:	f000 80a7 	beq.w	800468e <_svfiprintf_r+0x1c6>
 8004540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004542:	445a      	add	r2, fp
 8004544:	9209      	str	r2, [sp, #36]	@ 0x24
 8004546:	f89a 3000 	ldrb.w	r3, [sl]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 809f 	beq.w	800468e <_svfiprintf_r+0x1c6>
 8004550:	2300      	movs	r3, #0
 8004552:	f04f 32ff 	mov.w	r2, #4294967295
 8004556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800455a:	f10a 0a01 	add.w	sl, sl, #1
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	9307      	str	r3, [sp, #28]
 8004562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004566:	931a      	str	r3, [sp, #104]	@ 0x68
 8004568:	4654      	mov	r4, sl
 800456a:	2205      	movs	r2, #5
 800456c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004570:	484e      	ldr	r0, [pc, #312]	@ (80046ac <_svfiprintf_r+0x1e4>)
 8004572:	f7fb fe2d 	bl	80001d0 <memchr>
 8004576:	9a04      	ldr	r2, [sp, #16]
 8004578:	b9d8      	cbnz	r0, 80045b2 <_svfiprintf_r+0xea>
 800457a:	06d0      	lsls	r0, r2, #27
 800457c:	bf44      	itt	mi
 800457e:	2320      	movmi	r3, #32
 8004580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004584:	0711      	lsls	r1, r2, #28
 8004586:	bf44      	itt	mi
 8004588:	232b      	movmi	r3, #43	@ 0x2b
 800458a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800458e:	f89a 3000 	ldrb.w	r3, [sl]
 8004592:	2b2a      	cmp	r3, #42	@ 0x2a
 8004594:	d015      	beq.n	80045c2 <_svfiprintf_r+0xfa>
 8004596:	9a07      	ldr	r2, [sp, #28]
 8004598:	4654      	mov	r4, sl
 800459a:	2000      	movs	r0, #0
 800459c:	f04f 0c0a 	mov.w	ip, #10
 80045a0:	4621      	mov	r1, r4
 80045a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a6:	3b30      	subs	r3, #48	@ 0x30
 80045a8:	2b09      	cmp	r3, #9
 80045aa:	d94b      	bls.n	8004644 <_svfiprintf_r+0x17c>
 80045ac:	b1b0      	cbz	r0, 80045dc <_svfiprintf_r+0x114>
 80045ae:	9207      	str	r2, [sp, #28]
 80045b0:	e014      	b.n	80045dc <_svfiprintf_r+0x114>
 80045b2:	eba0 0308 	sub.w	r3, r0, r8
 80045b6:	fa09 f303 	lsl.w	r3, r9, r3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	46a2      	mov	sl, r4
 80045c0:	e7d2      	b.n	8004568 <_svfiprintf_r+0xa0>
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	1d19      	adds	r1, r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	9103      	str	r1, [sp, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfbb      	ittet	lt
 80045ce:	425b      	neglt	r3, r3
 80045d0:	f042 0202 	orrlt.w	r2, r2, #2
 80045d4:	9307      	strge	r3, [sp, #28]
 80045d6:	9307      	strlt	r3, [sp, #28]
 80045d8:	bfb8      	it	lt
 80045da:	9204      	strlt	r2, [sp, #16]
 80045dc:	7823      	ldrb	r3, [r4, #0]
 80045de:	2b2e      	cmp	r3, #46	@ 0x2e
 80045e0:	d10a      	bne.n	80045f8 <_svfiprintf_r+0x130>
 80045e2:	7863      	ldrb	r3, [r4, #1]
 80045e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e6:	d132      	bne.n	800464e <_svfiprintf_r+0x186>
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	9203      	str	r2, [sp, #12]
 80045f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045f4:	3402      	adds	r4, #2
 80045f6:	9305      	str	r3, [sp, #20]
 80045f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046bc <_svfiprintf_r+0x1f4>
 80045fc:	7821      	ldrb	r1, [r4, #0]
 80045fe:	2203      	movs	r2, #3
 8004600:	4650      	mov	r0, sl
 8004602:	f7fb fde5 	bl	80001d0 <memchr>
 8004606:	b138      	cbz	r0, 8004618 <_svfiprintf_r+0x150>
 8004608:	9b04      	ldr	r3, [sp, #16]
 800460a:	eba0 000a 	sub.w	r0, r0, sl
 800460e:	2240      	movs	r2, #64	@ 0x40
 8004610:	4082      	lsls	r2, r0
 8004612:	4313      	orrs	r3, r2
 8004614:	3401      	adds	r4, #1
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461c:	4824      	ldr	r0, [pc, #144]	@ (80046b0 <_svfiprintf_r+0x1e8>)
 800461e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004622:	2206      	movs	r2, #6
 8004624:	f7fb fdd4 	bl	80001d0 <memchr>
 8004628:	2800      	cmp	r0, #0
 800462a:	d036      	beq.n	800469a <_svfiprintf_r+0x1d2>
 800462c:	4b21      	ldr	r3, [pc, #132]	@ (80046b4 <_svfiprintf_r+0x1ec>)
 800462e:	bb1b      	cbnz	r3, 8004678 <_svfiprintf_r+0x1b0>
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	3307      	adds	r3, #7
 8004634:	f023 0307 	bic.w	r3, r3, #7
 8004638:	3308      	adds	r3, #8
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800463e:	4433      	add	r3, r6
 8004640:	9309      	str	r3, [sp, #36]	@ 0x24
 8004642:	e76a      	b.n	800451a <_svfiprintf_r+0x52>
 8004644:	fb0c 3202 	mla	r2, ip, r2, r3
 8004648:	460c      	mov	r4, r1
 800464a:	2001      	movs	r0, #1
 800464c:	e7a8      	b.n	80045a0 <_svfiprintf_r+0xd8>
 800464e:	2300      	movs	r3, #0
 8004650:	3401      	adds	r4, #1
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	4619      	mov	r1, r3
 8004656:	f04f 0c0a 	mov.w	ip, #10
 800465a:	4620      	mov	r0, r4
 800465c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004660:	3a30      	subs	r2, #48	@ 0x30
 8004662:	2a09      	cmp	r2, #9
 8004664:	d903      	bls.n	800466e <_svfiprintf_r+0x1a6>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0c6      	beq.n	80045f8 <_svfiprintf_r+0x130>
 800466a:	9105      	str	r1, [sp, #20]
 800466c:	e7c4      	b.n	80045f8 <_svfiprintf_r+0x130>
 800466e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004672:	4604      	mov	r4, r0
 8004674:	2301      	movs	r3, #1
 8004676:	e7f0      	b.n	800465a <_svfiprintf_r+0x192>
 8004678:	ab03      	add	r3, sp, #12
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	462a      	mov	r2, r5
 800467e:	4b0e      	ldr	r3, [pc, #56]	@ (80046b8 <_svfiprintf_r+0x1f0>)
 8004680:	a904      	add	r1, sp, #16
 8004682:	4638      	mov	r0, r7
 8004684:	f3af 8000 	nop.w
 8004688:	1c42      	adds	r2, r0, #1
 800468a:	4606      	mov	r6, r0
 800468c:	d1d6      	bne.n	800463c <_svfiprintf_r+0x174>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	065b      	lsls	r3, r3, #25
 8004692:	f53f af2d 	bmi.w	80044f0 <_svfiprintf_r+0x28>
 8004696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004698:	e72c      	b.n	80044f4 <_svfiprintf_r+0x2c>
 800469a:	ab03      	add	r3, sp, #12
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	462a      	mov	r2, r5
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <_svfiprintf_r+0x1f0>)
 80046a2:	a904      	add	r1, sp, #16
 80046a4:	4638      	mov	r0, r7
 80046a6:	f000 f879 	bl	800479c <_printf_i>
 80046aa:	e7ed      	b.n	8004688 <_svfiprintf_r+0x1c0>
 80046ac:	08004b2c 	.word	0x08004b2c
 80046b0:	08004b36 	.word	0x08004b36
 80046b4:	00000000 	.word	0x00000000
 80046b8:	08004411 	.word	0x08004411
 80046bc:	08004b32 	.word	0x08004b32

080046c0 <_printf_common>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	4698      	mov	r8, r3
 80046c8:	688a      	ldr	r2, [r1, #8]
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bfb8      	it	lt
 80046d4:	4613      	movlt	r3, r2
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046dc:	4607      	mov	r7, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	b10a      	cbz	r2, 80046e6 <_printf_common+0x26>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	6833      	ldrmi	r3, [r6, #0]
 80046ee:	3302      	addmi	r3, #2
 80046f0:	6033      	strmi	r3, [r6, #0]
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	f015 0506 	ands.w	r5, r5, #6
 80046f8:	d106      	bne.n	8004708 <_printf_common+0x48>
 80046fa:	f104 0a19 	add.w	sl, r4, #25
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	6832      	ldr	r2, [r6, #0]
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	42ab      	cmp	r3, r5
 8004706:	dc26      	bgt.n	8004756 <_printf_common+0x96>
 8004708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	3b00      	subs	r3, #0
 8004710:	bf18      	it	ne
 8004712:	2301      	movne	r3, #1
 8004714:	0692      	lsls	r2, r2, #26
 8004716:	d42b      	bmi.n	8004770 <_printf_common+0xb0>
 8004718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800471c:	4641      	mov	r1, r8
 800471e:	4638      	mov	r0, r7
 8004720:	47c8      	blx	r9
 8004722:	3001      	adds	r0, #1
 8004724:	d01e      	beq.n	8004764 <_printf_common+0xa4>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf02      	ittt	eq
 8004732:	68e5      	ldreq	r5, [r4, #12]
 8004734:	6833      	ldreq	r3, [r6, #0]
 8004736:	1aed      	subeq	r5, r5, r3
 8004738:	68a3      	ldr	r3, [r4, #8]
 800473a:	bf0c      	ite	eq
 800473c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004740:	2500      	movne	r5, #0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfc4      	itt	gt
 8004746:	1a9b      	subgt	r3, r3, r2
 8004748:	18ed      	addgt	r5, r5, r3
 800474a:	2600      	movs	r6, #0
 800474c:	341a      	adds	r4, #26
 800474e:	42b5      	cmp	r5, r6
 8004750:	d11a      	bne.n	8004788 <_printf_common+0xc8>
 8004752:	2000      	movs	r0, #0
 8004754:	e008      	b.n	8004768 <_printf_common+0xa8>
 8004756:	2301      	movs	r3, #1
 8004758:	4652      	mov	r2, sl
 800475a:	4641      	mov	r1, r8
 800475c:	4638      	mov	r0, r7
 800475e:	47c8      	blx	r9
 8004760:	3001      	adds	r0, #1
 8004762:	d103      	bne.n	800476c <_printf_common+0xac>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	3501      	adds	r5, #1
 800476e:	e7c6      	b.n	80046fe <_printf_common+0x3e>
 8004770:	18e1      	adds	r1, r4, r3
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	2030      	movs	r0, #48	@ 0x30
 8004776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800477a:	4422      	add	r2, r4
 800477c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004784:	3302      	adds	r3, #2
 8004786:	e7c7      	b.n	8004718 <_printf_common+0x58>
 8004788:	2301      	movs	r3, #1
 800478a:	4622      	mov	r2, r4
 800478c:	4641      	mov	r1, r8
 800478e:	4638      	mov	r0, r7
 8004790:	47c8      	blx	r9
 8004792:	3001      	adds	r0, #1
 8004794:	d0e6      	beq.n	8004764 <_printf_common+0xa4>
 8004796:	3601      	adds	r6, #1
 8004798:	e7d9      	b.n	800474e <_printf_common+0x8e>
	...

0800479c <_printf_i>:
 800479c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	7e0f      	ldrb	r7, [r1, #24]
 80047a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a4:	2f78      	cmp	r7, #120	@ 0x78
 80047a6:	4691      	mov	r9, r2
 80047a8:	4680      	mov	r8, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	469a      	mov	sl, r3
 80047ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047b2:	d807      	bhi.n	80047c4 <_printf_i+0x28>
 80047b4:	2f62      	cmp	r7, #98	@ 0x62
 80047b6:	d80a      	bhi.n	80047ce <_printf_i+0x32>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	f000 80d1 	beq.w	8004960 <_printf_i+0x1c4>
 80047be:	2f58      	cmp	r7, #88	@ 0x58
 80047c0:	f000 80b8 	beq.w	8004934 <_printf_i+0x198>
 80047c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047cc:	e03a      	b.n	8004844 <_printf_i+0xa8>
 80047ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047d2:	2b15      	cmp	r3, #21
 80047d4:	d8f6      	bhi.n	80047c4 <_printf_i+0x28>
 80047d6:	a101      	add	r1, pc, #4	@ (adr r1, 80047dc <_printf_i+0x40>)
 80047d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047dc:	08004835 	.word	0x08004835
 80047e0:	08004849 	.word	0x08004849
 80047e4:	080047c5 	.word	0x080047c5
 80047e8:	080047c5 	.word	0x080047c5
 80047ec:	080047c5 	.word	0x080047c5
 80047f0:	080047c5 	.word	0x080047c5
 80047f4:	08004849 	.word	0x08004849
 80047f8:	080047c5 	.word	0x080047c5
 80047fc:	080047c5 	.word	0x080047c5
 8004800:	080047c5 	.word	0x080047c5
 8004804:	080047c5 	.word	0x080047c5
 8004808:	08004947 	.word	0x08004947
 800480c:	08004873 	.word	0x08004873
 8004810:	08004901 	.word	0x08004901
 8004814:	080047c5 	.word	0x080047c5
 8004818:	080047c5 	.word	0x080047c5
 800481c:	08004969 	.word	0x08004969
 8004820:	080047c5 	.word	0x080047c5
 8004824:	08004873 	.word	0x08004873
 8004828:	080047c5 	.word	0x080047c5
 800482c:	080047c5 	.word	0x080047c5
 8004830:	08004909 	.word	0x08004909
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6032      	str	r2, [r6, #0]
 800483c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004844:	2301      	movs	r3, #1
 8004846:	e09c      	b.n	8004982 <_printf_i+0x1e6>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	1d19      	adds	r1, r3, #4
 800484e:	6031      	str	r1, [r6, #0]
 8004850:	0606      	lsls	r6, r0, #24
 8004852:	d501      	bpl.n	8004858 <_printf_i+0xbc>
 8004854:	681d      	ldr	r5, [r3, #0]
 8004856:	e003      	b.n	8004860 <_printf_i+0xc4>
 8004858:	0645      	lsls	r5, r0, #25
 800485a:	d5fb      	bpl.n	8004854 <_printf_i+0xb8>
 800485c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004860:	2d00      	cmp	r5, #0
 8004862:	da03      	bge.n	800486c <_printf_i+0xd0>
 8004864:	232d      	movs	r3, #45	@ 0x2d
 8004866:	426d      	negs	r5, r5
 8004868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486c:	4858      	ldr	r0, [pc, #352]	@ (80049d0 <_printf_i+0x234>)
 800486e:	230a      	movs	r3, #10
 8004870:	e011      	b.n	8004896 <_printf_i+0xfa>
 8004872:	6821      	ldr	r1, [r4, #0]
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	0608      	lsls	r0, r1, #24
 8004878:	f853 5b04 	ldr.w	r5, [r3], #4
 800487c:	d402      	bmi.n	8004884 <_printf_i+0xe8>
 800487e:	0649      	lsls	r1, r1, #25
 8004880:	bf48      	it	mi
 8004882:	b2ad      	uxthmi	r5, r5
 8004884:	2f6f      	cmp	r7, #111	@ 0x6f
 8004886:	4852      	ldr	r0, [pc, #328]	@ (80049d0 <_printf_i+0x234>)
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	bf14      	ite	ne
 800488c:	230a      	movne	r3, #10
 800488e:	2308      	moveq	r3, #8
 8004890:	2100      	movs	r1, #0
 8004892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004896:	6866      	ldr	r6, [r4, #4]
 8004898:	60a6      	str	r6, [r4, #8]
 800489a:	2e00      	cmp	r6, #0
 800489c:	db05      	blt.n	80048aa <_printf_i+0x10e>
 800489e:	6821      	ldr	r1, [r4, #0]
 80048a0:	432e      	orrs	r6, r5
 80048a2:	f021 0104 	bic.w	r1, r1, #4
 80048a6:	6021      	str	r1, [r4, #0]
 80048a8:	d04b      	beq.n	8004942 <_printf_i+0x1a6>
 80048aa:	4616      	mov	r6, r2
 80048ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b0:	fb03 5711 	mls	r7, r3, r1, r5
 80048b4:	5dc7      	ldrb	r7, [r0, r7]
 80048b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ba:	462f      	mov	r7, r5
 80048bc:	42bb      	cmp	r3, r7
 80048be:	460d      	mov	r5, r1
 80048c0:	d9f4      	bls.n	80048ac <_printf_i+0x110>
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d10b      	bne.n	80048de <_printf_i+0x142>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	07df      	lsls	r7, r3, #31
 80048ca:	d508      	bpl.n	80048de <_printf_i+0x142>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	6861      	ldr	r1, [r4, #4]
 80048d0:	4299      	cmp	r1, r3
 80048d2:	bfde      	ittt	le
 80048d4:	2330      	movle	r3, #48	@ 0x30
 80048d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048de:	1b92      	subs	r2, r2, r6
 80048e0:	6122      	str	r2, [r4, #16]
 80048e2:	f8cd a000 	str.w	sl, [sp]
 80048e6:	464b      	mov	r3, r9
 80048e8:	aa03      	add	r2, sp, #12
 80048ea:	4621      	mov	r1, r4
 80048ec:	4640      	mov	r0, r8
 80048ee:	f7ff fee7 	bl	80046c0 <_printf_common>
 80048f2:	3001      	adds	r0, #1
 80048f4:	d14a      	bne.n	800498c <_printf_i+0x1f0>
 80048f6:	f04f 30ff 	mov.w	r0, #4294967295
 80048fa:	b004      	add	sp, #16
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	f043 0320 	orr.w	r3, r3, #32
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	4832      	ldr	r0, [pc, #200]	@ (80049d4 <_printf_i+0x238>)
 800490a:	2778      	movs	r7, #120	@ 0x78
 800490c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	6831      	ldr	r1, [r6, #0]
 8004914:	061f      	lsls	r7, r3, #24
 8004916:	f851 5b04 	ldr.w	r5, [r1], #4
 800491a:	d402      	bmi.n	8004922 <_printf_i+0x186>
 800491c:	065f      	lsls	r7, r3, #25
 800491e:	bf48      	it	mi
 8004920:	b2ad      	uxthmi	r5, r5
 8004922:	6031      	str	r1, [r6, #0]
 8004924:	07d9      	lsls	r1, r3, #31
 8004926:	bf44      	itt	mi
 8004928:	f043 0320 	orrmi.w	r3, r3, #32
 800492c:	6023      	strmi	r3, [r4, #0]
 800492e:	b11d      	cbz	r5, 8004938 <_printf_i+0x19c>
 8004930:	2310      	movs	r3, #16
 8004932:	e7ad      	b.n	8004890 <_printf_i+0xf4>
 8004934:	4826      	ldr	r0, [pc, #152]	@ (80049d0 <_printf_i+0x234>)
 8004936:	e7e9      	b.n	800490c <_printf_i+0x170>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f023 0320 	bic.w	r3, r3, #32
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	e7f6      	b.n	8004930 <_printf_i+0x194>
 8004942:	4616      	mov	r6, r2
 8004944:	e7bd      	b.n	80048c2 <_printf_i+0x126>
 8004946:	6833      	ldr	r3, [r6, #0]
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	6961      	ldr	r1, [r4, #20]
 800494c:	1d18      	adds	r0, r3, #4
 800494e:	6030      	str	r0, [r6, #0]
 8004950:	062e      	lsls	r6, r5, #24
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	d501      	bpl.n	800495a <_printf_i+0x1be>
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	e002      	b.n	8004960 <_printf_i+0x1c4>
 800495a:	0668      	lsls	r0, r5, #25
 800495c:	d5fb      	bpl.n	8004956 <_printf_i+0x1ba>
 800495e:	8019      	strh	r1, [r3, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	4616      	mov	r6, r2
 8004966:	e7bc      	b.n	80048e2 <_printf_i+0x146>
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	6032      	str	r2, [r6, #0]
 800496e:	681e      	ldr	r6, [r3, #0]
 8004970:	6862      	ldr	r2, [r4, #4]
 8004972:	2100      	movs	r1, #0
 8004974:	4630      	mov	r0, r6
 8004976:	f7fb fc2b 	bl	80001d0 <memchr>
 800497a:	b108      	cbz	r0, 8004980 <_printf_i+0x1e4>
 800497c:	1b80      	subs	r0, r0, r6
 800497e:	6060      	str	r0, [r4, #4]
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2300      	movs	r3, #0
 8004986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800498a:	e7aa      	b.n	80048e2 <_printf_i+0x146>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	4632      	mov	r2, r6
 8004990:	4649      	mov	r1, r9
 8004992:	4640      	mov	r0, r8
 8004994:	47d0      	blx	sl
 8004996:	3001      	adds	r0, #1
 8004998:	d0ad      	beq.n	80048f6 <_printf_i+0x15a>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	079b      	lsls	r3, r3, #30
 800499e:	d413      	bmi.n	80049c8 <_printf_i+0x22c>
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	4298      	cmp	r0, r3
 80049a6:	bfb8      	it	lt
 80049a8:	4618      	movlt	r0, r3
 80049aa:	e7a6      	b.n	80048fa <_printf_i+0x15e>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4632      	mov	r2, r6
 80049b0:	4649      	mov	r1, r9
 80049b2:	4640      	mov	r0, r8
 80049b4:	47d0      	blx	sl
 80049b6:	3001      	adds	r0, #1
 80049b8:	d09d      	beq.n	80048f6 <_printf_i+0x15a>
 80049ba:	3501      	adds	r5, #1
 80049bc:	68e3      	ldr	r3, [r4, #12]
 80049be:	9903      	ldr	r1, [sp, #12]
 80049c0:	1a5b      	subs	r3, r3, r1
 80049c2:	42ab      	cmp	r3, r5
 80049c4:	dcf2      	bgt.n	80049ac <_printf_i+0x210>
 80049c6:	e7eb      	b.n	80049a0 <_printf_i+0x204>
 80049c8:	2500      	movs	r5, #0
 80049ca:	f104 0619 	add.w	r6, r4, #25
 80049ce:	e7f5      	b.n	80049bc <_printf_i+0x220>
 80049d0:	08004b3d 	.word	0x08004b3d
 80049d4:	08004b4e 	.word	0x08004b4e

080049d8 <memmove>:
 80049d8:	4288      	cmp	r0, r1
 80049da:	b510      	push	{r4, lr}
 80049dc:	eb01 0402 	add.w	r4, r1, r2
 80049e0:	d902      	bls.n	80049e8 <memmove+0x10>
 80049e2:	4284      	cmp	r4, r0
 80049e4:	4623      	mov	r3, r4
 80049e6:	d807      	bhi.n	80049f8 <memmove+0x20>
 80049e8:	1e43      	subs	r3, r0, #1
 80049ea:	42a1      	cmp	r1, r4
 80049ec:	d008      	beq.n	8004a00 <memmove+0x28>
 80049ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049f6:	e7f8      	b.n	80049ea <memmove+0x12>
 80049f8:	4402      	add	r2, r0
 80049fa:	4601      	mov	r1, r0
 80049fc:	428a      	cmp	r2, r1
 80049fe:	d100      	bne.n	8004a02 <memmove+0x2a>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a0a:	e7f7      	b.n	80049fc <memmove+0x24>

08004a0c <_sbrk_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d06      	ldr	r5, [pc, #24]	@ (8004a28 <_sbrk_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc f92a 	bl	8000c70 <_sbrk>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_sbrk_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_sbrk_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	200002e0 	.word	0x200002e0

08004a2c <memcpy>:
 8004a2c:	440a      	add	r2, r1
 8004a2e:	4291      	cmp	r1, r2
 8004a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a34:	d100      	bne.n	8004a38 <memcpy+0xc>
 8004a36:	4770      	bx	lr
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a42:	4291      	cmp	r1, r2
 8004a44:	d1f9      	bne.n	8004a3a <memcpy+0xe>
 8004a46:	bd10      	pop	{r4, pc}

08004a48 <_realloc_r>:
 8004a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	4614      	mov	r4, r2
 8004a50:	460d      	mov	r5, r1
 8004a52:	b921      	cbnz	r1, 8004a5e <_realloc_r+0x16>
 8004a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a58:	4611      	mov	r1, r2
 8004a5a:	f7ff bc4d 	b.w	80042f8 <_malloc_r>
 8004a5e:	b92a      	cbnz	r2, 8004a6c <_realloc_r+0x24>
 8004a60:	f7ff fbde 	bl	8004220 <_free_r>
 8004a64:	4625      	mov	r5, r4
 8004a66:	4628      	mov	r0, r5
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6c:	f000 f81a 	bl	8004aa4 <_malloc_usable_size_r>
 8004a70:	4284      	cmp	r4, r0
 8004a72:	4606      	mov	r6, r0
 8004a74:	d802      	bhi.n	8004a7c <_realloc_r+0x34>
 8004a76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a7a:	d8f4      	bhi.n	8004a66 <_realloc_r+0x1e>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f7ff fc3a 	bl	80042f8 <_malloc_r>
 8004a84:	4680      	mov	r8, r0
 8004a86:	b908      	cbnz	r0, 8004a8c <_realloc_r+0x44>
 8004a88:	4645      	mov	r5, r8
 8004a8a:	e7ec      	b.n	8004a66 <_realloc_r+0x1e>
 8004a8c:	42b4      	cmp	r4, r6
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	bf28      	it	cs
 8004a94:	4632      	movcs	r2, r6
 8004a96:	f7ff ffc9 	bl	8004a2c <memcpy>
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7ff fbbf 	bl	8004220 <_free_r>
 8004aa2:	e7f1      	b.n	8004a88 <_realloc_r+0x40>

08004aa4 <_malloc_usable_size_r>:
 8004aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa8:	1f18      	subs	r0, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bfbc      	itt	lt
 8004aae:	580b      	ldrlt	r3, [r1, r0]
 8004ab0:	18c0      	addlt	r0, r0, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_init>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr

08004ac0 <_fini>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr
